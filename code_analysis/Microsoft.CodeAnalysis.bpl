type Ref;

type Field;

type Union = Ref;

type HeapType = [Ref][Field]Union;

const unique null: Ref;

var $Alloc: [Ref]bool;

procedure {:inline 1} Alloc() returns (x: Ref);
  modifies $Alloc;

implementation {:inline 1} Alloc() returns (x: Ref)
{
    assume $Alloc[x] == false && x != null;
    $Alloc[x] := true;
}

var $Heap: HeapType;

function {:inline true} Read(H: HeapType, o: Ref, f: Field) : Union
{
  H[o][f]
}

function {:inline true} Write(H: HeapType, o: Ref, f: Field, v: Union) : HeapType
{
  H[o := H[o][f := v]]
}

function Union2Bool(u: Union) : bool;

function Union2Int(u: Union) : int;

function Union2Real(u: Union) : real;

function Bool2Union(boolValue: bool) : Union;

function Int2Union(intValue: int) : Union;

function Real2Union(realValue: real) : Union;

function Int2Bool(intValue: int) : bool;

type Type = Ref;

function $TypeConstructor(Ref) : int;
function $DynamicType(Ref) : Type;
function $Subtype(Type, Type) : bool;

axiom(forall $T,$T1: Ref:: {  $Subtype($T1, $T) } ($Subtype($T1, $T) && $Subtype($T, $T1)) ==> $T1 == $T );
axiom(forall $T,$T1,$T2: Ref:: {  $Subtype($T2, $T1), $Subtype($T1, $T) } ($Subtype($T2, $T1) && $Subtype($T1, $T)) ==> $Subtype($T2, $T) );
axiom(forall $T,$T1,$T2: Ref:: {  $Subtype($T2, $T1), $Subtype($T2, $T) } ($Subtype($T2, $T1) && $Subtype($T1, $T)) ==> $Subtype($T2, $T) );

function {:extern} T$System.Object() : Ref;
const {:extern} unique T$System.Object: int;

axiom $TypeConstructor(T$System.Object()) == T$System.Object;

axiom $Subtype(T$System.Object(), T$System.Object());


function $As(a: Ref, b: Type) : Ref;

axiom (forall a: Ref, b: Type :: { $As(a, b): Ref } $As(a, b): Ref == (if $Subtype($DynamicType(a), b) then a else null));

procedure {:inline 1} System.Object.GetType(this: Ref) returns ($result: Ref);



implementation {:inline 1} System.Object.GetType(this: Ref) returns ($result: Ref)
{
    $result := $DynamicType(this);
}

// used for delegates
function $RefToDelegateMethod(int, Ref) : bool;
function $RefToDelegateReceiver(int, Ref) : Ref;
function $RefToDelegateTypeParameters(int, Ref) : Type;
// used for delegates - don't know yet what it is for (from BCT)
function Type0() : Ref;

procedure System.String.Equals$System.String(a$in: Ref, b$in: Ref) returns ($result: bool);
procedure System.String.op_Equality$System.String$System.String(a$in: Ref, b$in: Ref) returns ($result: bool);
procedure System.String.op_Inequality$System.String$System.String(a$in: Ref, b$in: Ref) returns ($result: bool);

implementation System.String.Equals$System.String(a$in: Ref, b$in: Ref) returns ($result: bool)
{
  $result := (a$in == b$in);
}

implementation System.String.op_Equality$System.String$System.String(a$in: Ref, b$in: Ref) returns ($result: bool) 
{
  $result := (a$in == b$in);
}

implementation System.String.op_Inequality$System.String$System.String(a$in: Ref, b$in: Ref) returns ($result: bool) 
{
  $result := (a$in != b$in);
}

// global state for exceptions
var $Exception : Ref;
var $ExceptionType : Ref;
// state of exceptions during catch execution - useful for rethrows
// catch handlers set $Exception to null, we might need the previous value if there is a rethrow.
var $ExceptionInCatchHandler : Ref;
var $ExceptionInCatchHandlerType : Ref;

var $ArrayContents: [Ref][int]Union;
function $ArrayLength(Ref) : int;

procedure $ReadArrayElement(array: Ref, index : int) returns ($result: Union);
implementation $ReadArrayElement(array: Ref, index : int) returns ($result: Union)
{
    //assert $ArrayLength(array) > index && index >= 0;
	$result := $ArrayContents[array][index];
}

procedure $WriteArrayElement(array: Ref, index : int, data : Union);
implementation $WriteArrayElement(array: Ref, index : int, data : Union)
{
    //assert $ArrayLength(array) > index && index >= 0;
	$ArrayContents := $ArrayContents[array := $ArrayContents[array][index := data]];
}

// atomic initialization of array elements
procedure $HavocArrayElementsNoNull(array: Ref);
implementation $HavocArrayElementsNoNull(array: Ref)
{
	var $newArrayContents: [int]Union;
	assume (forall $tmp1: int :: $newArrayContents[$tmp1] != null);
	$ArrayContents := $ArrayContents[array := $newArrayContents];
}

const unique $BoolValueType: int;

const unique $IntValueType: int;

const unique $RealValueType: int;

procedure {:inline 1} $BoxFromBool(b: bool) returns (r: Ref);

implementation {:inline 1} $BoxFromBool(b: bool) returns (r: Ref)
{
    call r := Alloc();
    assume $TypeConstructor($DynamicType(r)) == $BoolValueType;
    assume Union2Bool(r) == b;
}

procedure {:inline 1} $BoxFromInt(i: int) returns (r: Ref);

implementation {:inline 1} $BoxFromInt(i: int) returns (r: Ref)
{
    call r := Alloc();
    assume $TypeConstructor($DynamicType(r)) == $IntValueType;
    assume Union2Int(r) == i;
}

procedure {:inline 1} $BoxFromReal(r: real) returns (rf: Ref);

implementation {:inline 1} $BoxFromReal(r: real) returns (rf: Ref)
{
    call rf := Alloc();
    assume $TypeConstructor($DynamicType(rf)) == $RealValueType;
    assume Union2Real(rf) == r;
}

procedure {:inline 1} $BoxFromUnion(u: Union) returns (r: Ref);

implementation {:inline 1} $BoxFromUnion(u: Union) returns (r: Ref)
{
    r := u;
}
function T$$$f__AnonymousType0`2(<reference>j__TPar : Ref,<identity>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType0`2 : int;
axiom(forall <reference>j__TPar : Ref,<identity>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType0`2(<reference>j__TPar,<identity>j__TPar), T$$$f__AnonymousType0`2(T$$reference$j__TPar(),T$$identity$j__TPar())) } $Subtype(T$$$f__AnonymousType0`2(<reference>j__TPar,<identity>j__TPar), T$$$f__AnonymousType0`2(T$$reference$j__TPar(),T$$identity$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType0`2(T$$reference$j__TPar(),T$$identity$j__TPar())) == T$$$f__AnonymousType0`2;
axiom(forall <reference>j__TPar : Ref,<identity>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType0`2(<reference>j__TPar,<identity>j__TPar), $T) } $Subtype(T$$$f__AnonymousType0`2(<reference>j__TPar,<identity>j__TPar), $T) <==> (T$$$f__AnonymousType0`2(<reference>j__TPar,<identity>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$reference$j__TPar() : Ref;
const unique T$$reference$j__TPar : int;
axiom $TypeConstructor(T$$reference$j__TPar()) == T$$reference$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$reference$j__TPar(), $T) } $Subtype(T$$reference$j__TPar(), $T) <==> (T$$reference$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$identity$j__TPar() : Ref;
const unique T$$identity$j__TPar : int;
axiom $TypeConstructor(T$$identity$j__TPar()) == T$$identity$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$identity$j__TPar(), $T) } $Subtype(T$$identity$j__TPar(), $T) <==> (T$$identity$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$System.Security.SuppressUnmanagedCodeSecurityAttribute() : Ref;
const unique T$System.Security.SuppressUnmanagedCodeSecurityAttribute : int;
axiom $TypeConstructor(T$System.Security.SuppressUnmanagedCodeSecurityAttribute()) == T$System.Security.SuppressUnmanagedCodeSecurityAttribute;
axiom(forall  $T: Ref:: {  $Subtype(T$System.Security.SuppressUnmanagedCodeSecurityAttribute(), $T) } $Subtype(T$System.Security.SuppressUnmanagedCodeSecurityAttribute(), $T) <==> (T$System.Security.SuppressUnmanagedCodeSecurityAttribute() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute() : Ref;
const unique T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute : int;
axiom $TypeConstructor(T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute()) == T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute;
axiom(forall  $T: Ref:: {  $Subtype(T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute(), $T) } $Subtype(T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute(), $T) <==> (T$System.Runtime.CompilerServices.InternalImplementationOnlyAttribute() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType7`2(<<>h__TransparentIdentifier0>j__TPar : Ref,<backtickIndex>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType7`2 : int;
axiom(forall <<>h__TransparentIdentifier0>j__TPar : Ref,<backtickIndex>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType7`2(<<>h__TransparentIdentifier0>j__TPar,<backtickIndex>j__TPar), T$$$f__AnonymousType7`2(T$$$$h__TransparentIdentifier0$j__TPar(),T$$backtickIndex$j__TPar())) } $Subtype(T$$$f__AnonymousType7`2(<<>h__TransparentIdentifier0>j__TPar,<backtickIndex>j__TPar), T$$$f__AnonymousType7`2(T$$$$h__TransparentIdentifier0$j__TPar(),T$$backtickIndex$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType7`2(T$$$$h__TransparentIdentifier0$j__TPar(),T$$backtickIndex$j__TPar())) == T$$$f__AnonymousType7`2;
axiom(forall <<>h__TransparentIdentifier0>j__TPar : Ref,<backtickIndex>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType7`2(<<>h__TransparentIdentifier0>j__TPar,<backtickIndex>j__TPar), $T) } $Subtype(T$$$f__AnonymousType7`2(<<>h__TransparentIdentifier0>j__TPar,<backtickIndex>j__TPar), $T) <==> (T$$$f__AnonymousType7`2(<<>h__TransparentIdentifier0>j__TPar,<backtickIndex>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$$h__TransparentIdentifier0$j__TPar() : Ref;
const unique T$$$$h__TransparentIdentifier0$j__TPar : int;
axiom $TypeConstructor(T$$$$h__TransparentIdentifier0$j__TPar()) == T$$$$h__TransparentIdentifier0$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$$$h__TransparentIdentifier0$j__TPar(), $T) } $Subtype(T$$$$h__TransparentIdentifier0$j__TPar(), $T) <==> (T$$$$h__TransparentIdentifier0$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$backtickIndex$j__TPar() : Ref;
const unique T$$backtickIndex$j__TPar : int;
axiom $TypeConstructor(T$$backtickIndex$j__TPar()) == T$$backtickIndex$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$backtickIndex$j__TPar(), $T) } $Subtype(T$$backtickIndex$j__TPar(), $T) <==> (T$$backtickIndex$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType6`2(<typeDef>j__TPar : Ref,<metadataName>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType6`2 : int;
axiom(forall <typeDef>j__TPar : Ref,<metadataName>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType6`2(<typeDef>j__TPar,<metadataName>j__TPar), T$$$f__AnonymousType6`2(T$$typeDef$j__TPar(),T$$metadataName$j__TPar())) } $Subtype(T$$$f__AnonymousType6`2(<typeDef>j__TPar,<metadataName>j__TPar), T$$$f__AnonymousType6`2(T$$typeDef$j__TPar(),T$$metadataName$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType6`2(T$$typeDef$j__TPar(),T$$metadataName$j__TPar())) == T$$$f__AnonymousType6`2;
axiom(forall <typeDef>j__TPar : Ref,<metadataName>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType6`2(<typeDef>j__TPar,<metadataName>j__TPar), $T) } $Subtype(T$$$f__AnonymousType6`2(<typeDef>j__TPar,<metadataName>j__TPar), $T) <==> (T$$$f__AnonymousType6`2(<typeDef>j__TPar,<metadataName>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$typeDef$j__TPar() : Ref;
const unique T$$typeDef$j__TPar : int;
axiom $TypeConstructor(T$$typeDef$j__TPar()) == T$$typeDef$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$typeDef$j__TPar(), $T) } $Subtype(T$$typeDef$j__TPar(), $T) <==> (T$$typeDef$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$metadataName$j__TPar() : Ref;
const unique T$$metadataName$j__TPar : int;
axiom $TypeConstructor(T$$metadataName$j__TPar()) == T$$metadataName$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$metadataName$j__TPar(), $T) } $Subtype(T$$metadataName$j__TPar(), $T) <==> (T$$metadataName$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$() : Ref;
const unique T$$PrivateImplementationDetails$ : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$()) == T$$PrivateImplementationDetails$;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$(), $T) } $Subtype(T$$PrivateImplementationDetails$(), $T) <==> (T$$PrivateImplementationDetails$() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$5() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$6() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$9() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$10() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$11() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$16() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$28() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$30() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$31() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$255() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$256() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$986() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$3093() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168() : Ref;
const unique T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168 : int;
axiom $TypeConstructor(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168()) == T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168;
axiom(forall  $T: Ref:: {  $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168(), $T) } $Subtype(T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168(), $T) <==> (T$$PrivateImplementationDetails$.__StaticArrayInitTypeSize$7168() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType5`2(<customAttrHandle>j__TPar : Ref,<attributeSupportedLanguages>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType5`2 : int;
axiom(forall <customAttrHandle>j__TPar : Ref,<attributeSupportedLanguages>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType5`2(<customAttrHandle>j__TPar,<attributeSupportedLanguages>j__TPar), T$$$f__AnonymousType5`2(T$$customAttrHandle$j__TPar(),T$$attributeSupportedLanguages$j__TPar())) } $Subtype(T$$$f__AnonymousType5`2(<customAttrHandle>j__TPar,<attributeSupportedLanguages>j__TPar), T$$$f__AnonymousType5`2(T$$customAttrHandle$j__TPar(),T$$attributeSupportedLanguages$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType5`2(T$$customAttrHandle$j__TPar(),T$$attributeSupportedLanguages$j__TPar())) == T$$$f__AnonymousType5`2;
axiom(forall <customAttrHandle>j__TPar : Ref,<attributeSupportedLanguages>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType5`2(<customAttrHandle>j__TPar,<attributeSupportedLanguages>j__TPar), $T) } $Subtype(T$$$f__AnonymousType5`2(<customAttrHandle>j__TPar,<attributeSupportedLanguages>j__TPar), $T) <==> (T$$$f__AnonymousType5`2(<customAttrHandle>j__TPar,<attributeSupportedLanguages>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$customAttrHandle$j__TPar() : Ref;
const unique T$$customAttrHandle$j__TPar : int;
axiom $TypeConstructor(T$$customAttrHandle$j__TPar()) == T$$customAttrHandle$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$customAttrHandle$j__TPar(), $T) } $Subtype(T$$customAttrHandle$j__TPar(), $T) <==> (T$$customAttrHandle$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$attributeSupportedLanguages$j__TPar() : Ref;
const unique T$$attributeSupportedLanguages$j__TPar : int;
axiom $TypeConstructor(T$$attributeSupportedLanguages$j__TPar()) == T$$attributeSupportedLanguages$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$attributeSupportedLanguages$j__TPar(), $T) } $Subtype(T$$attributeSupportedLanguages$j__TPar(), $T) <==> (T$$attributeSupportedLanguages$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType1`2(<module>j__TPar : Ref,<typeDefHandle>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType1`2 : int;
axiom(forall <module>j__TPar : Ref,<typeDefHandle>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType1`2(<module>j__TPar,<typeDefHandle>j__TPar), T$$$f__AnonymousType1`2(T$$module$j__TPar(),T$$typeDefHandle$j__TPar())) } $Subtype(T$$$f__AnonymousType1`2(<module>j__TPar,<typeDefHandle>j__TPar), T$$$f__AnonymousType1`2(T$$module$j__TPar(),T$$typeDefHandle$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType1`2(T$$module$j__TPar(),T$$typeDefHandle$j__TPar())) == T$$$f__AnonymousType1`2;
axiom(forall <module>j__TPar : Ref,<typeDefHandle>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType1`2(<module>j__TPar,<typeDefHandle>j__TPar), $T) } $Subtype(T$$$f__AnonymousType1`2(<module>j__TPar,<typeDefHandle>j__TPar), $T) <==> (T$$$f__AnonymousType1`2(<module>j__TPar,<typeDefHandle>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$module$j__TPar() : Ref;
const unique T$$module$j__TPar : int;
axiom $TypeConstructor(T$$module$j__TPar()) == T$$module$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$module$j__TPar(), $T) } $Subtype(T$$module$j__TPar(), $T) <==> (T$$module$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$typeDefHandle$j__TPar() : Ref;
const unique T$$typeDefHandle$j__TPar : int;
axiom $TypeConstructor(T$$typeDefHandle$j__TPar()) == T$$typeDefHandle$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$typeDefHandle$j__TPar(), $T) } $Subtype(T$$typeDefHandle$j__TPar(), $T) <==> (T$$typeDefHandle$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType4`2(<<>h__TransparentIdentifier2>j__TPar : Ref,<supportedLanguage>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType4`2 : int;
axiom(forall <<>h__TransparentIdentifier2>j__TPar : Ref,<supportedLanguage>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType4`2(<<>h__TransparentIdentifier2>j__TPar,<supportedLanguage>j__TPar), T$$$f__AnonymousType4`2(T$$$$h__TransparentIdentifier2$j__TPar(),T$$supportedLanguage$j__TPar())) } $Subtype(T$$$f__AnonymousType4`2(<<>h__TransparentIdentifier2>j__TPar,<supportedLanguage>j__TPar), T$$$f__AnonymousType4`2(T$$$$h__TransparentIdentifier2$j__TPar(),T$$supportedLanguage$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType4`2(T$$$$h__TransparentIdentifier2$j__TPar(),T$$supportedLanguage$j__TPar())) == T$$$f__AnonymousType4`2;
axiom(forall <<>h__TransparentIdentifier2>j__TPar : Ref,<supportedLanguage>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType4`2(<<>h__TransparentIdentifier2>j__TPar,<supportedLanguage>j__TPar), $T) } $Subtype(T$$$f__AnonymousType4`2(<<>h__TransparentIdentifier2>j__TPar,<supportedLanguage>j__TPar), $T) <==> (T$$$f__AnonymousType4`2(<<>h__TransparentIdentifier2>j__TPar,<supportedLanguage>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$$h__TransparentIdentifier2$j__TPar() : Ref;
const unique T$$$$h__TransparentIdentifier2$j__TPar : int;
axiom $TypeConstructor(T$$$$h__TransparentIdentifier2$j__TPar()) == T$$$$h__TransparentIdentifier2$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$$$h__TransparentIdentifier2$j__TPar(), $T) } $Subtype(T$$$$h__TransparentIdentifier2$j__TPar(), $T) <==> (T$$$$h__TransparentIdentifier2$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$supportedLanguage$j__TPar() : Ref;
const unique T$$supportedLanguage$j__TPar : int;
axiom $TypeConstructor(T$$supportedLanguage$j__TPar()) == T$$supportedLanguage$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$supportedLanguage$j__TPar(), $T) } $Subtype(T$$supportedLanguage$j__TPar(), $T) <==> (T$$supportedLanguage$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType3`2(<<>h__TransparentIdentifier1>j__TPar : Ref,<typeName>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType3`2 : int;
axiom(forall <<>h__TransparentIdentifier1>j__TPar : Ref,<typeName>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType3`2(<<>h__TransparentIdentifier1>j__TPar,<typeName>j__TPar), T$$$f__AnonymousType3`2(T$$$$h__TransparentIdentifier1$j__TPar(),T$$typeName$j__TPar())) } $Subtype(T$$$f__AnonymousType3`2(<<>h__TransparentIdentifier1>j__TPar,<typeName>j__TPar), T$$$f__AnonymousType3`2(T$$$$h__TransparentIdentifier1$j__TPar(),T$$typeName$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType3`2(T$$$$h__TransparentIdentifier1$j__TPar(),T$$typeName$j__TPar())) == T$$$f__AnonymousType3`2;
axiom(forall <<>h__TransparentIdentifier1>j__TPar : Ref,<typeName>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType3`2(<<>h__TransparentIdentifier1>j__TPar,<typeName>j__TPar), $T) } $Subtype(T$$$f__AnonymousType3`2(<<>h__TransparentIdentifier1>j__TPar,<typeName>j__TPar), $T) <==> (T$$$f__AnonymousType3`2(<<>h__TransparentIdentifier1>j__TPar,<typeName>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$$h__TransparentIdentifier1$j__TPar() : Ref;
const unique T$$$$h__TransparentIdentifier1$j__TPar : int;
axiom $TypeConstructor(T$$$$h__TransparentIdentifier1$j__TPar()) == T$$$$h__TransparentIdentifier1$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$$$h__TransparentIdentifier1$j__TPar(), $T) } $Subtype(T$$$$h__TransparentIdentifier1$j__TPar(), $T) <==> (T$$$$h__TransparentIdentifier1$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$typeName$j__TPar() : Ref;
const unique T$$typeName$j__TPar : int;
axiom $TypeConstructor(T$$typeName$j__TPar()) == T$$typeName$j__TPar;
axiom(forall  $T: Ref:: {  $Subtype(T$$typeName$j__TPar(), $T) } $Subtype(T$$typeName$j__TPar(), $T) <==> (T$$typeName$j__TPar() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.InstructionOperandTypes() : Ref;
const unique T$Microsoft.Cci.InstructionOperandTypes : int;
axiom $TypeConstructor(T$Microsoft.Cci.InstructionOperandTypes()) == T$Microsoft.Cci.InstructionOperandTypes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.InstructionOperandTypes(), $T) } $Subtype(T$Microsoft.Cci.InstructionOperandTypes(), $T) <==> (T$Microsoft.Cci.InstructionOperandTypes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.INamespaceTypeDefinition() : Ref;
const unique T$Microsoft.Cci.INamespaceTypeDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.INamespaceTypeDefinition()) == T$Microsoft.Cci.INamespaceTypeDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INamespaceTypeDefinition(), $T) } $Subtype(T$Microsoft.Cci.INamespaceTypeDefinition(), $T) <==> (T$Microsoft.Cci.INamespaceTypeDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T)));


function T$Microsoft.Cci.SequencePoint() : Ref;
const unique T$Microsoft.Cci.SequencePoint : int;
axiom $TypeConstructor(T$Microsoft.Cci.SequencePoint()) == T$Microsoft.Cci.SequencePoint;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.SequencePoint(), $T) } $Subtype(T$Microsoft.Cci.SequencePoint(), $T) <==> (T$Microsoft.Cci.SequencePoint() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGenericTypeParameter() : Ref;
const unique T$Microsoft.Cci.IGenericTypeParameter : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericTypeParameter()) == T$Microsoft.Cci.IGenericTypeParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericTypeParameter(), $T) } $Subtype(T$Microsoft.Cci.IGenericTypeParameter(), $T) <==> (T$Microsoft.Cci.IGenericTypeParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameter(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)|| $Subtype(T$Microsoft.Cci.IGenericTypeParameterReference(), $T)));


function T$Microsoft.Cci.SecurityAttribute() : Ref;
const unique T$Microsoft.Cci.SecurityAttribute : int;
axiom $TypeConstructor(T$Microsoft.Cci.SecurityAttribute()) == T$Microsoft.Cci.SecurityAttribute;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.SecurityAttribute(), $T) } $Subtype(T$Microsoft.Cci.SecurityAttribute(), $T) <==> (T$Microsoft.Cci.SecurityAttribute() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.INamedEntity() : Ref;
const unique T$Microsoft.Cci.INamedEntity : int;
axiom $TypeConstructor(T$Microsoft.Cci.INamedEntity()) == T$Microsoft.Cci.INamedEntity;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INamedEntity(), $T) } $Subtype(T$Microsoft.Cci.INamedEntity(), $T) <==> (T$Microsoft.Cci.INamedEntity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ExceptionHandlerRegion() : Ref;
const unique T$Microsoft.Cci.ExceptionHandlerRegion : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExceptionHandlerRegion()) == T$Microsoft.Cci.ExceptionHandlerRegion;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExceptionHandlerRegion(), $T) } $Subtype(T$Microsoft.Cci.ExceptionHandlerRegion(), $T) <==> (T$Microsoft.Cci.ExceptionHandlerRegion() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ICustomModifier() : Ref;
const unique T$Microsoft.Cci.ICustomModifier : int;
axiom $TypeConstructor(T$Microsoft.Cci.ICustomModifier()) == T$Microsoft.Cci.ICustomModifier;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ICustomModifier(), $T) } $Subtype(T$Microsoft.Cci.ICustomModifier(), $T) <==> (T$Microsoft.Cci.ICustomModifier() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.AssemblyReferenceAlias() : Ref;
const unique T$Microsoft.Cci.AssemblyReferenceAlias : int;
axiom $TypeConstructor(T$Microsoft.Cci.AssemblyReferenceAlias()) == T$Microsoft.Cci.AssemblyReferenceAlias;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.AssemblyReferenceAlias(), $T) } $Subtype(T$Microsoft.Cci.AssemblyReferenceAlias(), $T) <==> (T$Microsoft.Cci.AssemblyReferenceAlias() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IAssemblyReference() : Ref;
const unique T$Microsoft.Cci.IAssemblyReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IAssemblyReference()) == T$Microsoft.Cci.IAssemblyReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IAssemblyReference(), $T) } $Subtype(T$Microsoft.Cci.IAssemblyReference(), $T) <==> (T$Microsoft.Cci.IAssemblyReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IModuleReference(), $T)|| $Subtype(T$Microsoft.Cci.IUnitReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.ExportedType() : Ref;
const unique T$Microsoft.Cci.ExportedType : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExportedType()) == T$Microsoft.Cci.ExportedType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExportedType(), $T) } $Subtype(T$Microsoft.Cci.ExportedType(), $T) <==> (T$Microsoft.Cci.ExportedType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ISpecializedPropertyDefinition() : Ref;
const unique T$Microsoft.Cci.ISpecializedPropertyDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISpecializedPropertyDefinition()) == T$Microsoft.Cci.ISpecializedPropertyDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISpecializedPropertyDefinition(), $T) } $Subtype(T$Microsoft.Cci.ISpecializedPropertyDefinition(), $T) <==> (T$Microsoft.Cci.ISpecializedPropertyDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IPropertyDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.Cci.IFileReference() : Ref;
const unique T$Microsoft.Cci.IFileReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IFileReference()) == T$Microsoft.Cci.IFileReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IFileReference(), $T) } $Subtype(T$Microsoft.Cci.IFileReference(), $T) <==> (T$Microsoft.Cci.IFileReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PeWriter() : Ref;
const unique T$Microsoft.Cci.PeWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.PeWriter()) == T$Microsoft.Cci.PeWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PeWriter(), $T) } $Subtype(T$Microsoft.Cci.PeWriter(), $T) <==> (T$Microsoft.Cci.PeWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj() : Ref;
const unique T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj : int;
axiom $TypeConstructor(T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj()) == T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj(), $T) } $Subtype(T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj(), $T) <==> (T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromObj() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources() : Ref;
const unique T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources : int;
axiom $TypeConstructor(T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources()) == T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources(), $T) } $Subtype(T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources(), $T) <==> (T$Microsoft.Cci.PeWriter.ResourceSectionBuilderFromResources() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PeWriter.$$c() : Ref;
const unique T$Microsoft.Cci.PeWriter.$$c : int;
axiom $TypeConstructor(T$Microsoft.Cci.PeWriter.$$c()) == T$Microsoft.Cci.PeWriter.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PeWriter.$$c(), $T) } $Subtype(T$Microsoft.Cci.PeWriter.$$c(), $T) <==> (T$Microsoft.Cci.PeWriter.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter() : Ref;
const unique T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter()) == T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter(), $T) } $Subtype(T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter(), $T) <==> (T$Microsoft.Cci.ISymUnmanagedAsyncMethodPropertiesWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGenericMethodParameter() : Ref;
const unique T$Microsoft.Cci.IGenericMethodParameter : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericMethodParameter()) == T$Microsoft.Cci.IGenericMethodParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericMethodParameter(), $T) } $Subtype(T$Microsoft.Cci.IGenericMethodParameter(), $T) <==> (T$Microsoft.Cci.IGenericMethodParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameter(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)|| $Subtype(T$Microsoft.Cci.IGenericMethodParameterReference(), $T)));


function T$Microsoft.Cci.ResourceSection() : Ref;
const unique T$Microsoft.Cci.ResourceSection : int;
axiom $TypeConstructor(T$Microsoft.Cci.ResourceSection()) == T$Microsoft.Cci.ResourceSection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ResourceSection(), $T) } $Subtype(T$Microsoft.Cci.ResourceSection(), $T) <==> (T$Microsoft.Cci.ResourceSection() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PooledBlobBuilder() : Ref;
const unique T$Microsoft.Cci.PooledBlobBuilder : int;
axiom $TypeConstructor(T$Microsoft.Cci.PooledBlobBuilder()) == T$Microsoft.Cci.PooledBlobBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PooledBlobBuilder(), $T) } $Subtype(T$Microsoft.Cci.PooledBlobBuilder(), $T) <==> (T$Microsoft.Cci.PooledBlobBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PooledBlobBuilder.$$c() : Ref;
const unique T$Microsoft.Cci.PooledBlobBuilder.$$c : int;
axiom $TypeConstructor(T$Microsoft.Cci.PooledBlobBuilder.$$c()) == T$Microsoft.Cci.PooledBlobBuilder.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PooledBlobBuilder.$$c(), $T) } $Subtype(T$Microsoft.Cci.PooledBlobBuilder.$$c(), $T) <==> (T$Microsoft.Cci.PooledBlobBuilder.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.TypeSpecComparer() : Ref;
const unique T$Microsoft.Cci.TypeSpecComparer : int;
axiom $TypeConstructor(T$Microsoft.Cci.TypeSpecComparer()) == T$Microsoft.Cci.TypeSpecComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.TypeSpecComparer(), $T) } $Subtype(T$Microsoft.Cci.TypeSpecComparer(), $T) <==> (T$Microsoft.Cci.TypeSpecComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.UsedNamespaceOrType() : Ref;
const unique T$Microsoft.Cci.UsedNamespaceOrType : int;
axiom $TypeConstructor(T$Microsoft.Cci.UsedNamespaceOrType()) == T$Microsoft.Cci.UsedNamespaceOrType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.UsedNamespaceOrType(), $T) } $Subtype(T$Microsoft.Cci.UsedNamespaceOrType(), $T) <==> (T$Microsoft.Cci.UsedNamespaceOrType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IPdbWriter() : Ref;
const unique T$Microsoft.Cci.IPdbWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.IPdbWriter()) == T$Microsoft.Cci.IPdbWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IPdbWriter(), $T) } $Subtype(T$Microsoft.Cci.IPdbWriter(), $T) <==> (T$Microsoft.Cci.IPdbWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IMetadataNamedArgument() : Ref;
const unique T$Microsoft.Cci.IMetadataNamedArgument : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMetadataNamedArgument()) == T$Microsoft.Cci.IMetadataNamedArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMetadataNamedArgument(), $T) } $Subtype(T$Microsoft.Cci.IMetadataNamedArgument(), $T) <==> (T$Microsoft.Cci.IMetadataNamedArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T)));


function T$Microsoft.Cci.PrimitiveTypeCode() : Ref;
const unique T$Microsoft.Cci.PrimitiveTypeCode : int;
axiom $TypeConstructor(T$Microsoft.Cci.PrimitiveTypeCode()) == T$Microsoft.Cci.PrimitiveTypeCode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PrimitiveTypeCode(), $T) } $Subtype(T$Microsoft.Cci.PrimitiveTypeCode(), $T) <==> (T$Microsoft.Cci.PrimitiveTypeCode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IteratorHelper() : Ref;
const unique T$Microsoft.Cci.IteratorHelper : int;
axiom $TypeConstructor(T$Microsoft.Cci.IteratorHelper()) == T$Microsoft.Cci.IteratorHelper;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IteratorHelper(), $T) } $Subtype(T$Microsoft.Cci.IteratorHelper(), $T) <==> (T$Microsoft.Cci.IteratorHelper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$T() : Ref;
const unique T$T : int;
axiom $TypeConstructor(T$T()) == T$T;
axiom(forall  $T: Ref:: {  $Subtype(T$T(), $T) } $Subtype(T$T(), $T) <==> (T$T() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.Cci.ExceptionHandlerRegionFault() : Ref;
const unique T$Microsoft.Cci.ExceptionHandlerRegionFault : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExceptionHandlerRegionFault()) == T$Microsoft.Cci.ExceptionHandlerRegionFault;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionFault(), $T) } $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionFault(), $T) <==> (T$Microsoft.Cci.ExceptionHandlerRegionFault() == $T || $Subtype(T$Microsoft.Cci.ExceptionHandlerRegion(), $T)));


function T$Microsoft.Cci.Extensions() : Ref;
const unique T$Microsoft.Cci.Extensions : int;
axiom $TypeConstructor(T$Microsoft.Cci.Extensions()) == T$Microsoft.Cci.Extensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.Extensions(), $T) } $Subtype(T$Microsoft.Cci.Extensions(), $T) <==> (T$Microsoft.Cci.Extensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PdbWritingException() : Ref;
const unique T$Microsoft.Cci.PdbWritingException : int;
axiom $TypeConstructor(T$Microsoft.Cci.PdbWritingException()) == T$Microsoft.Cci.PdbWritingException;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PdbWritingException(), $T) } $Subtype(T$Microsoft.Cci.PdbWritingException(), $T) <==> (T$Microsoft.Cci.PdbWritingException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.FullMetadataWriter() : Ref;
const unique T$Microsoft.Cci.FullMetadataWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.FullMetadataWriter()) == T$Microsoft.Cci.FullMetadataWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.FullMetadataWriter(), $T) } $Subtype(T$Microsoft.Cci.FullMetadataWriter(), $T) <==> (T$Microsoft.Cci.FullMetadataWriter() == $T || $Subtype(T$Microsoft.Cci.MetadataWriter(), $T)));


function T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer() : Ref;
const unique T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer : int;
axiom $TypeConstructor(T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer()) == T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer(), $T) } $Subtype(T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer(), $T) <==> (T$Microsoft.Cci.FullMetadataWriter.FullReferenceIndexer() == $T || $Subtype(T$Microsoft.Cci.ReferenceIndexer(), $T)));


function T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T : Ref) : Ref;
const unique T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T), T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T$T())) } $Subtype(T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T), T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T$T())) == T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T), $T) } $Subtype(T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T), $T) <==> (T$Microsoft.Cci.FullMetadataWriter.DefinitionIndex`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.Cci.IParameterTypeInformation() : Ref;
const unique T$Microsoft.Cci.IParameterTypeInformation : int;
axiom $TypeConstructor(T$Microsoft.Cci.IParameterTypeInformation()) == T$Microsoft.Cci.IParameterTypeInformation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IParameterTypeInformation(), $T) } $Subtype(T$Microsoft.Cci.IParameterTypeInformation(), $T) <==> (T$Microsoft.Cci.IParameterTypeInformation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.ISpecializedMethodReference() : Ref;
const unique T$Microsoft.Cci.ISpecializedMethodReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISpecializedMethodReference()) == T$Microsoft.Cci.ISpecializedMethodReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISpecializedMethodReference(), $T) } $Subtype(T$Microsoft.Cci.ISpecializedMethodReference(), $T) <==> (T$Microsoft.Cci.ISpecializedMethodReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IUnitReference() : Ref;
const unique T$Microsoft.Cci.IUnitReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IUnitReference()) == T$Microsoft.Cci.IUnitReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IUnitReference(), $T) } $Subtype(T$Microsoft.Cci.IUnitReference(), $T) <==> (T$Microsoft.Cci.IUnitReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.ISignature() : Ref;
const unique T$Microsoft.Cci.ISignature : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISignature()) == T$Microsoft.Cci.ISignature;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISignature(), $T) } $Subtype(T$Microsoft.Cci.ISignature(), $T) <==> (T$Microsoft.Cci.ISignature() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IMetadataExpression() : Ref;
const unique T$Microsoft.Cci.IMetadataExpression : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMetadataExpression()) == T$Microsoft.Cci.IMetadataExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T) } $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T) <==> (T$Microsoft.Cci.IMetadataExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGenericMethodParameterReference() : Ref;
const unique T$Microsoft.Cci.IGenericMethodParameterReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericMethodParameterReference()) == T$Microsoft.Cci.IGenericMethodParameterReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericMethodParameterReference(), $T) } $Subtype(T$Microsoft.Cci.IGenericMethodParameterReference(), $T) <==> (T$Microsoft.Cci.IGenericMethodParameterReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.VarEnum() : Ref;
const unique T$Microsoft.Cci.VarEnum : int;
axiom $TypeConstructor(T$Microsoft.Cci.VarEnum()) == T$Microsoft.Cci.VarEnum;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.VarEnum(), $T) } $Subtype(T$Microsoft.Cci.VarEnum(), $T) <==> (T$Microsoft.Cci.VarEnum() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ExceptionHandlerRegionFinally() : Ref;
const unique T$Microsoft.Cci.ExceptionHandlerRegionFinally : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExceptionHandlerRegionFinally()) == T$Microsoft.Cci.ExceptionHandlerRegionFinally;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionFinally(), $T) } $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionFinally(), $T) <==> (T$Microsoft.Cci.ExceptionHandlerRegionFinally() == $T || $Subtype(T$Microsoft.Cci.ExceptionHandlerRegion(), $T)));


function T$Microsoft.Cci.PlatformType() : Ref;
const unique T$Microsoft.Cci.PlatformType : int;
axiom $TypeConstructor(T$Microsoft.Cci.PlatformType()) == T$Microsoft.Cci.PlatformType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PlatformType(), $T) } $Subtype(T$Microsoft.Cci.PlatformType(), $T) <==> (T$Microsoft.Cci.PlatformType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IArrayTypeReference() : Ref;
const unique T$Microsoft.Cci.IArrayTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IArrayTypeReference()) == T$Microsoft.Cci.IArrayTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IArrayTypeReference(), $T) } $Subtype(T$Microsoft.Cci.IArrayTypeReference(), $T) <==> (T$Microsoft.Cci.IArrayTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.TypeReferenceWithAttributes() : Ref;
const unique T$Microsoft.Cci.TypeReferenceWithAttributes : int;
axiom $TypeConstructor(T$Microsoft.Cci.TypeReferenceWithAttributes()) == T$Microsoft.Cci.TypeReferenceWithAttributes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.TypeReferenceWithAttributes(), $T) } $Subtype(T$Microsoft.Cci.TypeReferenceWithAttributes(), $T) <==> (T$Microsoft.Cci.TypeReferenceWithAttributes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.MethodImplementation() : Ref;
const unique T$Microsoft.Cci.MethodImplementation : int;
axiom $TypeConstructor(T$Microsoft.Cci.MethodImplementation()) == T$Microsoft.Cci.MethodImplementation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MethodImplementation(), $T) } $Subtype(T$Microsoft.Cci.MethodImplementation(), $T) <==> (T$Microsoft.Cci.MethodImplementation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ISymUnmanagedWriter5() : Ref;
const unique T$Microsoft.Cci.ISymUnmanagedWriter5 : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISymUnmanagedWriter5()) == T$Microsoft.Cci.ISymUnmanagedWriter5;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISymUnmanagedWriter5(), $T) } $Subtype(T$Microsoft.Cci.ISymUnmanagedWriter5(), $T) <==> (T$Microsoft.Cci.ISymUnmanagedWriter5() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IMethodDefinition() : Ref;
const unique T$Microsoft.Cci.IMethodDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMethodDefinition()) == T$Microsoft.Cci.IMethodDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMethodDefinition(), $T) } $Subtype(T$Microsoft.Cci.IMethodDefinition(), $T) <==> (T$Microsoft.Cci.IMethodDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)));


function T$Microsoft.Cci.TypeNameSerializer() : Ref;
const unique T$Microsoft.Cci.TypeNameSerializer : int;
axiom $TypeConstructor(T$Microsoft.Cci.TypeNameSerializer()) == T$Microsoft.Cci.TypeNameSerializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.TypeNameSerializer(), $T) } $Subtype(T$Microsoft.Cci.TypeNameSerializer(), $T) <==> (T$Microsoft.Cci.TypeNameSerializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGlobalFieldDefinition() : Ref;
const unique T$Microsoft.Cci.IGlobalFieldDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGlobalFieldDefinition()) == T$Microsoft.Cci.IGlobalFieldDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGlobalFieldDefinition(), $T) } $Subtype(T$Microsoft.Cci.IGlobalFieldDefinition(), $T) <==> (T$Microsoft.Cci.IGlobalFieldDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IFieldDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IFieldReference(), $T)));


function T$Microsoft.Cci.MetadataVisitor() : Ref;
const unique T$Microsoft.Cci.MetadataVisitor : int;
axiom $TypeConstructor(T$Microsoft.Cci.MetadataVisitor()) == T$Microsoft.Cci.MetadataVisitor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataVisitor(), $T) } $Subtype(T$Microsoft.Cci.MetadataVisitor(), $T) <==> (T$Microsoft.Cci.MetadataVisitor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IMetaDataEmit() : Ref;
const unique T$Microsoft.Cci.IMetaDataEmit : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMetaDataEmit()) == T$Microsoft.Cci.IMetaDataEmit;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMetaDataEmit(), $T) } $Subtype(T$Microsoft.Cci.IMetaDataEmit(), $T) <==> (T$Microsoft.Cci.IMetaDataEmit() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ExceptionHandlerRegionFilter() : Ref;
const unique T$Microsoft.Cci.ExceptionHandlerRegionFilter : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExceptionHandlerRegionFilter()) == T$Microsoft.Cci.ExceptionHandlerRegionFilter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionFilter(), $T) } $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionFilter(), $T) <==> (T$Microsoft.Cci.ExceptionHandlerRegionFilter() == $T || $Subtype(T$Microsoft.Cci.ExceptionHandlerRegion(), $T)));


function T$Microsoft.Cci.INestedTypeReference() : Ref;
const unique T$Microsoft.Cci.INestedTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.INestedTypeReference()) == T$Microsoft.Cci.INestedTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INestedTypeReference(), $T) } $Subtype(T$Microsoft.Cci.INestedTypeReference(), $T) <==> (T$Microsoft.Cci.INestedTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)));


function T$Microsoft.Cci.IPointerTypeReference() : Ref;
const unique T$Microsoft.Cci.IPointerTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IPointerTypeReference()) == T$Microsoft.Cci.IPointerTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IPointerTypeReference(), $T) } $Subtype(T$Microsoft.Cci.IPointerTypeReference(), $T) <==> (T$Microsoft.Cci.IPointerTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.PdbLogger() : Ref;
const unique T$Microsoft.Cci.PdbLogger : int;
axiom $TypeConstructor(T$Microsoft.Cci.PdbLogger()) == T$Microsoft.Cci.PdbLogger;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PdbLogger(), $T) } $Subtype(T$Microsoft.Cci.PdbLogger(), $T) <==> (T$Microsoft.Cci.PdbLogger() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PdbLogger.PdbWriterOperation() : Ref;
const unique T$Microsoft.Cci.PdbLogger.PdbWriterOperation : int;
axiom $TypeConstructor(T$Microsoft.Cci.PdbLogger.PdbWriterOperation()) == T$Microsoft.Cci.PdbLogger.PdbWriterOperation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PdbLogger.PdbWriterOperation(), $T) } $Subtype(T$Microsoft.Cci.PdbLogger.PdbWriterOperation(), $T) <==> (T$Microsoft.Cci.PdbLogger.PdbWriterOperation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.NativeResourceWriter() : Ref;
const unique T$Microsoft.Cci.NativeResourceWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.NativeResourceWriter()) == T$Microsoft.Cci.NativeResourceWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.NativeResourceWriter(), $T) } $Subtype(T$Microsoft.Cci.NativeResourceWriter(), $T) <==> (T$Microsoft.Cci.NativeResourceWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.NativeResourceWriter.Directory() : Ref;
const unique T$Microsoft.Cci.NativeResourceWriter.Directory : int;
axiom $TypeConstructor(T$Microsoft.Cci.NativeResourceWriter.Directory()) == T$Microsoft.Cci.NativeResourceWriter.Directory;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.NativeResourceWriter.Directory(), $T) } $Subtype(T$Microsoft.Cci.NativeResourceWriter.Directory(), $T) <==> (T$Microsoft.Cci.NativeResourceWriter.Directory() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IFieldDefinition() : Ref;
const unique T$Microsoft.Cci.IFieldDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IFieldDefinition()) == T$Microsoft.Cci.IFieldDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IFieldDefinition(), $T) } $Subtype(T$Microsoft.Cci.IFieldDefinition(), $T) <==> (T$Microsoft.Cci.IFieldDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IFieldReference(), $T)));


function T$Microsoft.Cci.IGenericTypeInstanceReference() : Ref;
const unique T$Microsoft.Cci.IGenericTypeInstanceReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericTypeInstanceReference()) == T$Microsoft.Cci.IGenericTypeInstanceReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericTypeInstanceReference(), $T) } $Subtype(T$Microsoft.Cci.IGenericTypeInstanceReference(), $T) <==> (T$Microsoft.Cci.IGenericTypeInstanceReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.ImageDebugDirectory() : Ref;
const unique T$Microsoft.Cci.ImageDebugDirectory : int;
axiom $TypeConstructor(T$Microsoft.Cci.ImageDebugDirectory()) == T$Microsoft.Cci.ImageDebugDirectory;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ImageDebugDirectory(), $T) } $Subtype(T$Microsoft.Cci.ImageDebugDirectory(), $T) <==> (T$Microsoft.Cci.ImageDebugDirectory() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.INamedTypeReference() : Ref;
const unique T$Microsoft.Cci.INamedTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.INamedTypeReference()) == T$Microsoft.Cci.INamedTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T) } $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T) <==> (T$Microsoft.Cci.INamedTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.ITypeMemberReference() : Ref;
const unique T$Microsoft.Cci.ITypeMemberReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.ITypeMemberReference()) == T$Microsoft.Cci.ITypeMemberReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T) } $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T) <==> (T$Microsoft.Cci.ITypeMemberReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IMarshallingInformation() : Ref;
const unique T$Microsoft.Cci.IMarshallingInformation : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMarshallingInformation()) == T$Microsoft.Cci.IMarshallingInformation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMarshallingInformation(), $T) } $Subtype(T$Microsoft.Cci.IMarshallingInformation(), $T) <==> (T$Microsoft.Cci.IMarshallingInformation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.DebugSourceDocument() : Ref;
const unique T$Microsoft.Cci.DebugSourceDocument : int;
axiom $TypeConstructor(T$Microsoft.Cci.DebugSourceDocument()) == T$Microsoft.Cci.DebugSourceDocument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DebugSourceDocument(), $T) } $Subtype(T$Microsoft.Cci.DebugSourceDocument(), $T) <==> (T$Microsoft.Cci.DebugSourceDocument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ITypeReference() : Ref;
const unique T$Microsoft.Cci.ITypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.ITypeReference()) == T$Microsoft.Cci.ITypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ITypeReference(), $T) } $Subtype(T$Microsoft.Cci.ITypeReference(), $T) <==> (T$Microsoft.Cci.ITypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.IMethodBody() : Ref;
const unique T$Microsoft.Cci.IMethodBody : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMethodBody()) == T$Microsoft.Cci.IMethodBody;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMethodBody(), $T) } $Subtype(T$Microsoft.Cci.IMethodBody(), $T) <==> (T$Microsoft.Cci.IMethodBody() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ReturnValueParameter() : Ref;
const unique T$Microsoft.Cci.ReturnValueParameter : int;
axiom $TypeConstructor(T$Microsoft.Cci.ReturnValueParameter()) == T$Microsoft.Cci.ReturnValueParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ReturnValueParameter(), $T) } $Subtype(T$Microsoft.Cci.ReturnValueParameter(), $T) <==> (T$Microsoft.Cci.ReturnValueParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IParameterDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterTypeInformation(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.IFieldReference() : Ref;
const unique T$Microsoft.Cci.IFieldReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IFieldReference()) == T$Microsoft.Cci.IFieldReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IFieldReference(), $T) } $Subtype(T$Microsoft.Cci.IFieldReference(), $T) <==> (T$Microsoft.Cci.IFieldReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.RootModuleType() : Ref;
const unique T$Microsoft.Cci.RootModuleType : int;
axiom $TypeConstructor(T$Microsoft.Cci.RootModuleType()) == T$Microsoft.Cci.RootModuleType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.RootModuleType(), $T) } $Subtype(T$Microsoft.Cci.RootModuleType(), $T) <==> (T$Microsoft.Cci.RootModuleType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T)));


function T$Microsoft.Cci.IPlatformInvokeInformation() : Ref;
const unique T$Microsoft.Cci.IPlatformInvokeInformation : int;
axiom $TypeConstructor(T$Microsoft.Cci.IPlatformInvokeInformation()) == T$Microsoft.Cci.IPlatformInvokeInformation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IPlatformInvokeInformation(), $T) } $Subtype(T$Microsoft.Cci.IPlatformInvokeInformation(), $T) <==> (T$Microsoft.Cci.IPlatformInvokeInformation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGenericTypeParameterReference() : Ref;
const unique T$Microsoft.Cci.IGenericTypeParameterReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericTypeParameterReference()) == T$Microsoft.Cci.IGenericTypeParameterReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericTypeParameterReference(), $T) } $Subtype(T$Microsoft.Cci.IGenericTypeParameterReference(), $T) <==> (T$Microsoft.Cci.IGenericTypeParameterReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.VariantStructure() : Ref;
const unique T$Microsoft.Cci.VariantStructure : int;
axiom $TypeConstructor(T$Microsoft.Cci.VariantStructure()) == T$Microsoft.Cci.VariantStructure;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.VariantStructure(), $T) } $Subtype(T$Microsoft.Cci.VariantStructure(), $T) <==> (T$Microsoft.Cci.VariantStructure() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.INamespaceTypeReference() : Ref;
const unique T$Microsoft.Cci.INamespaceTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.INamespaceTypeReference()) == T$Microsoft.Cci.INamespaceTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T) } $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T) <==> (T$Microsoft.Cci.INamespaceTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.InheritedTypeParameter() : Ref;
const unique T$Microsoft.Cci.InheritedTypeParameter : int;
axiom $TypeConstructor(T$Microsoft.Cci.InheritedTypeParameter()) == T$Microsoft.Cci.InheritedTypeParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.InheritedTypeParameter(), $T) } $Subtype(T$Microsoft.Cci.InheritedTypeParameter(), $T) <==> (T$Microsoft.Cci.InheritedTypeParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericTypeParameter(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameter(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)|| $Subtype(T$Microsoft.Cci.IGenericTypeParameterReference(), $T)));


function T$Microsoft.Cci.MethodSpecComparer() : Ref;
const unique T$Microsoft.Cci.MethodSpecComparer : int;
axiom $TypeConstructor(T$Microsoft.Cci.MethodSpecComparer()) == T$Microsoft.Cci.MethodSpecComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MethodSpecComparer(), $T) } $Subtype(T$Microsoft.Cci.MethodSpecComparer(), $T) <==> (T$Microsoft.Cci.MethodSpecComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ModulePropertiesForSerialization() : Ref;
const unique T$Microsoft.Cci.ModulePropertiesForSerialization : int;
axiom $TypeConstructor(T$Microsoft.Cci.ModulePropertiesForSerialization()) == T$Microsoft.Cci.ModulePropertiesForSerialization;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ModulePropertiesForSerialization(), $T) } $Subtype(T$Microsoft.Cci.ModulePropertiesForSerialization(), $T) <==> (T$Microsoft.Cci.ModulePropertiesForSerialization() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.TypeParameterVariance() : Ref;
const unique T$Microsoft.Cci.TypeParameterVariance : int;
axiom $TypeConstructor(T$Microsoft.Cci.TypeParameterVariance()) == T$Microsoft.Cci.TypeParameterVariance;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.TypeParameterVariance(), $T) } $Subtype(T$Microsoft.Cci.TypeParameterVariance(), $T) <==> (T$Microsoft.Cci.TypeParameterVariance() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.CallingConvention() : Ref;
const unique T$Microsoft.Cci.CallingConvention : int;
axiom $TypeConstructor(T$Microsoft.Cci.CallingConvention()) == T$Microsoft.Cci.CallingConvention;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.CallingConvention(), $T) } $Subtype(T$Microsoft.Cci.CallingConvention(), $T) <==> (T$Microsoft.Cci.CallingConvention() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.PdbWriter() : Ref;
const unique T$Microsoft.Cci.PdbWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.PdbWriter()) == T$Microsoft.Cci.PdbWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PdbWriter(), $T) } $Subtype(T$Microsoft.Cci.PdbWriter(), $T) <==> (T$Microsoft.Cci.PdbWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IUnit() : Ref;
const unique T$Microsoft.Cci.IUnit : int;
axiom $TypeConstructor(T$Microsoft.Cci.IUnit()) == T$Microsoft.Cci.IUnit;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IUnit(), $T) } $Subtype(T$Microsoft.Cci.IUnit(), $T) <==> (T$Microsoft.Cci.IUnit() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IUnitReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.Cci.ISpecializedNestedTypeReference() : Ref;
const unique T$Microsoft.Cci.ISpecializedNestedTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISpecializedNestedTypeReference()) == T$Microsoft.Cci.ISpecializedNestedTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISpecializedNestedTypeReference(), $T) } $Subtype(T$Microsoft.Cci.ISpecializedNestedTypeReference(), $T) <==> (T$Microsoft.Cci.ISpecializedNestedTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INestedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)));


function T$Microsoft.Cci.PdbMetadataWrapper() : Ref;
const unique T$Microsoft.Cci.PdbMetadataWrapper : int;
axiom $TypeConstructor(T$Microsoft.Cci.PdbMetadataWrapper()) == T$Microsoft.Cci.PdbMetadataWrapper;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PdbMetadataWrapper(), $T) } $Subtype(T$Microsoft.Cci.PdbMetadataWrapper(), $T) <==> (T$Microsoft.Cci.PdbMetadataWrapper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetaDataEmit(), $T)|| $Subtype(T$Microsoft.Cci.IMetaDataImport(), $T)));


function T$Microsoft.Cci.INestedTypeDefinition() : Ref;
const unique T$Microsoft.Cci.INestedTypeDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.INestedTypeDefinition()) == T$Microsoft.Cci.INestedTypeDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INestedTypeDefinition(), $T) } $Subtype(T$Microsoft.Cci.INestedTypeDefinition(), $T) <==> (T$Microsoft.Cci.INestedTypeDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.INestedTypeReference(), $T)));


function T$Microsoft.Cci.ICustomAttribute() : Ref;
const unique T$Microsoft.Cci.ICustomAttribute : int;
axiom $TypeConstructor(T$Microsoft.Cci.ICustomAttribute()) == T$Microsoft.Cci.ICustomAttribute;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ICustomAttribute(), $T) } $Subtype(T$Microsoft.Cci.ICustomAttribute(), $T) <==> (T$Microsoft.Cci.ICustomAttribute() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ITypeReferenceExtensions() : Ref;
const unique T$Microsoft.Cci.ITypeReferenceExtensions : int;
axiom $TypeConstructor(T$Microsoft.Cci.ITypeReferenceExtensions()) == T$Microsoft.Cci.ITypeReferenceExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ITypeReferenceExtensions(), $T) } $Subtype(T$Microsoft.Cci.ITypeReferenceExtensions(), $T) <==> (T$Microsoft.Cci.ITypeReferenceExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ITypeDefinition() : Ref;
const unique T$Microsoft.Cci.ITypeDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.ITypeDefinition()) == T$Microsoft.Cci.ITypeDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T) } $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T) <==> (T$Microsoft.Cci.ITypeDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)));


function T$Microsoft.Cci.ReferenceIndexerBase() : Ref;
const unique T$Microsoft.Cci.ReferenceIndexerBase : int;
axiom $TypeConstructor(T$Microsoft.Cci.ReferenceIndexerBase()) == T$Microsoft.Cci.ReferenceIndexerBase;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ReferenceIndexerBase(), $T) } $Subtype(T$Microsoft.Cci.ReferenceIndexerBase(), $T) <==> (T$Microsoft.Cci.ReferenceIndexerBase() == $T || $Subtype(T$Microsoft.Cci.MetadataVisitor(), $T)));


function T$Microsoft.Cci.DynamicAnalysisDataWriter() : Ref;
const unique T$Microsoft.Cci.DynamicAnalysisDataWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.DynamicAnalysisDataWriter()) == T$Microsoft.Cci.DynamicAnalysisDataWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter(), $T) } $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter(), $T) <==> (T$Microsoft.Cci.DynamicAnalysisDataWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow() : Ref;
const unique T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow : int;
axiom $TypeConstructor(T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow()) == T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow(), $T) } $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow(), $T) <==> (T$Microsoft.Cci.DynamicAnalysisDataWriter.DocumentRow() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow() : Ref;
const unique T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow : int;
axiom $TypeConstructor(T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow()) == T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow(), $T) } $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow(), $T) <==> (T$Microsoft.Cci.DynamicAnalysisDataWriter.MethodRow() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes() : Ref;
const unique T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes : int;
axiom $TypeConstructor(T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes()) == T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes(), $T) } $Subtype(T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes(), $T) <==> (T$Microsoft.Cci.DynamicAnalysisDataWriter.Sizes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.MetadataWriter() : Ref;
const unique T$Microsoft.Cci.MetadataWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.MetadataWriter()) == T$Microsoft.Cci.MetadataWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataWriter(), $T) } $Subtype(T$Microsoft.Cci.MetadataWriter(), $T) <==> (T$Microsoft.Cci.MetadataWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer() : Ref;
const unique T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer : int;
axiom $TypeConstructor(T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer()) == T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer(), $T) } $Subtype(T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer(), $T) <==> (T$Microsoft.Cci.MetadataWriter.ImportScopeEqualityComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T : Ref) : Ref;
const unique T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T), T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T$T())) } $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T), T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T$T())) == T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T), $T) } $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T), $T) <==> (T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T : Ref) : Ref;
const unique T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T), T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T$T())) } $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T), T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T$T())) == T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T), $T) } $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T), $T) <==> (T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndex`1(T) == $T || $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T), $T)));



function T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T : Ref) : Ref;
const unique T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T), T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T$T())) } $Subtype(T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T), T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T$T())) == T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T), $T) } $Subtype(T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T), $T) <==> (T$Microsoft.Cci.MetadataWriter.InstanceAndStructuralReferenceIndex`1(T) == $T || $Subtype(T$Microsoft.Cci.MetadataWriter.HeapOrReferenceIndexBase`1(T), $T)));



function T$Microsoft.Cci.MetadataWriter.$$c() : Ref;
const unique T$Microsoft.Cci.MetadataWriter.$$c : int;
axiom $TypeConstructor(T$Microsoft.Cci.MetadataWriter.$$c()) == T$Microsoft.Cci.MetadataWriter.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MetadataWriter.$$c(), $T) } $Subtype(T$Microsoft.Cci.MetadataWriter.$$c(), $T) <==> (T$Microsoft.Cci.MetadataWriter.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.DebugSourceInfo() : Ref;
const unique T$Microsoft.Cci.DebugSourceInfo : int;
axiom $TypeConstructor(T$Microsoft.Cci.DebugSourceInfo()) == T$Microsoft.Cci.DebugSourceInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DebugSourceInfo(), $T) } $Subtype(T$Microsoft.Cci.DebugSourceInfo(), $T) <==> (T$Microsoft.Cci.DebugSourceInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.DefinitionWithLocation() : Ref;
const unique T$Microsoft.Cci.DefinitionWithLocation : int;
axiom $TypeConstructor(T$Microsoft.Cci.DefinitionWithLocation()) == T$Microsoft.Cci.DefinitionWithLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.DefinitionWithLocation(), $T) } $Subtype(T$Microsoft.Cci.DefinitionWithLocation(), $T) <==> (T$Microsoft.Cci.DefinitionWithLocation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.VariantPadding() : Ref;
const unique T$Microsoft.Cci.VariantPadding : int;
axiom $TypeConstructor(T$Microsoft.Cci.VariantPadding()) == T$Microsoft.Cci.VariantPadding;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.VariantPadding(), $T) } $Subtype(T$Microsoft.Cci.VariantPadding(), $T) <==> (T$Microsoft.Cci.VariantPadding() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IEventDefinition() : Ref;
const unique T$Microsoft.Cci.IEventDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IEventDefinition()) == T$Microsoft.Cci.IEventDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IEventDefinition(), $T) } $Subtype(T$Microsoft.Cci.IEventDefinition(), $T) <==> (T$Microsoft.Cci.IEventDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.Cci.ISpecializedFieldReference() : Ref;
const unique T$Microsoft.Cci.ISpecializedFieldReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISpecializedFieldReference()) == T$Microsoft.Cci.ISpecializedFieldReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISpecializedFieldReference(), $T) } $Subtype(T$Microsoft.Cci.ISpecializedFieldReference(), $T) <==> (T$Microsoft.Cci.ISpecializedFieldReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IFieldReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.ITypeDefinitionMember() : Ref;
const unique T$Microsoft.Cci.ITypeDefinitionMember : int;
axiom $TypeConstructor(T$Microsoft.Cci.ITypeDefinitionMember()) == T$Microsoft.Cci.ITypeDefinitionMember;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T) } $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T) <==> (T$Microsoft.Cci.ITypeDefinitionMember() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.Cci.Constants() : Ref;
const unique T$Microsoft.Cci.Constants : int;
axiom $TypeConstructor(T$Microsoft.Cci.Constants()) == T$Microsoft.Cci.Constants;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.Constants(), $T) } $Subtype(T$Microsoft.Cci.Constants(), $T) <==> (T$Microsoft.Cci.Constants() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGlobalMethodDefinition() : Ref;
const unique T$Microsoft.Cci.IGlobalMethodDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGlobalMethodDefinition()) == T$Microsoft.Cci.IGlobalMethodDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGlobalMethodDefinition(), $T) } $Subtype(T$Microsoft.Cci.IGlobalMethodDefinition(), $T) <==> (T$Microsoft.Cci.IGlobalMethodDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)));


function T$Microsoft.Cci.PeWritingException() : Ref;
const unique T$Microsoft.Cci.PeWritingException : int;
axiom $TypeConstructor(T$Microsoft.Cci.PeWritingException()) == T$Microsoft.Cci.PeWritingException;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.PeWritingException(), $T) } $Subtype(T$Microsoft.Cci.PeWritingException(), $T) <==> (T$Microsoft.Cci.PeWritingException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IGenericParameter() : Ref;
const unique T$Microsoft.Cci.IGenericParameter : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericParameter()) == T$Microsoft.Cci.IGenericParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericParameter(), $T) } $Subtype(T$Microsoft.Cci.IGenericParameter(), $T) <==> (T$Microsoft.Cci.IGenericParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.MemberRefComparer() : Ref;
const unique T$Microsoft.Cci.MemberRefComparer : int;
axiom $TypeConstructor(T$Microsoft.Cci.MemberRefComparer()) == T$Microsoft.Cci.MemberRefComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.MemberRefComparer(), $T) } $Subtype(T$Microsoft.Cci.MemberRefComparer(), $T) <==> (T$Microsoft.Cci.MemberRefComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ModifiedTypeReference() : Ref;
const unique T$Microsoft.Cci.ModifiedTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.ModifiedTypeReference()) == T$Microsoft.Cci.ModifiedTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ModifiedTypeReference(), $T) } $Subtype(T$Microsoft.Cci.ModifiedTypeReference(), $T) <==> (T$Microsoft.Cci.ModifiedTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IModifiedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.IContextualNamedEntity() : Ref;
const unique T$Microsoft.Cci.IContextualNamedEntity : int;
axiom $TypeConstructor(T$Microsoft.Cci.IContextualNamedEntity()) == T$Microsoft.Cci.IContextualNamedEntity;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IContextualNamedEntity(), $T) } $Subtype(T$Microsoft.Cci.IContextualNamedEntity(), $T) <==> (T$Microsoft.Cci.IContextualNamedEntity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.ILocalDefinition() : Ref;
const unique T$Microsoft.Cci.ILocalDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.ILocalDefinition()) == T$Microsoft.Cci.ILocalDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ILocalDefinition(), $T) } $Subtype(T$Microsoft.Cci.ILocalDefinition(), $T) <==> (T$Microsoft.Cci.ILocalDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.ISymUnmanagedWriter8() : Ref;
const unique T$Microsoft.Cci.ISymUnmanagedWriter8 : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISymUnmanagedWriter8()) == T$Microsoft.Cci.ISymUnmanagedWriter8;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISymUnmanagedWriter8(), $T) } $Subtype(T$Microsoft.Cci.ISymUnmanagedWriter8(), $T) <==> (T$Microsoft.Cci.ISymUnmanagedWriter8() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ISymUnmanagedWriter5(), $T)));


function T$Microsoft.Cci.IModuleReference() : Ref;
const unique T$Microsoft.Cci.IModuleReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IModuleReference()) == T$Microsoft.Cci.IModuleReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IModuleReference(), $T) } $Subtype(T$Microsoft.Cci.IModuleReference(), $T) <==> (T$Microsoft.Cci.IModuleReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IUnitReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IMethodReference() : Ref;
const unique T$Microsoft.Cci.IMethodReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMethodReference()) == T$Microsoft.Cci.IMethodReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMethodReference(), $T) } $Subtype(T$Microsoft.Cci.IMethodReference(), $T) <==> (T$Microsoft.Cci.IMethodReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IGenericParameterReference() : Ref;
const unique T$Microsoft.Cci.IGenericParameterReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericParameterReference()) == T$Microsoft.Cci.IGenericParameterReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T) } $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T) <==> (T$Microsoft.Cci.IGenericParameterReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.IGenericMethodInstanceReference() : Ref;
const unique T$Microsoft.Cci.IGenericMethodInstanceReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IGenericMethodInstanceReference()) == T$Microsoft.Cci.IGenericMethodInstanceReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IGenericMethodInstanceReference(), $T) } $Subtype(T$Microsoft.Cci.IGenericMethodInstanceReference(), $T) <==> (T$Microsoft.Cci.IGenericMethodInstanceReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IReference() : Ref;
const unique T$Microsoft.Cci.IReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IReference()) == T$Microsoft.Cci.IReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IReference(), $T) } $Subtype(T$Microsoft.Cci.IReference(), $T) <==> (T$Microsoft.Cci.IReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ExtendedPEBuilder() : Ref;
const unique T$Microsoft.Cci.ExtendedPEBuilder : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExtendedPEBuilder()) == T$Microsoft.Cci.ExtendedPEBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExtendedPEBuilder(), $T) } $Subtype(T$Microsoft.Cci.ExtendedPEBuilder(), $T) <==> (T$Microsoft.Cci.ExtendedPEBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IMetaDataImport() : Ref;
const unique T$Microsoft.Cci.IMetaDataImport : int;
axiom $TypeConstructor(T$Microsoft.Cci.IMetaDataImport()) == T$Microsoft.Cci.IMetaDataImport;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IMetaDataImport(), $T) } $Subtype(T$Microsoft.Cci.IMetaDataImport(), $T) <==> (T$Microsoft.Cci.IMetaDataImport() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ISpecializedEventDefinition() : Ref;
const unique T$Microsoft.Cci.ISpecializedEventDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISpecializedEventDefinition()) == T$Microsoft.Cci.ISpecializedEventDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISpecializedEventDefinition(), $T) } $Subtype(T$Microsoft.Cci.ISpecializedEventDefinition(), $T) <==> (T$Microsoft.Cci.ISpecializedEventDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IEventDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.Cci.ManagedResource() : Ref;
const unique T$Microsoft.Cci.ManagedResource : int;
axiom $TypeConstructor(T$Microsoft.Cci.ManagedResource()) == T$Microsoft.Cci.ManagedResource;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ManagedResource(), $T) } $Subtype(T$Microsoft.Cci.ManagedResource(), $T) <==> (T$Microsoft.Cci.ManagedResource() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.TypeMemberVisibility() : Ref;
const unique T$Microsoft.Cci.TypeMemberVisibility : int;
axiom $TypeConstructor(T$Microsoft.Cci.TypeMemberVisibility()) == T$Microsoft.Cci.TypeMemberVisibility;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.TypeMemberVisibility(), $T) } $Subtype(T$Microsoft.Cci.TypeMemberVisibility(), $T) <==> (T$Microsoft.Cci.TypeMemberVisibility() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.COR_FIELD_OFFSET() : Ref;
const unique T$Microsoft.Cci.COR_FIELD_OFFSET : int;
axiom $TypeConstructor(T$Microsoft.Cci.COR_FIELD_OFFSET()) == T$Microsoft.Cci.COR_FIELD_OFFSET;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.COR_FIELD_OFFSET(), $T) } $Subtype(T$Microsoft.Cci.COR_FIELD_OFFSET(), $T) <==> (T$Microsoft.Cci.COR_FIELD_OFFSET() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ISymUnmanagedDocumentWriter() : Ref;
const unique T$Microsoft.Cci.ISymUnmanagedDocumentWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.ISymUnmanagedDocumentWriter()) == T$Microsoft.Cci.ISymUnmanagedDocumentWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ISymUnmanagedDocumentWriter(), $T) } $Subtype(T$Microsoft.Cci.ISymUnmanagedDocumentWriter(), $T) <==> (T$Microsoft.Cci.ISymUnmanagedDocumentWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IModifiedTypeReference() : Ref;
const unique T$Microsoft.Cci.IModifiedTypeReference : int;
axiom $TypeConstructor(T$Microsoft.Cci.IModifiedTypeReference()) == T$Microsoft.Cci.IModifiedTypeReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IModifiedTypeReference(), $T) } $Subtype(T$Microsoft.Cci.IModifiedTypeReference(), $T) <==> (T$Microsoft.Cci.IModifiedTypeReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.LocalScope() : Ref;
const unique T$Microsoft.Cci.LocalScope : int;
axiom $TypeConstructor(T$Microsoft.Cci.LocalScope()) == T$Microsoft.Cci.LocalScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.LocalScope(), $T) } $Subtype(T$Microsoft.Cci.LocalScope(), $T) <==> (T$Microsoft.Cci.LocalScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IWin32Resource() : Ref;
const unique T$Microsoft.Cci.IWin32Resource : int;
axiom $TypeConstructor(T$Microsoft.Cci.IWin32Resource()) == T$Microsoft.Cci.IWin32Resource;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IWin32Resource(), $T) } $Subtype(T$Microsoft.Cci.IWin32Resource(), $T) <==> (T$Microsoft.Cci.IWin32Resource() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.IPropertyDefinition() : Ref;
const unique T$Microsoft.Cci.IPropertyDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IPropertyDefinition()) == T$Microsoft.Cci.IPropertyDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IPropertyDefinition(), $T) } $Subtype(T$Microsoft.Cci.IPropertyDefinition(), $T) <==> (T$Microsoft.Cci.IPropertyDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.Cci.IParameterDefinition() : Ref;
const unique T$Microsoft.Cci.IParameterDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IParameterDefinition()) == T$Microsoft.Cci.IParameterDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IParameterDefinition(), $T) } $Subtype(T$Microsoft.Cci.IParameterDefinition(), $T) <==> (T$Microsoft.Cci.IParameterDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterTypeInformation(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.Cci.NoPiaReferenceIndexer() : Ref;
const unique T$Microsoft.Cci.NoPiaReferenceIndexer : int;
axiom $TypeConstructor(T$Microsoft.Cci.NoPiaReferenceIndexer()) == T$Microsoft.Cci.NoPiaReferenceIndexer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.NoPiaReferenceIndexer(), $T) } $Subtype(T$Microsoft.Cci.NoPiaReferenceIndexer(), $T) <==> (T$Microsoft.Cci.NoPiaReferenceIndexer() == $T || $Subtype(T$Microsoft.Cci.ReferenceIndexerBase(), $T)));


function T$Microsoft.Cci.INamedTypeDefinition() : Ref;
const unique T$Microsoft.Cci.INamedTypeDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.INamedTypeDefinition()) == T$Microsoft.Cci.INamedTypeDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T) } $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T) <==> (T$Microsoft.Cci.INamedTypeDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IImportScope() : Ref;
const unique T$Microsoft.Cci.IImportScope : int;
axiom $TypeConstructor(T$Microsoft.Cci.IImportScope()) == T$Microsoft.Cci.IImportScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IImportScope(), $T) } $Subtype(T$Microsoft.Cci.IImportScope(), $T) <==> (T$Microsoft.Cci.IImportScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.TypeLibTypeFlags() : Ref;
const unique T$Microsoft.Cci.TypeLibTypeFlags : int;
axiom $TypeConstructor(T$Microsoft.Cci.TypeLibTypeFlags()) == T$Microsoft.Cci.TypeLibTypeFlags;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.TypeLibTypeFlags(), $T) } $Subtype(T$Microsoft.Cci.TypeLibTypeFlags(), $T) <==> (T$Microsoft.Cci.TypeLibTypeFlags() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ReferenceIndexer() : Ref;
const unique T$Microsoft.Cci.ReferenceIndexer : int;
axiom $TypeConstructor(T$Microsoft.Cci.ReferenceIndexer()) == T$Microsoft.Cci.ReferenceIndexer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ReferenceIndexer(), $T) } $Subtype(T$Microsoft.Cci.ReferenceIndexer(), $T) <==> (T$Microsoft.Cci.ReferenceIndexer() == $T || $Subtype(T$Microsoft.Cci.ReferenceIndexerBase(), $T)));


function T$Microsoft.Cci.CustomDebugInfoWriter() : Ref;
const unique T$Microsoft.Cci.CustomDebugInfoWriter : int;
axiom $TypeConstructor(T$Microsoft.Cci.CustomDebugInfoWriter()) == T$Microsoft.Cci.CustomDebugInfoWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.CustomDebugInfoWriter(), $T) } $Subtype(T$Microsoft.Cci.CustomDebugInfoWriter(), $T) <==> (T$Microsoft.Cci.CustomDebugInfoWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.Cci.CustomDebugInfoWriter.$$c() : Ref;
const unique T$Microsoft.Cci.CustomDebugInfoWriter.$$c : int;
axiom $TypeConstructor(T$Microsoft.Cci.CustomDebugInfoWriter.$$c()) == T$Microsoft.Cci.CustomDebugInfoWriter.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.CustomDebugInfoWriter.$$c(), $T) } $Subtype(T$Microsoft.Cci.CustomDebugInfoWriter.$$c(), $T) <==> (T$Microsoft.Cci.CustomDebugInfoWriter.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.Cci.ExceptionHandlerRegionCatch() : Ref;
const unique T$Microsoft.Cci.ExceptionHandlerRegionCatch : int;
axiom $TypeConstructor(T$Microsoft.Cci.ExceptionHandlerRegionCatch()) == T$Microsoft.Cci.ExceptionHandlerRegionCatch;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionCatch(), $T) } $Subtype(T$Microsoft.Cci.ExceptionHandlerRegionCatch(), $T) <==> (T$Microsoft.Cci.ExceptionHandlerRegionCatch() == $T || $Subtype(T$Microsoft.Cci.ExceptionHandlerRegion(), $T)));


function T$Microsoft.Cci.IDefinition() : Ref;
const unique T$Microsoft.Cci.IDefinition : int;
axiom $TypeConstructor(T$Microsoft.Cci.IDefinition()) == T$Microsoft.Cci.IDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IDefinition(), $T) } $Subtype(T$Microsoft.Cci.IDefinition(), $T) <==> (T$Microsoft.Cci.IDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$Microsoft.Cci.INamespace() : Ref;
const unique T$Microsoft.Cci.INamespace : int;
axiom $TypeConstructor(T$Microsoft.Cci.INamespace()) == T$Microsoft.Cci.INamespace;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.INamespace(), $T) } $Subtype(T$Microsoft.Cci.INamespace(), $T) <==> (T$Microsoft.Cci.INamespace() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.Cci.IParameterListEntry() : Ref;
const unique T$Microsoft.Cci.IParameterListEntry : int;
axiom $TypeConstructor(T$Microsoft.Cci.IParameterListEntry()) == T$Microsoft.Cci.IParameterListEntry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T) } $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T) <==> (T$Microsoft.Cci.IParameterListEntry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IdentifierCollection() : Ref;
const unique T$Microsoft.CodeAnalysis.IdentifierCollection : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IdentifierCollection()) == T$Microsoft.CodeAnalysis.IdentifierCollection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection(), $T) <==> (T$Microsoft.CodeAnalysis.IdentifierCollection() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase() : Ref;
const unique T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase()) == T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase(), $T) <==> (T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c()) == T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9() : Ref;
const unique T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9()) == T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9(), $T) <==> (T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase.$GetEnumerator$d__9() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection() : Ref;
const unique T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection()) == T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection(), $T) <==> (T$Microsoft.CodeAnalysis.IdentifierCollection.CaseSensitiveCollection() == $T || $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase(), $T)));


function T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection() : Ref;
const unique T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection()) == T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection(), $T) <==> (T$Microsoft.CodeAnalysis.IdentifierCollection.CaseInsensitiveCollection() == $T || $Subtype(T$Microsoft.CodeAnalysis.IdentifierCollection.CollectionBase(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxList`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxList`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1(TNode), T$Microsoft.CodeAnalysis.SyntaxList`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1(TNode), T$Microsoft.CodeAnalysis.SyntaxList`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxList`1(T$TNode())) == T$Microsoft.CodeAnalysis.SyntaxList`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxList`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TNode() : Ref;
const unique T$TNode : int;
axiom $TypeConstructor(T$TNode()) == T$TNode;
axiom(forall  $T: Ref:: {  $Subtype(T$TNode(), $T) } $Subtype(T$TNode(), $T) <==> (T$TNode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator()) == T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxList`1.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxList`1.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0()) == T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxList`1.$$c__DisplayClass20_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxList`1.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxList`1.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxList`1.$$c()) == T$Microsoft.CodeAnalysis.SyntaxList`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxList`1.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxList`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.InvalidRuleSetException() : Ref;
const unique T$Microsoft.CodeAnalysis.InvalidRuleSetException : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.InvalidRuleSetException()) == T$Microsoft.CodeAnalysis.InvalidRuleSetException;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.InvalidRuleSetException(), $T) } $Subtype(T$Microsoft.CodeAnalysis.InvalidRuleSetException(), $T) <==> (T$Microsoft.CodeAnalysis.InvalidRuleSetException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ObsoleteAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.ObsoleteAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ObsoleteAttributeData()) == T$Microsoft.CodeAnalysis.ObsoleteAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ObsoleteAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ObsoleteAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.ObsoleteAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxDiffer() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxDiffer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxDiffer()) == T$Microsoft.CodeAnalysis.SyntaxDiffer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxDiffer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp()) == T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffOp() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction()) == T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxDiffer.DiffAction() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord()) == T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRecord() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText()) == T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxDiffer.ChangeRangeWithText() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c()) == T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxDiffer.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument()) == T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument(), $T) <==> (T$Microsoft.CodeAnalysis.CodeAnalysisResourcesLocalizableErrorArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer()) == T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser()) == T$Microsoft.CodeAnalysis.CryptoBlobParser;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmClass() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmSubId() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.AlgorithmId() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.SnPublicKeyBlob.$PublicKey$e__FixedBuffer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.BlobHeader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey()) == T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey(), $T) <==> (T$Microsoft.CodeAnalysis.CryptoBlobParser.RsaPubKey() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.FailFast() : Ref;
const unique T$Microsoft.CodeAnalysis.FailFast : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.FailFast()) == T$Microsoft.CodeAnalysis.FailFast;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.FailFast(), $T) } $Subtype(T$Microsoft.CodeAnalysis.FailFast(), $T) <==> (T$Microsoft.CodeAnalysis.FailFast() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyMetadata() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyMetadata : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyMetadata()) == T$Microsoft.CodeAnalysis.AssemblyMetadata;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyMetadata() == $T || $Subtype(T$Microsoft.CodeAnalysis.Metadata(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyMetadata.Data() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyMetadata.Data : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyMetadata.Data()) == T$Microsoft.CodeAnalysis.AssemblyMetadata.Data;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata.Data(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata.Data(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyMetadata.Data() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0()) == T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c__DisplayClass14_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c()) == T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyMetadata.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayMemberOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ThreeState() : Ref;
const unique T$Microsoft.CodeAnalysis.ThreeState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ThreeState()) == T$Microsoft.CodeAnalysis.ThreeState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ThreeState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ThreeState(), $T) <==> (T$Microsoft.CodeAnalysis.ThreeState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Operation() : Ref;
const unique T$Microsoft.CodeAnalysis.Operation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Operation()) == T$Microsoft.CodeAnalysis.Operation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T) <==> (T$Microsoft.CodeAnalysis.Operation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$TArgument() : Ref;
const unique T$TArgument : int;
axiom $TypeConstructor(T$TArgument()) == T$TArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$TArgument(), $T) } $Subtype(T$TArgument(), $T) <==> (T$TArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TResult() : Ref;
const unique T$TResult : int;
axiom $TypeConstructor(T$TResult()) == T$TResult;
axiom(forall  $T: Ref:: {  $Subtype(T$TResult(), $T) } $Subtype(T$TResult(), $T) <==> (T$TResult() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ExternalFileLocation() : Ref;
const unique T$Microsoft.CodeAnalysis.ExternalFileLocation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ExternalFileLocation()) == T$Microsoft.CodeAnalysis.ExternalFileLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ExternalFileLocation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ExternalFileLocation(), $T) <==> (T$Microsoft.CodeAnalysis.ExternalFileLocation() == $T || $Subtype(T$Microsoft.CodeAnalysis.Location(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RefKindExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.RefKindExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RefKindExtensions()) == T$Microsoft.CodeAnalysis.RefKindExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RefKindExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RefKindExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.RefKindExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LineVisibility() : Ref;
const unique T$Microsoft.CodeAnalysis.LineVisibility : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LineVisibility()) == T$Microsoft.CodeAnalysis.LineVisibility;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LineVisibility(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LineVisibility(), $T) <==> (T$Microsoft.CodeAnalysis.LineVisibility() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonModuleWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind() : Ref;
const unique T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind()) == T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind(), $T) <==> (T$Microsoft.CodeAnalysis.InternalSymbolDisplayPartKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolKindExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolKindExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolKindExtensions()) == T$Microsoft.CodeAnalysis.SymbolKindExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolKindExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolKindExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolKindExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader()) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader(), $T) <==> (T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader()) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader(), $T) <==> (T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c()) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.XmlLocation() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlLocation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlLocation()) == T$Microsoft.CodeAnalysis.XmlLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlLocation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlLocation(), $T) <==> (T$Microsoft.CodeAnalysis.XmlLocation() == $T || $Subtype(T$Microsoft.CodeAnalysis.Location(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IOperationWithChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.IOperationWithChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IOperationWithChildren()) == T$Microsoft.CodeAnalysis.IOperationWithChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IOperationWithChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IOperationWithChildren(), $T) <==> (T$Microsoft.CodeAnalysis.IOperationWithChildren() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.OutputKind() : Ref;
const unique T$Microsoft.CodeAnalysis.OutputKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.OutputKind()) == T$Microsoft.CodeAnalysis.OutputKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.OutputKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.OutputKind(), $T) <==> (T$Microsoft.CodeAnalysis.OutputKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayPart() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayPart : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayPart()) == T$Microsoft.CodeAnalysis.SymbolDisplayPart;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayPart(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayPart(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayPart() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager()) == T$Microsoft.CodeAnalysis.CommonReferenceManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IPreprocessingSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IPreprocessingSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IPreprocessingSymbol()) == T$Microsoft.CodeAnalysis.IPreprocessingSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IPreprocessingSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IPreprocessingSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IPreprocessingSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.FileLinePositionSpan() : Ref;
const unique T$Microsoft.CodeAnalysis.FileLinePositionSpan : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.FileLinePositionSpan()) == T$Microsoft.CodeAnalysis.FileLinePositionSpan;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.FileLinePositionSpan(), $T) } $Subtype(T$Microsoft.CodeAnalysis.FileLinePositionSpan(), $T) <==> (T$Microsoft.CodeAnalysis.FileLinePositionSpan() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IEventSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IEventSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IEventSymbol()) == T$Microsoft.CodeAnalysis.IEventSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IEventSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IEventSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IEventSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonModuleCompilationState() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonModuleCompilationState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonModuleCompilationState()) == T$Microsoft.CodeAnalysis.CommonModuleCompilationState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonModuleCompilationState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonModuleCompilationState(), $T) <==> (T$Microsoft.CodeAnalysis.CommonModuleCompilationState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayFormat() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayFormat : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayFormat()) == T$Microsoft.CodeAnalysis.SymbolDisplayFormat;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayFormat(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayFormat(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayFormat() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonFieldEarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.SymbolFactory`2(ModuleSymbol : Ref,TypeSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolFactory`2 : int;
axiom(forall ModuleSymbol : Ref,TypeSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolFactory`2(ModuleSymbol,TypeSymbol), T$Microsoft.CodeAnalysis.SymbolFactory`2(T$ModuleSymbol(),T$TypeSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.SymbolFactory`2(ModuleSymbol,TypeSymbol), T$Microsoft.CodeAnalysis.SymbolFactory`2(T$ModuleSymbol(),T$TypeSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolFactory`2(T$ModuleSymbol(),T$TypeSymbol())) == T$Microsoft.CodeAnalysis.SymbolFactory`2;
axiom(forall ModuleSymbol : Ref,TypeSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolFactory`2(ModuleSymbol,TypeSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolFactory`2(ModuleSymbol,TypeSymbol), $T) <==> (T$Microsoft.CodeAnalysis.SymbolFactory`2(ModuleSymbol,TypeSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$ModuleSymbol() : Ref;
const unique T$ModuleSymbol : int;
axiom $TypeConstructor(T$ModuleSymbol()) == T$ModuleSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$ModuleSymbol(), $T) } $Subtype(T$ModuleSymbol(), $T) <==> (T$ModuleSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TypeSymbol() : Ref;
const unique T$TypeSymbol : int;
axiom $TypeConstructor(T$TypeSymbol()) == T$TypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TypeSymbol(), $T) } $Subtype(T$TypeSymbol(), $T) <==> (T$TypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISecurityAttributeTarget() : Ref;
const unique T$Microsoft.CodeAnalysis.ISecurityAttributeTarget : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISecurityAttributeTarget()) == T$Microsoft.CodeAnalysis.ISecurityAttributeTarget;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISecurityAttributeTarget(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISecurityAttributeTarget(), $T) <==> (T$Microsoft.CodeAnalysis.ISecurityAttributeTarget() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownMembers() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownMembers : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownMembers()) == T$Microsoft.CodeAnalysis.WellKnownMembers;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownMembers(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownMembers(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownMembers() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle()) == T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.BitVector() : Ref;
const unique T$Microsoft.CodeAnalysis.BitVector : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.BitVector()) == T$Microsoft.CodeAnalysis.BitVector;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.BitVector(), $T) } $Subtype(T$Microsoft.CodeAnalysis.BitVector(), $T) <==> (T$Microsoft.CodeAnalysis.BitVector() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.BitVector.$Words$d__18() : Ref;
const unique T$Microsoft.CodeAnalysis.BitVector.$Words$d__18 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.BitVector.$Words$d__18()) == T$Microsoft.CodeAnalysis.BitVector.$Words$d__18;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.BitVector.$Words$d__18(), $T) } $Subtype(T$Microsoft.CodeAnalysis.BitVector.$Words$d__18(), $T) <==> (T$Microsoft.CodeAnalysis.BitVector.$Words$d__18() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19() : Ref;
const unique T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19()) == T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19(), $T) } $Subtype(T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19(), $T) <==> (T$Microsoft.CodeAnalysis.BitVector.$TrueBits$d__19() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SemanticModel() : Ref;
const unique T$Microsoft.CodeAnalysis.SemanticModel : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SemanticModel()) == T$Microsoft.CodeAnalysis.SemanticModel;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SemanticModel(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SemanticModel(), $T) <==> (T$Microsoft.CodeAnalysis.SemanticModel() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(MethodSymbol : Ref,FieldSymbol : Ref,PropertySymbol : Ref,TypeSymbol : Ref,ParameterSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5 : int;
axiom(forall MethodSymbol : Ref,FieldSymbol : Ref,PropertySymbol : Ref,TypeSymbol : Ref,ParameterSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(MethodSymbol,FieldSymbol,PropertySymbol,TypeSymbol,ParameterSymbol), T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(T$MethodSymbol(),T$FieldSymbol(),T$PropertySymbol(),T$TypeSymbol(),T$ParameterSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(MethodSymbol,FieldSymbol,PropertySymbol,TypeSymbol,ParameterSymbol), T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(T$MethodSymbol(),T$FieldSymbol(),T$PropertySymbol(),T$TypeSymbol(),T$ParameterSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(T$MethodSymbol(),T$FieldSymbol(),T$PropertySymbol(),T$TypeSymbol(),T$ParameterSymbol())) == T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5;
axiom(forall MethodSymbol : Ref,FieldSymbol : Ref,PropertySymbol : Ref,TypeSymbol : Ref,ParameterSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(MethodSymbol,FieldSymbol,PropertySymbol,TypeSymbol,ParameterSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(MethodSymbol,FieldSymbol,PropertySymbol,TypeSymbol,ParameterSymbol), $T) <==> (T$Microsoft.CodeAnalysis.RuntimeMembers.SignatureComparer`5(MethodSymbol,FieldSymbol,PropertySymbol,TypeSymbol,ParameterSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$MethodSymbol() : Ref;
const unique T$MethodSymbol : int;
axiom $TypeConstructor(T$MethodSymbol()) == T$MethodSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$MethodSymbol(), $T) } $Subtype(T$MethodSymbol(), $T) <==> (T$MethodSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$FieldSymbol() : Ref;
const unique T$FieldSymbol : int;
axiom $TypeConstructor(T$FieldSymbol()) == T$FieldSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$FieldSymbol(), $T) } $Subtype(T$FieldSymbol(), $T) <==> (T$FieldSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$PropertySymbol() : Ref;
const unique T$PropertySymbol : int;
axiom $TypeConstructor(T$PropertySymbol()) == T$PropertySymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$PropertySymbol(), $T) } $Subtype(T$PropertySymbol(), $T) <==> (T$PropertySymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$ParameterSymbol() : Ref;
const unique T$ParameterSymbol : int;
axiom $TypeConstructor(T$ParameterSymbol()) == T$ParameterSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$ParameterSymbol(), $T) } $Subtype(T$ParameterSymbol(), $T) <==> (T$ParameterSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor() : Ref;
const unique T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor()) == T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor(), $T) <==> (T$Microsoft.CodeAnalysis.RuntimeMembers.MemberDescriptor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags() : Ref;
const unique T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags()) == T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags(), $T) <==> (T$Microsoft.CodeAnalysis.RuntimeMembers.MemberFlags() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SourceCodeKindExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SourceCodeKindExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SourceCodeKindExtensions()) == T$Microsoft.CodeAnalysis.SourceCodeKindExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SourceCodeKindExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SourceCodeKindExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SourceCodeKindExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions()) == T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentityExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.UnresolvedMetadataReference() : Ref;
const unique T$Microsoft.CodeAnalysis.UnresolvedMetadataReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.UnresolvedMetadataReference()) == T$Microsoft.CodeAnalysis.UnresolvedMetadataReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.UnresolvedMetadataReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.UnresolvedMetadataReference(), $T) <==> (T$Microsoft.CodeAnalysis.UnresolvedMetadataReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.MetadataReference(), $T)));


function T$Microsoft.CodeAnalysis.CvtResFile() : Ref;
const unique T$Microsoft.CodeAnalysis.CvtResFile : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CvtResFile()) == T$Microsoft.CodeAnalysis.CvtResFile;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CvtResFile(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CvtResFile(), $T) <==> (T$Microsoft.CodeAnalysis.CvtResFile() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.FileSystemExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.FileSystemExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.FileSystemExtensions()) == T$Microsoft.CodeAnalysis.FileSystemExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.FileSystemExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.FileSystemExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.FileSystemExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonParameterWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget(), $T)));


function T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(TWellKnownAttributeData : Ref,TAttributeSyntax : Ref,TAttributeData : Ref,TAttributeLocation : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4 : int;
axiom(forall TWellKnownAttributeData : Ref,TAttributeSyntax : Ref,TAttributeData : Ref,TAttributeLocation : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(TWellKnownAttributeData,TAttributeSyntax,TAttributeData,TAttributeLocation), T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(T$TWellKnownAttributeData(),T$TAttributeSyntax(),T$TAttributeData(),T$TAttributeLocation())) } $Subtype(T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(TWellKnownAttributeData,TAttributeSyntax,TAttributeData,TAttributeLocation), T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(T$TWellKnownAttributeData(),T$TAttributeSyntax(),T$TAttributeData(),T$TAttributeLocation())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(T$TWellKnownAttributeData(),T$TAttributeSyntax(),T$TAttributeData(),T$TAttributeLocation())) == T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4;
axiom(forall TWellKnownAttributeData : Ref,TAttributeSyntax : Ref,TAttributeData : Ref,TAttributeLocation : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(TWellKnownAttributeData,TAttributeSyntax,TAttributeData,TAttributeLocation), $T) } $Subtype(T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(TWellKnownAttributeData,TAttributeSyntax,TAttributeData,TAttributeLocation), $T) <==> (T$Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4(TWellKnownAttributeData,TAttributeSyntax,TAttributeData,TAttributeLocation) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TWellKnownAttributeData() : Ref;
const unique T$TWellKnownAttributeData : int;
axiom $TypeConstructor(T$TWellKnownAttributeData()) == T$TWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$TWellKnownAttributeData(), $T) } $Subtype(T$TWellKnownAttributeData(), $T) <==> (T$TWellKnownAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TAttributeSyntax() : Ref;
const unique T$TAttributeSyntax : int;
axiom $TypeConstructor(T$TAttributeSyntax()) == T$TAttributeSyntax;
axiom(forall  $T: Ref:: {  $Subtype(T$TAttributeSyntax(), $T) } $Subtype(T$TAttributeSyntax(), $T) <==> (T$TAttributeSyntax() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TAttributeData() : Ref;
const unique T$TAttributeData : int;
axiom $TypeConstructor(T$TAttributeData()) == T$TAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$TAttributeData(), $T) } $Subtype(T$TAttributeData(), $T) <==> (T$TAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TAttributeLocation() : Ref;
const unique T$TAttributeLocation : int;
axiom $TypeConstructor(T$TAttributeLocation()) == T$TAttributeLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$TAttributeLocation(), $T) } $Subtype(T$TAttributeLocation(), $T) <==> (T$TAttributeLocation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions()) == T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataTypeCodeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ITypeParameterSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ITypeParameterSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ITypeParameterSymbol()) == T$Microsoft.CodeAnalysis.ITypeParameterSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ITypeParameterSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ITypeParameterSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ITypeParameterSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticWithInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticWithInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticWithInfo()) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticWithInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticWithInfo(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticWithInfo() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostic(), $T)));


function T$Microsoft.CodeAnalysis.ObjectDisplayExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ObjectDisplayExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ObjectDisplayExtensions()) == T$Microsoft.CodeAnalysis.ObjectDisplayExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ObjectDisplayExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ObjectDisplayExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ObjectDisplayExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownType() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownType()) == T$Microsoft.CodeAnalysis.WellKnownType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownType(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.INamespaceSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.INamespaceSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.INamespaceSymbol()) == T$Microsoft.CodeAnalysis.INamespaceSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.INamespaceSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.INamespaceSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.INamespaceSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IParameterSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IParameterSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IParameterSymbol()) == T$Microsoft.CodeAnalysis.IParameterSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IParameterSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IParameterSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IParameterSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IErrorTypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IErrorTypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IErrorTypeSymbol()) == T$Microsoft.CodeAnalysis.IErrorTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IErrorTypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IErrorTypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IErrorTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamedTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonMethodWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISecurityAttributeTarget(), $T)));


function T$Microsoft.CodeAnalysis.Optional`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Optional`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Optional`1(T), T$Microsoft.CodeAnalysis.Optional`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.Optional`1(T), T$Microsoft.CodeAnalysis.Optional`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Optional`1(T$T())) == T$Microsoft.CodeAnalysis.Optional`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Optional`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.Optional`1(T), $T) <==> (T$Microsoft.CodeAnalysis.Optional`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.DesktopStrongNameProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopStrongNameProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider()) == T$Microsoft.CodeAnalysis.DesktopStrongNameProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopStrongNameProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.StrongNameProvider(), $T)));


function T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream()) == T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.TempFileStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException()) == T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.ClrStrongNameMissingException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c()) == T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopStrongNameProvider.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayPartKind() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayPartKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayPartKind()) == T$Microsoft.CodeAnalysis.SymbolDisplayPartKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayPartKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayPartKind(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayPartKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax() : Ref;
const unique T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax()) == T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax(), $T) <==> (T$Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue()) == T$Microsoft.CodeAnalysis.ConstantValue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueBad() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueNull() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueString() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimal() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDateTime() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalZero() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDoubleZero() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingleZero() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDefault(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDecimalOne() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueOne(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI8() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI16() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI32() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueI64() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDouble() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle()) == T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueSingle() == $T || $Subtype(T$Microsoft.CodeAnalysis.ConstantValue.ConstantValueDiscriminated(), $T)));


function T$Microsoft.CodeAnalysis.UnsupportedSignatureContent() : Ref;
const unique T$Microsoft.CodeAnalysis.UnsupportedSignatureContent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.UnsupportedSignatureContent()) == T$Microsoft.CodeAnalysis.UnsupportedSignatureContent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.UnsupportedSignatureContent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.UnsupportedSignatureContent(), $T) <==> (T$Microsoft.CodeAnalysis.UnsupportedSignatureContent() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataReference() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataReference()) == T$Microsoft.CodeAnalysis.MetadataReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataReference(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ModuleExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ModuleExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ModuleExtensions()) == T$Microsoft.CodeAnalysis.ModuleExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ModuleExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ModuleExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ModuleExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.NoLocation() : Ref;
const unique T$Microsoft.CodeAnalysis.NoLocation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.NoLocation()) == T$Microsoft.CodeAnalysis.NoLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.NoLocation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.NoLocation(), $T) <==> (T$Microsoft.CodeAnalysis.NoLocation() == $T || $Subtype(T$Microsoft.CodeAnalysis.Location(), $T)));


function T$Microsoft.CodeAnalysis.ArrayBuilder`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ArrayBuilder`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1(T), T$Microsoft.CodeAnalysis.ArrayBuilder`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1(T), T$Microsoft.CodeAnalysis.ArrayBuilder`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ArrayBuilder`1(T$T())) == T$Microsoft.CodeAnalysis.ArrayBuilder`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1(T), $T) <==> (T$Microsoft.CodeAnalysis.ArrayBuilder`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$U() : Ref;
const unique T$U : int;
axiom $TypeConstructor(T$U()) == T$U;
axiom(forall  $T: Ref:: {  $Subtype(T$U(), $T) } $Subtype(T$U(), $T) <==> (T$U() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$K() : Ref;
const unique T$K : int;
axiom $TypeConstructor(T$K()) == T$K;
axiom(forall  $T: Ref:: {  $Subtype(T$K(), $T) } $Subtype(T$K(), $T) <==> (T$K() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$S() : Ref;
const unique T$S : int;
axiom $TypeConstructor(T$S()) == T$S;
axiom(forall  $T: Ref:: {  $Subtype(T$S(), $T) } $Subtype(T$S(), $T) <==> (T$S() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy() : Ref;
const unique T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy()) == T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy(), $T) <==> (T$Microsoft.CodeAnalysis.ArrayBuilder`1.DebuggerProxy() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator()) == T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.ArrayBuilder`1.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0() : Ref;
const unique T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0()) == T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0(), $T) <==> (T$Microsoft.CodeAnalysis.ArrayBuilder`1.$$c__DisplayClass47_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo()) == T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo(), $T) <==> (T$Microsoft.CodeAnalysis.PreprocessingSymbolInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Win32ResourceConversions() : Ref;
const unique T$Microsoft.CodeAnalysis.Win32ResourceConversions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Win32ResourceConversions()) == T$Microsoft.CodeAnalysis.Win32ResourceConversions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions(), $T) <==> (T$Microsoft.CodeAnalysis.Win32ResourceConversions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY() : Ref;
const unique T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY()) == T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY(), $T) <==> (T$Microsoft.CodeAnalysis.Win32ResourceConversions.ICONDIRENTRY() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer()) == T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer(), $T) <==> (T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22() : Ref;
const unique T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22()) == T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22(), $T) <==> (T$Microsoft.CodeAnalysis.Win32ResourceConversions.VersionResourceSerializer.$GetVerStrings$d__22() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader() : Ref;
const unique T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader()) == T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader(), $T) <==> (T$Microsoft.CodeAnalysis.AnalyzerAssemblyLoader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader(), $T)));


function T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions()) == T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.CommonAttributeDataExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TLanguageKindEnum() : Ref;
const unique T$TLanguageKindEnum : int;
axiom $TypeConstructor(T$TLanguageKindEnum()) == T$TLanguageKindEnum;
axiom(forall  $T: Ref:: {  $Subtype(T$TLanguageKindEnum(), $T) } $Subtype(T$TLanguageKindEnum(), $T) <==> (T$TLanguageKindEnum() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostic(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(TKey : Ref,TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2 : int;
axiom(forall TKey : Ref,TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(TKey,TValue), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(TKey,TValue), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2;
axiom(forall TKey : Ref,TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(TKey,TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(TKey,TValue), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(TKey,TValue) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TKey() : Ref;
const unique T$TKey : int;
axiom $TypeConstructor(T$TKey()) == T$TKey;
axiom(forall  $T: Ref:: {  $Subtype(T$TKey(), $T) } $Subtype(T$TKey(), $T) <==> (T$TKey() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TValue() : Ref;
const unique T$TValue : int;
axiom $TypeConstructor(T$TValue()) == T$TValue;
axiom(forall  $T: Ref:: {  $Subtype(T$TValue(), $T) } $Subtype(T$TValue(), $T) <==> (T$TValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent()) == T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0()) == T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c__DisplayClass1_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.CompilationData.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.DeclarationAnalysisData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass37_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass38_0.$$Initialize$b__0$d() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass39_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$AttachQueueAndProcessAllEventsAsync$d__45() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ExecutePrimaryAnalysisTaskAsync$d__47() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass50_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetDiagnosticsAsync$d__52() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass70_0.$$ProcessCompilationEventsAsync$b__0$d() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsAsync$d__70() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$ProcessCompilationEventsCoreAsync$d__71() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass82_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass83_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$$c__DisplayClass84_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionsAsync$d__87() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerGateMapAsync$d__88() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetGeneratedCodeAnalysisFlagsAsync$d__89() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.$GetAnalyzerActionCountsAsync$d__97() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass26_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__37() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsAsync$d__38() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__39() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultAsync$d__40() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsAsync$d__42() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__43() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsAsync$d__44() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass45_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerCompilationDiagnosticsCoreAsync$d__45() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalysisResultWithoutStateTrackingAsync$d__46() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDiagnosticsWithoutStateTrackingAsync$d__47() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass48_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync$d__48() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAllDiagnosticsWithoutStateTrackingAsync$d__49() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__50() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsAsync$d__51() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSyntaxDiagnosticsCoreAsync$d__52() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__53() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsAsync$d__54() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass55_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerSemanticDiagnosticsCoreAsync$d__55() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_1.$$ComputeAnalyzerDiagnosticsAsync$b__1$d() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$$c__DisplayClass56_2() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsAsync$d__56() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GenerateCompilationEventsAndPopulateEventsCacheAsync$d__57() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$PopulateEventsCacheAsync$d__59() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerDriverAsync$d__61() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$ComputeAnalyzerDiagnosticsCoreAsync$d__63() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveCompilationAnalysisTaskAsync$d__65() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$WaitForActiveAnalysisTasksAsync$d__66() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$SetActiveTreeAnalysisTaskAsync$d__67() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetEffectiveDiagnosticsImpl$d__75() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerTelemetryInfoAsync$d__78() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.$GetAnalyzerActionCountsAsync$d__79() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(TElement : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1 : int;
axiom(forall TElement : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(TElement), T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(T$TElement())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(TElement), T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(T$TElement())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(T$TElement())) == T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1;
axiom(forall TElement : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(TElement), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(TElement), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1(TElement) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TElement() : Ref;
const unique T$TElement : int;
axiom $TypeConstructor(T$TElement()) == T$TElement;
axiom(forall  $T: Ref:: {  $Subtype(T$TElement(), $T) } $Subtype(T$TElement(), $T) <==> (T$TElement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass11_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__DisplayClass18_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T), T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T), T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T$T())) == T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1.$$c__22`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisScope.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationCompletedEvent() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo()) == T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerTelemetryInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts()) == T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerLoadFailureEventArgs.FailureErrorCode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver(), $T)));



function T$ActionType() : Ref;
const unique T$ActionType : int;
axiom $TypeConstructor(T$ActionType()) == T$ActionType;
axiom(forall  $T: Ref:: {  $Subtype(T$ActionType(), $T) } $Subtype(T$ActionType(), $T) <==> (T$ActionType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$T0() : Ref;
const unique T$T0 : int;
axiom $TypeConstructor(T$T0()) == T$T0;
axiom(forall  $T: Ref:: {  $Subtype(T$T0(), $T) } $Subtype(T$T0(), $T) <==> (T$T0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$T1() : Ref;
const unique T$T1 : int;
axiom $TypeConstructor(T$T1()) == T$T1;
axiom(forall  $T: Ref:: {  $Subtype(T$T1(), $T) } $Subtype(T$T1(), $T) <==> (T$T1() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.CodeBlockAnalyzerActions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(ActionType : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1 : int;
axiom(forall ActionType : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(ActionType), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(T$ActionType())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(ActionType), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(T$ActionType())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(T$ActionType())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1;
axiom(forall ActionType : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(ActionType), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(ActionType), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__27`1(ActionType) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass37_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetCodeBlockActions$d__39() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass40_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$$c__DisplayClass44_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.$GetSyntaxNodesToAnalyze$d__44() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCodeBlockStartAnalysisContext`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1(TLanguageKindEnum), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass4_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass6_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.$$c__DisplayClass9_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeAsync$d__3() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetCompilationAnalysisScopeCoreAsync$d__4() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeAsync$d__5() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetSessionAnalysisScopeCoreAsync$d__6() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetAnalyzerActionsAsync$d__7() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$IsConcurrentAnalyzerAsync$d__8() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.$GetGeneratedCodeAnalysisFlagsAsync$d__9() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationUnitCompletedEvent() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(TKey : Ref,TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2 : int;
axiom(forall TKey : Ref,TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(TKey,TValue), T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(T$TKey(),T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(TKey,TValue), T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(T$TKey(),T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(T$TKey(),T$TValue())) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2;
axiom(forall TKey : Ref,TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(TKey,TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(TKey,TValue), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProvider`2(TKey,TValue) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.AttributePredicate() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(TExtension : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1 : int;
axiom(forall TExtension : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(TExtension), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(T$TExtension())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(TExtension), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(T$TExtension())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(T$TExtension())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1;
axiom(forall TExtension : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(TExtension), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(TExtension), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.Extensions`1(TExtension) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TExtension() : Ref;
const unique T$TExtension : int;
axiom $TypeConstructor(T$TExtension()) == T$TExtension;
axiom(forall  $T: Ref:: {  $Subtype(T$TExtension(), $T) } $Subtype(T$TExtension(), $T) <==> (T$TExtension() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass28_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.$$c__DisplayClass29_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartedEvent() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationEvent(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));








function T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));











function T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope()) == T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));







function T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0()) == T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope.$$c__DisplayClass42_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisValueProviderFactory() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.GlobalSuppressions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.TypeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.ParameterInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.TargetSymbolResolver.$$c__DisplayClass28_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope()) == T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostCompilationStartAnalysisScope() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope(), $T)));





function T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext(), $T)));






function T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo()) == T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.SimpleDiagnosticQueue() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticQueue.CategorizedDiagnosticQueue.$$c__DisplayClass13_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope()) == T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostAnalysisScope(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0()) == T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostSessionStartAnalysisScope.$$c__DisplayClass9_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext(), $T)));




function T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$TBlockStartAction() : Ref;
const unique T$TBlockStartAction : int;
axiom $TypeConstructor(T$TBlockStartAction()) == T$TBlockStartAction;
axiom(forall  $T: Ref:: {  $Subtype(T$TBlockStartAction(), $T) } $Subtype(T$TBlockStartAction(), $T) <==> (T$TBlockStartAction() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TBlockAction() : Ref;
const unique T$TBlockAction : int;
axiom $TypeConstructor(T$TBlockAction()) == T$TBlockAction;
axiom(forall  $T: Ref:: {  $Subtype(T$TBlockAction(), $T) } $Subtype(T$TBlockAction(), $T) <==> (T$TBlockAction() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TNodeAction() : Ref;
const unique T$TNodeAction : int;
axiom $TypeConstructor(T$TNodeAction()) == T$TNodeAction;
axiom(forall  $T: Ref:: {  $Subtype(T$TNodeAction(), $T) } $Subtype(T$TNodeAction(), $T) <==> (T$TNodeAction() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TNodeStateData() : Ref;
const unique T$TNodeStateData : int;
axiom $TypeConstructor(T$TNodeStateData()) == T$TNodeStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$TNodeStateData(), $T) } $Subtype(T$TNodeStateData(), $T) <==> (T$TNodeStateData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));











function T$TArg() : Ref;
const unique T$TArg : int;
axiom $TypeConstructor(T$TArg()) == T$TArg;
axiom(forall  $T: Ref:: {  $Subtype(T$TArg(), $T) } $Subtype(T$TArg(), $T) <==> (T$TArg() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass36_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass38_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass40_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass42_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__43`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__45`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass46_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(TBlockStartAction : Ref,TBlockAction : Ref,TNodeAction : Ref,TNodeStateData : Ref,TNode : Ref,TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6 : int;
axiom(forall TBlockStartAction : Ref,TBlockAction : Ref,TNodeAction : Ref,TNodeStateData : Ref,TNode : Ref,TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(T$TBlockStartAction(),T$TBlockAction(),T$TNodeAction(),T$TNodeStateData(),T$TNode(),T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(T$TBlockStartAction(),T$TBlockAction(),T$TNodeAction(),T$TNodeStateData(),T$TNode(),T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(T$TBlockStartAction(),T$TBlockAction(),T$TNodeAction(),T$TNodeStateData(),T$TNode(),T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6;
axiom(forall TBlockStartAction : Ref,TBlockAction : Ref,TNodeAction : Ref,TNodeStateData : Ref,TNode : Ref,TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass47_0`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));








function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(TBlockStartAction : Ref,TBlockAction : Ref,TNodeAction : Ref,TNodeStateData : Ref,TNode : Ref,TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6 : int;
axiom(forall TBlockStartAction : Ref,TBlockAction : Ref,TNodeAction : Ref,TNodeStateData : Ref,TNode : Ref,TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(T$TBlockStartAction(),T$TBlockAction(),T$TNodeAction(),T$TNodeStateData(),T$TNode(),T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(T$TBlockStartAction(),T$TBlockAction(),T$TNodeAction(),T$TNodeStateData(),T$TNode(),T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(T$TBlockStartAction(),T$TBlockAction(),T$TNodeAction(),T$TNodeStateData(),T$TNode(),T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6;
axiom(forall TBlockStartAction : Ref,TBlockAction : Ref,TNodeAction : Ref,TNodeStateData : Ref,TNode : Ref,TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__47`6(TBlockStartAction,TBlockAction,TNodeAction,TNodeStateData,TNode,TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));








function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(TBlockAction : Ref,TNodeStateData : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2 : int;
axiom(forall TBlockAction : Ref,TNodeStateData : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(TBlockAction,TNodeStateData), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(T$TBlockAction(),T$TNodeStateData())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(TBlockAction,TNodeStateData), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(T$TBlockAction(),T$TNodeStateData())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(T$TBlockAction(),T$TNodeStateData())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2;
axiom(forall TBlockAction : Ref,TNodeStateData : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(TBlockAction,TNodeStateData), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(TBlockAction,TNodeStateData), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__48`2(TBlockAction,TNodeStateData) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__49`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(TLanguageKindEnum : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1 : int;
axiom(forall TLanguageKindEnum : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(T$TLanguageKindEnum())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(TLanguageKindEnum), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(T$TLanguageKindEnum())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(T$TLanguageKindEnum())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1;
axiom(forall TLanguageKindEnum : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(TLanguageKindEnum), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(TLanguageKindEnum), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass51_0`1(TLanguageKindEnum) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass56_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(TArg : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1 : int;
axiom(forall TArg : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(TArg), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(T$TArg())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(TArg), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(T$TArg())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(T$TArg())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1;
axiom(forall TArg : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(TArg), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(TArg), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass61_0`1(TArg) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass71_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass72_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.$$c__DisplayClass75_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference()) == T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1 : int;
axiom(forall TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(TValue), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(TValue), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(T$TValue())) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1;
axiom(forall TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(TValue), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1(TValue) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope()) == T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.HostOperationBlockStartAnalysisScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisResult() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers()) == T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TContext() : Ref;
const unique T$TContext : int;
axiom $TypeConstructor(T$TContext()) == T$TContext;
axiom(forall  $T: Ref:: {  $Subtype(T$TContext(), $T) } $Subtype(T$TContext(), $T) <==> (T$TContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));









function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1 : int;
axiom(forall TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(TValue), T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(TValue), T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(T$TValue())) == T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1;
axiom(forall TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(TValue), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1(TValue) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags()) == T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.GeneratedCodeAnalysisFlags() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TAnalysisEntity() : Ref;
const unique T$TAnalysisEntity : int;
axiom $TypeConstructor(T$TAnalysisEntity()) == T$TAnalysisEntity;
axiom(forall  $T: Ref:: {  $Subtype(T$TAnalysisEntity(), $T) } $Subtype(T$TAnalysisEntity(), $T) <==> (T$TAnalysisEntity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TAnalyzerStateData() : Ref;
const unique T$TAnalyzerStateData : int;
axiom $TypeConstructor(T$TAnalyzerStateData()) == T$TAnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$TAnalyzerStateData(), $T) } $Subtype(T$TAnalyzerStateData(), $T) <==> (T$TAnalyzerStateData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));













function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.PerAnalyzerState.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.StateKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.DeclarationAnalyzerStateData() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(TBlockAction : Ref,TNodeStateData : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2 : int;
axiom(forall TBlockAction : Ref,TNodeStateData : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(TBlockAction,TNodeStateData), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(T$TBlockAction(),T$TNodeStateData())) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(TBlockAction,TNodeStateData), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(T$TBlockAction(),T$TNodeStateData())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(T$TBlockAction(),T$TNodeStateData())) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2;
axiom(forall TBlockAction : Ref,TNodeStateData : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(TBlockAction,TNodeStateData), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(TBlockAction,TNodeStateData), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(TBlockAction,TNodeStateData) == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.AnalyzerStateData(), $T)));




function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.CodeBlockAnalyzerStateData() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction(),T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.SyntaxNodeAnalyzerStateData()), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationBlockAnalyzerStateData() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.BlockAnalyzerStateData`2(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction(),T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData()), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GenerateSimulatedCompilationEventsAsync$d__19() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$OnCompilationEventsGeneratedAsync$d__24() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$EnsureAnalyzerActionCountsInitializedAsync$d__31() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalysisState.$GetOrComputeAnalyzerActionCountsAsync$d__32() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext()) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOperationBlockStartAnalysisContext() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalysisContext(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction()) == T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction(), $T)));


function T$Microsoft.CodeAnalysis.CryptographicHashProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.CryptographicHashProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CryptographicHashProvider()) == T$Microsoft.CodeAnalysis.CryptographicHashProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CryptographicHashProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CryptographicHashProvider(), $T) <==> (T$Microsoft.CodeAnalysis.CryptographicHashProvider() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions()) == T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SwitchConstantValueHelper() : Ref;
const unique T$Microsoft.CodeAnalysis.SwitchConstantValueHelper : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SwitchConstantValueHelper()) == T$Microsoft.CodeAnalysis.SwitchConstantValueHelper;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SwitchConstantValueHelper(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SwitchConstantValueHelper(), $T) <==> (T$Microsoft.CodeAnalysis.SwitchConstantValueHelper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer()) == T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer(), $T) <==> (T$Microsoft.CodeAnalysis.SwitchConstantValueHelper.SwitchLabelsComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LocalSlotConstraints() : Ref;
const unique T$Microsoft.CodeAnalysis.LocalSlotConstraints : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocalSlotConstraints()) == T$Microsoft.CodeAnalysis.LocalSlotConstraints;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocalSlotConstraints(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocalSlotConstraints(), $T) <==> (T$Microsoft.CodeAnalysis.LocalSlotConstraints() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.RelativePathResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.RelativePathResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RelativePathResolver()) == T$Microsoft.CodeAnalysis.RelativePathResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RelativePathResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RelativePathResolver(), $T) <==> (T$Microsoft.CodeAnalysis.RelativePathResolver() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EnumerableExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.EnumerableExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EnumerableExtensions()) == T$Microsoft.CodeAnalysis.EnumerableExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EnumerableExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EnumerableExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.EnumerableExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$V() : Ref;
const unique T$V : int;
axiom $TypeConstructor(T$V()) == T$V;
axiom(forall  $T: Ref:: {  $Subtype(T$V(), $T) } $Subtype(T$V(), $T) <==> (T$V() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));










function T$TSource() : Ref;
const unique T$TSource : int;
axiom $TypeConstructor(T$TSource()) == T$TSource;
axiom(forall  $T: Ref:: {  $Subtype(T$TSource(), $T) } $Subtype(T$TSource(), $T) <==> (T$TSource() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T), T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T), T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T$T())) == T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T), $T) <==> (T$Microsoft.CodeAnalysis.EnumerableExtensions.$TransposeInternal$d__3`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.RequiredLanguageVersion() : Ref;
const unique T$Microsoft.CodeAnalysis.RequiredLanguageVersion : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RequiredLanguageVersion()) == T$Microsoft.CodeAnalysis.RequiredLanguageVersion;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RequiredLanguageVersion(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RequiredLanguageVersion(), $T) <==> (T$Microsoft.CodeAnalysis.RequiredLanguageVersion() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T)));


function T$Microsoft.CodeAnalysis.ITypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ITypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ITypeSymbol()) == T$Microsoft.CodeAnalysis.ITypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ITypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(TNamedTypeSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1 : int;
axiom(forall TNamedTypeSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(TNamedTypeSymbol), T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(T$TNamedTypeSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(TNamedTypeSymbol), T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(T$TNamedTypeSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(T$TNamedTypeSymbol())) == T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1;
axiom(forall TNamedTypeSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(TNamedTypeSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(TNamedTypeSymbol), $T) <==> (T$Microsoft.CodeAnalysis.CommonAssemblyWellKnownAttributeData`1(TNamedTypeSymbol) == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISecurityAttributeTarget(), $T)));


function T$TNamedTypeSymbol() : Ref;
const unique T$TNamedTypeSymbol : int;
axiom $TypeConstructor(T$TNamedTypeSymbol()) == T$TNamedTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TNamedTypeSymbol(), $T) } $Subtype(T$TNamedTypeSymbol(), $T) <==> (T$TNamedTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StrongNameProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.StrongNameProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StrongNameProvider()) == T$Microsoft.CodeAnalysis.StrongNameProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StrongNameProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StrongNameProvider(), $T) <==> (T$Microsoft.CodeAnalysis.StrongNameProvider() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LocalizableResourceString() : Ref;
const unique T$Microsoft.CodeAnalysis.LocalizableResourceString : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocalizableResourceString()) == T$Microsoft.CodeAnalysis.LocalizableResourceString;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocalizableResourceString(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocalizableResourceString(), $T) <==> (T$Microsoft.CodeAnalysis.LocalizableResourceString() == $T || $Subtype(T$Microsoft.CodeAnalysis.LocalizableString(), $T)|| $Subtype(T$Roslyn.Utilities.IObjectWritable(), $T)));


function T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c()) == T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.LocalizableResourceString.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolKind() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolKind()) == T$Microsoft.CodeAnalysis.SymbolKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolKind(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ILocalSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ILocalSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ILocalSymbol()) == T$Microsoft.CodeAnalysis.ILocalSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ILocalSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ILocalSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ILocalSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ModuleMetadata() : Ref;
const unique T$Microsoft.CodeAnalysis.ModuleMetadata : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ModuleMetadata()) == T$Microsoft.CodeAnalysis.ModuleMetadata;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ModuleMetadata(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ModuleMetadata(), $T) <==> (T$Microsoft.CodeAnalysis.ModuleMetadata() == $T || $Subtype(T$Microsoft.CodeAnalysis.Metadata(), $T)));


function T$Microsoft.CodeAnalysis.MetadataId() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataId : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataId()) == T$Microsoft.CodeAnalysis.MetadataId;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataId(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataId(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataId() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TreeDumper() : Ref;
const unique T$Microsoft.CodeAnalysis.TreeDumper : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TreeDumper()) == T$Microsoft.CodeAnalysis.TreeDumper;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TreeDumper(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TreeDumper(), $T) <==> (T$Microsoft.CodeAnalysis.TreeDumper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TreeDumper.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.TreeDumper.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TreeDumper.$$c()) == T$Microsoft.CodeAnalysis.TreeDumper.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TreeDumper.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TreeDumper.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.TreeDumper.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxRemoveOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxRemoveOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxRemoveOptions()) == T$Microsoft.CodeAnalysis.SyntaxRemoveOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxRemoveOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxRemoveOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxRemoveOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle()) == T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.NamespaceKind() : Ref;
const unique T$Microsoft.CodeAnalysis.NamespaceKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.NamespaceKind()) == T$Microsoft.CodeAnalysis.NamespaceKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.NamespaceKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.NamespaceKind(), $T) <==> (T$Microsoft.CodeAnalysis.NamespaceKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonTypeEarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.CachingFactory`2(TKey : Ref,TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CachingFactory`2 : int;
axiom(forall TKey : Ref,TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2(TKey,TValue), T$Microsoft.CodeAnalysis.CachingFactory`2(T$TKey(),T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2(TKey,TValue), T$Microsoft.CodeAnalysis.CachingFactory`2(T$TKey(),T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CachingFactory`2(T$TKey(),T$TValue())) == T$Microsoft.CodeAnalysis.CachingFactory`2;
axiom(forall TKey : Ref,TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2(TKey,TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2(TKey,TValue), $T) <==> (T$Microsoft.CodeAnalysis.CachingFactory`2(TKey,TValue) == $T || $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(T$Microsoft.CodeAnalysis.CachingFactory`2.Entry()), $T)));




function T$Microsoft.CodeAnalysis.CachingFactory`2.Entry() : Ref;
const unique T$Microsoft.CodeAnalysis.CachingFactory`2.Entry : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CachingFactory`2.Entry()) == T$Microsoft.CodeAnalysis.CachingFactory`2.Entry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2.Entry(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2.Entry(), $T) <==> (T$Microsoft.CodeAnalysis.CachingFactory`2.Entry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(TSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1 : int;
axiom(forall TSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(TSymbol), T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(T$TSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(TSymbol), T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(T$TSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(T$TSymbol())) == T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1;
axiom(forall TSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(TSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(TSymbol), $T) <==> (T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1(TSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TSymbol() : Ref;
const unique T$TSymbol : int;
axiom $TypeConstructor(T$TSymbol()) == T$TSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TSymbol(), $T) } $Subtype(T$TSymbol(), $T) <==> (T$TSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator()) == T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator(), $T) <==> (T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.ArityEnumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable() : Ref;
const unique T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable()) == T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable(), $T) <==> (T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities() : Ref;
const unique T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities()) == T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities(), $T) <==> (T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.UniqueSymbolOrArities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo`1.IArityEnumerable(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticBag() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticBag : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticBag()) == T$Microsoft.CodeAnalysis.DiagnosticBag;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticBag() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TDiagnostic() : Ref;
const unique T$TDiagnostic : int;
axiom $TypeConstructor(T$TDiagnostic()) == T$TDiagnostic;
axiom(forall  $T: Ref:: {  $Subtype(T$TDiagnostic(), $T) } $Subtype(T$TDiagnostic(), $T) <==> (T$TDiagnostic() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy()) == T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticBag.DebuggerProxy() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16()) == T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticBag.$AsEnumerableFiltered$d__16() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticBag.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticBag.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticBag.$$c()) == T$Microsoft.CodeAnalysis.DiagnosticBag.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticBag.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticBag.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T), T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T), T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T$T())) == T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T), $T) <==> (T$Microsoft.CodeAnalysis.SecurityWellKnownAttributeData.$GetSecurityAttributes$d__4`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.GreenNodeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.GreenNodeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.GreenNodeExtensions()) == T$Microsoft.CodeAnalysis.GreenNodeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.GreenNodeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.GreenNodeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.GreenNodeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));







function T$Microsoft.CodeAnalysis.TypeCompareKind() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeCompareKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeCompareKind()) == T$Microsoft.CodeAnalysis.TypeCompareKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeCompareKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeCompareKind(), $T) <==> (T$Microsoft.CodeAnalysis.TypeCompareKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ISymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISymbol()) == T$Microsoft.CodeAnalysis.ISymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ISymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.UnifiedAssembly`1(TAssemblySymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.UnifiedAssembly`1 : int;
axiom(forall TAssemblySymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.UnifiedAssembly`1(TAssemblySymbol), T$Microsoft.CodeAnalysis.UnifiedAssembly`1(T$TAssemblySymbol())) } $Subtype(T$Microsoft.CodeAnalysis.UnifiedAssembly`1(TAssemblySymbol), T$Microsoft.CodeAnalysis.UnifiedAssembly`1(T$TAssemblySymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.UnifiedAssembly`1(T$TAssemblySymbol())) == T$Microsoft.CodeAnalysis.UnifiedAssembly`1;
axiom(forall TAssemblySymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.UnifiedAssembly`1(TAssemblySymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.UnifiedAssembly`1(TAssemblySymbol), $T) <==> (T$Microsoft.CodeAnalysis.UnifiedAssembly`1(TAssemblySymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TAssemblySymbol() : Ref;
const unique T$TAssemblySymbol : int;
axiom $TypeConstructor(T$TAssemblySymbol()) == T$TAssemblySymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TAssemblySymbol(), $T) } $Subtype(T$TAssemblySymbol(), $T) <==> (T$TAssemblySymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonMessageProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonMessageProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonMessageProvider()) == T$Microsoft.CodeAnalysis.CommonMessageProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonMessageProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonMessageProvider(), $T) <==> (T$Microsoft.CodeAnalysis.CommonMessageProvider() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PortableExecutableReference() : Ref;
const unique T$Microsoft.CodeAnalysis.PortableExecutableReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PortableExecutableReference()) == T$Microsoft.CodeAnalysis.PortableExecutableReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PortableExecutableReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PortableExecutableReference(), $T) <==> (T$Microsoft.CodeAnalysis.PortableExecutableReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.MetadataReference(), $T)));


function T$Microsoft.CodeAnalysis.RuleSet() : Ref;
const unique T$Microsoft.CodeAnalysis.RuleSet : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RuleSet()) == T$Microsoft.CodeAnalysis.RuleSet;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RuleSet(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RuleSet(), $T) <==> (T$Microsoft.CodeAnalysis.RuleSet() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeAnalysisResources() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeAnalysisResources : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeAnalysisResources()) == T$Microsoft.CodeAnalysis.CodeAnalysisResources;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeAnalysisResources(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeAnalysisResources(), $T) <==> (T$Microsoft.CodeAnalysis.CodeAnalysisResources() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.FatalError() : Ref;
const unique T$Microsoft.CodeAnalysis.FatalError : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.FatalError()) == T$Microsoft.CodeAnalysis.FatalError;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.FatalError(), $T) } $Subtype(T$Microsoft.CodeAnalysis.FatalError(), $T) <==> (T$Microsoft.CodeAnalysis.FatalError() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonParameterEarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList()) == T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator()) == T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IMethodSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IMethodSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IMethodSymbol()) == T$Microsoft.CodeAnalysis.IMethodSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IMethodSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IMethodSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IMethodSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeOrToken() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeOrToken : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeOrToken()) == T$Microsoft.CodeAnalysis.SyntaxNodeOrToken;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrToken(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeOrToken(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeOrToken() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TDirective() : Ref;
const unique T$TDirective : int;
axiom $TypeConstructor(T$TDirective()) == T$TDirective;
axiom(forall  $T: Ref:: {  $Subtype(T$TDirective(), $T) } $Subtype(T$TDirective(), $T) <==> (T$TDirective() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Microsoft.CodeAnalysis.CompilationReference() : Ref;
const unique T$Microsoft.CodeAnalysis.CompilationReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CompilationReference()) == T$Microsoft.CodeAnalysis.CompilationReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CompilationReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CompilationReference(), $T) <==> (T$Microsoft.CodeAnalysis.CompilationReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.MetadataReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownTypes() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownTypes : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownTypes()) == T$Microsoft.CodeAnalysis.WellKnownTypes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownTypes(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownTypes(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownTypes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SourceCodeKind() : Ref;
const unique T$Microsoft.CodeAnalysis.SourceCodeKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SourceCodeKind()) == T$Microsoft.CodeAnalysis.SourceCodeKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SourceCodeKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SourceCodeKind(), $T) <==> (T$Microsoft.CodeAnalysis.SourceCodeKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataHelpers() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataHelpers : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataHelpers()) == T$Microsoft.CodeAnalysis.MetadataHelpers;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataHelpers() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName()) == T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataHelpers.AssemblyQualifiedTypeName() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder()) == T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataHelpers.SerializedTypeDecoder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataHelpers.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataHelpers.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataHelpers.$$c()) == T$Microsoft.CodeAnalysis.MetadataHelpers.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataHelpers.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataHelpers.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineArguments() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineArguments : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineArguments()) == T$Microsoft.CodeAnalysis.CommandLineArguments;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineArguments(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineArguments(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineArguments() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177()) == T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineArguments.$ResolveAnalyzerReferences$d__177() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0()) == T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineArguments.$$c__DisplayClass178_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2(TCompilation : Ref,TAssemblySymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2 : int;
axiom(forall TCompilation : Ref,TAssemblySymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2(TCompilation,TAssemblySymbol), T$Microsoft.CodeAnalysis.CommonReferenceManager`2(T$TCompilation(),T$TAssemblySymbol())) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2(TCompilation,TAssemblySymbol), T$Microsoft.CodeAnalysis.CommonReferenceManager`2(T$TCompilation(),T$TAssemblySymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2(T$TCompilation(),T$TAssemblySymbol())) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2;
axiom(forall TCompilation : Ref,TAssemblySymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2(TCompilation,TAssemblySymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2(TCompilation,TAssemblySymbol), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2(TCompilation,TAssemblySymbol) == $T || $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager(), $T)));


function T$TCompilation() : Ref;
const unique T$TCompilation : int;
axiom $TypeConstructor(T$TCompilation()) == T$TCompilation;
axiom(forall  $T: Ref:: {  $Subtype(T$TCompilation(), $T) } $Subtype(T$TCompilation(), $T) <==> (T$TCompilation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyDataForAssemblyBeingBuilt() == $T || $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyData(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceBinding() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.AssemblyReferenceCandidate() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.BoundInputAssembly() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolvedReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.ReferencedAssemblyIdentity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.MetadataReferenceEqualityComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetReferencedAssemblyAliases$d__107() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109()) == T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReferenceManager`2.$GetImplicitlyResolvedAssemblyReferences$d__109() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EnumConstantHelper() : Ref;
const unique T$Microsoft.CodeAnalysis.EnumConstantHelper : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EnumConstantHelper()) == T$Microsoft.CodeAnalysis.EnumConstantHelper;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EnumConstantHelper(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EnumConstantHelper(), $T) <==> (T$Microsoft.CodeAnalysis.EnumConstantHelper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed.ReversedEnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c()) == T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTriviaList.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayParameterOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ScriptCompilationInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.ScriptCompilationInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ScriptCompilationInfo()) == T$Microsoft.CodeAnalysis.ScriptCompilationInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ScriptCompilationInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ScriptCompilationInfo(), $T) <==> (T$Microsoft.CodeAnalysis.ScriptCompilationInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownAttributeData()) == T$Microsoft.CodeAnalysis.WellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ModuleCompilationState`2(TNamedTypeSymbol : Ref,TMethodSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ModuleCompilationState`2 : int;
axiom(forall TNamedTypeSymbol : Ref,TMethodSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ModuleCompilationState`2(TNamedTypeSymbol,TMethodSymbol), T$Microsoft.CodeAnalysis.ModuleCompilationState`2(T$TNamedTypeSymbol(),T$TMethodSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.ModuleCompilationState`2(TNamedTypeSymbol,TMethodSymbol), T$Microsoft.CodeAnalysis.ModuleCompilationState`2(T$TNamedTypeSymbol(),T$TMethodSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ModuleCompilationState`2(T$TNamedTypeSymbol(),T$TMethodSymbol())) == T$Microsoft.CodeAnalysis.ModuleCompilationState`2;
axiom(forall TNamedTypeSymbol : Ref,TMethodSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ModuleCompilationState`2(TNamedTypeSymbol,TMethodSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.ModuleCompilationState`2(TNamedTypeSymbol,TMethodSymbol), $T) <==> (T$Microsoft.CodeAnalysis.ModuleCompilationState`2(TNamedTypeSymbol,TMethodSymbol) == $T || $Subtype(T$Microsoft.CodeAnalysis.CommonModuleCompilationState(), $T)));



function T$TMethodSymbol() : Ref;
const unique T$TMethodSymbol : int;
axiom $TypeConstructor(T$TMethodSymbol()) == T$TMethodSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TMethodSymbol(), $T) } $Subtype(T$TMethodSymbol(), $T) <==> (T$TMethodSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TypeParameterKind() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeParameterKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeParameterKind()) == T$Microsoft.CodeAnalysis.TypeParameterKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeParameterKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeParameterKind(), $T) <==> (T$Microsoft.CodeAnalysis.TypeParameterKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DeclarationInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.DeclarationInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DeclarationInfo()) == T$Microsoft.CodeAnalysis.DeclarationInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DeclarationInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DeclarationInfo(), $T) <==> (T$Microsoft.CodeAnalysis.DeclarationInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MethodKind() : Ref;
const unique T$Microsoft.CodeAnalysis.MethodKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MethodKind()) == T$Microsoft.CodeAnalysis.MethodKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MethodKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MethodKind(), $T) <==> (T$Microsoft.CodeAnalysis.MethodKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol()) == T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ISynthesizedMethodBodyImplementationSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataLocation() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataLocation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataLocation()) == T$Microsoft.CodeAnalysis.MetadataLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataLocation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataLocation(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataLocation() == $T || $Subtype(T$Microsoft.CodeAnalysis.Location(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyVersion() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyVersion : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyVersion()) == T$Microsoft.CodeAnalysis.AssemblyVersion;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyVersion(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyVersion(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyVersion() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TouchedFileLogger() : Ref;
const unique T$Microsoft.CodeAnalysis.TouchedFileLogger : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TouchedFileLogger()) == T$Microsoft.CodeAnalysis.TouchedFileLogger;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TouchedFileLogger(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TouchedFileLogger(), $T) <==> (T$Microsoft.CodeAnalysis.TouchedFileLogger() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope()) == T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind()) == T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.ImportTargetKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo()) == T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.TupleElementNamesInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoRecord() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind()) == T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.VBImportScopeKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds()) == T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.PortableCustomDebugInfoKinds() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.$GetCustomDebugInfoRecords$d__3() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo()) == T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.DynamicLocalInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c()) == T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonTypeWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISecurityAttributeTarget(), $T)));


function T$Microsoft.CodeAnalysis.TypedConstantValue() : Ref;
const unique T$Microsoft.CodeAnalysis.TypedConstantValue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypedConstantValue()) == T$Microsoft.CodeAnalysis.TypedConstantValue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypedConstantValue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypedConstantValue(), $T) <==> (T$Microsoft.CodeAnalysis.TypedConstantValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownMemberNames() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownMemberNames : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownMemberNames()) == T$Microsoft.CodeAnalysis.WellKnownMemberNames;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownMemberNames(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownMemberNames(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownMemberNames() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineSourceFile() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineSourceFile : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineSourceFile()) == T$Microsoft.CodeAnalysis.CommandLineSourceFile;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineSourceFile(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineSourceFile(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineSourceFile() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler()) == T$Microsoft.CodeAnalysis.CommonCompiler;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider()) == T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.CompilerEmitStreamProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver()) == T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver() == $T || $Subtype(T$Microsoft.CodeAnalysis.MetadataReferenceResolver(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c()) == T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.ExistingReferencesResolver.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver()) == T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.LoggingMetadataFileReferenceResolver() == $T || $Subtype(T$Microsoft.CodeAnalysis.MetadataReferenceResolver(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver()) == T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.LoggingSourceFileResolver() == $T || $Subtype(T$Microsoft.CodeAnalysis.SourceFileResolver(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider()) == T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.LoggingStrongNameProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.DesktopStrongNameProvider(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver()) == T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.LoggingXmlFileResolver() == $T || $Subtype(T$Microsoft.CodeAnalysis.XmlFileResolver(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.$$c()) == T$Microsoft.CodeAnalysis.CommonCompiler.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0()) == T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass53_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0()) == T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0(), $T) <==> (T$Microsoft.CodeAnalysis.CommonCompiler.$$c__DisplayClass56_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LineDirectiveMap`1(TDirective : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.LineDirectiveMap`1 : int;
axiom(forall TDirective : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1(TDirective), T$Microsoft.CodeAnalysis.LineDirectiveMap`1(T$TDirective())) } $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1(TDirective), T$Microsoft.CodeAnalysis.LineDirectiveMap`1(T$TDirective())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LineDirectiveMap`1(T$TDirective())) == T$Microsoft.CodeAnalysis.LineDirectiveMap`1;
axiom(forall TDirective : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1(TDirective), $T) } $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1(TDirective), $T) <==> (T$Microsoft.CodeAnalysis.LineDirectiveMap`1(TDirective) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState() : Ref;
const unique T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState()) == T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState(), $T) <==> (T$Microsoft.CodeAnalysis.LineDirectiveMap`1.PositionState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry() : Ref;
const unique T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry()) == T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry(), $T) <==> (T$Microsoft.CodeAnalysis.LineDirectiveMap`1.LineMappingEntry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c()) == T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.LineDirectiveMap`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ArrayBuilderExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ArrayBuilderExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ArrayBuilderExtensions()) == T$Microsoft.CodeAnalysis.ArrayBuilderExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilderExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ArrayBuilderExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ArrayBuilderExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$TItem() : Ref;
const unique T$TItem : int;
axiom $TypeConstructor(T$TItem()) == T$TItem;
axiom(forall  $T: Ref:: {  $Subtype(T$TItem(), $T) } $Subtype(T$TItem(), $T) <==> (T$TItem() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));













function T$Microsoft.CodeAnalysis.Text.LinePosition() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.LinePosition : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.LinePosition()) == T$Microsoft.CodeAnalysis.Text.LinePosition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.LinePosition(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.LinePosition(), $T) <==> (T$Microsoft.CodeAnalysis.Text.LinePosition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.StringBuilderText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.StringBuilderText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.StringBuilderText()) == T$Microsoft.CodeAnalysis.Text.StringBuilderText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.StringBuilderText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.StringBuilderText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.StringBuilderText() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextLineCollection() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextLineCollection : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextLineCollection()) == T$Microsoft.CodeAnalysis.Text.TextLineCollection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextLineCollection(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextLineCollection(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextLineCollection() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator()) == T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm()) == T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceTextComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceTextComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceTextComparer()) == T$Microsoft.CodeAnalysis.Text.SourceTextComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextComparer(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceTextComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.CompositeText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.CompositeText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.CompositeText()) == T$Microsoft.CodeAnalysis.Text.CompositeText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.CompositeText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.CompositeText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.CompositeText() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T)));


function T$Microsoft.CodeAnalysis.Text.CompositeText.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.CompositeText.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.CompositeText.$$c()) == T$Microsoft.CodeAnalysis.Text.CompositeText.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.CompositeText.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.CompositeText.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Text.CompositeText.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.LargeTextWriter() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.LargeTextWriter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.LargeTextWriter()) == T$Microsoft.CodeAnalysis.Text.LargeTextWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.LargeTextWriter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.LargeTextWriter(), $T) <==> (T$Microsoft.CodeAnalysis.Text.LargeTextWriter() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextWriter(), $T)));


function T$Microsoft.CodeAnalysis.Text.LargeText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.LargeText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.LargeText()) == T$Microsoft.CodeAnalysis.Text.LargeText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.LargeText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.LargeText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.LargeText() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextSpan() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextSpan : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextSpan()) == T$Microsoft.CodeAnalysis.Text.TextSpan;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextSpan(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextSpan(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextSpan() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextChange() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextChange : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextChange()) == T$Microsoft.CodeAnalysis.Text.TextChange;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextChange(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextChange(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextChange() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs()) == T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextChangeEventArgs() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.LinePositionSpan() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.LinePositionSpan : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.LinePositionSpan()) == T$Microsoft.CodeAnalysis.Text.LinePositionSpan;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.LinePositionSpan(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.LinePositionSpan(), $T) <==> (T$Microsoft.CodeAnalysis.Text.LinePositionSpan() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.StringTextWriter() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.StringTextWriter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.StringTextWriter()) == T$Microsoft.CodeAnalysis.Text.StringTextWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.StringTextWriter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.StringTextWriter(), $T) <==> (T$Microsoft.CodeAnalysis.Text.StringTextWriter() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextWriter(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextLine() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextLine : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextLine()) == T$Microsoft.CodeAnalysis.Text.TextLine;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextLine(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextLine(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextLine() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.ChangedText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.ChangedText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.ChangedText()) == T$Microsoft.CodeAnalysis.Text.ChangedText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.ChangedText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.ChangedText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.ChangedText() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T)));


function T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo()) == T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Text.ChangedText.ChangeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceTextContainer() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceTextContainer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceTextContainer()) == T$Microsoft.CodeAnalysis.Text.SourceTextContainer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextContainer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextContainer(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceTextContainer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SubText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SubText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SubText()) == T$Microsoft.CodeAnalysis.Text.SubText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SubText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SubText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SubText() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceTextStream() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceTextStream : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceTextStream()) == T$Microsoft.CodeAnalysis.Text.SourceTextStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextStream(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextStream(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceTextStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.StringText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.StringText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.StringText()) == T$Microsoft.CodeAnalysis.Text.StringText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.StringText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.StringText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.StringText() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextUtilities() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextUtilities : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextUtilities()) == T$Microsoft.CodeAnalysis.Text.TextUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextUtilities(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextUtilities(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceText()) == T$Microsoft.CodeAnalysis.Text.SourceText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceText() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo()) == T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceText.LineInfo() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.TextLineCollection(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer()) == T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceText.StaticContainer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextContainer(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0()) == T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceText.$$c__DisplayClass65_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceText.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceText.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceText.$$c()) == T$Microsoft.CodeAnalysis.Text.SourceText.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceText.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceText.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.EncodedStringText() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.EncodedStringText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.EncodedStringText()) == T$Microsoft.CodeAnalysis.Text.EncodedStringText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.EncodedStringText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.EncodedStringText(), $T) <==> (T$Microsoft.CodeAnalysis.Text.EncodedStringText() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.TextChangeRange() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.TextChangeRange : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.TextChangeRange()) == T$Microsoft.CodeAnalysis.Text.TextChangeRange;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.TextChangeRange(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.TextChangeRange(), $T) <==> (T$Microsoft.CodeAnalysis.Text.TextChangeRange() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Text.SourceTextWriter() : Ref;
const unique T$Microsoft.CodeAnalysis.Text.SourceTextWriter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Text.SourceTextWriter()) == T$Microsoft.CodeAnalysis.Text.SourceTextWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextWriter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Text.SourceTextWriter(), $T) <==> (T$Microsoft.CodeAnalysis.Text.SourceTextWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayExtensions()) == T$Microsoft.CodeAnalysis.SymbolDisplayExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxWalker() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxWalker : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxWalker()) == T$Microsoft.CodeAnalysis.SyntaxWalker;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxWalker(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxWalker(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxWalker() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IAssemblySymbolInternal() : Ref;
const unique T$Microsoft.CodeAnalysis.IAssemblySymbolInternal : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IAssemblySymbolInternal()) == T$Microsoft.CodeAnalysis.IAssemblySymbolInternal;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbolInternal(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbolInternal(), $T) <==> (T$Microsoft.CodeAnalysis.IAssemblySymbolInternal() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxReference() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxReference()) == T$Microsoft.CodeAnalysis.SyntaxReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxReference(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Accessibility() : Ref;
const unique T$Microsoft.CodeAnalysis.Accessibility : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Accessibility()) == T$Microsoft.CodeAnalysis.Accessibility;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Accessibility(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Accessibility(), $T) <==> (T$Microsoft.CodeAnalysis.Accessibility() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LoadDirective() : Ref;
const unique T$Microsoft.CodeAnalysis.LoadDirective : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LoadDirective()) == T$Microsoft.CodeAnalysis.LoadDirective;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LoadDirective(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LoadDirective(), $T) <==> (T$Microsoft.CodeAnalysis.LoadDirective() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticFormatter() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticFormatter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticFormatter()) == T$Microsoft.CodeAnalysis.DiagnosticFormatter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticFormatter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticFormatter(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticFormatter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RealParser() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser()) == T$Microsoft.CodeAnalysis.RealParser;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RealParser.FloatingPointType() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser.FloatingPointType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser.FloatingPointType()) == T$Microsoft.CodeAnalysis.RealParser.FloatingPointType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatingPointType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatingPointType(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser.FloatingPointType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType()) == T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser.FloatFloatingPointType() == $T || $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatingPointType(), $T)));


function T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType()) == T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser.DoubleFloatingPointType() == $T || $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatingPointType(), $T)));


function T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString()) == T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser.DecimalFloatingPointString() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RealParser.Status() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser.Status : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser.Status()) == T$Microsoft.CodeAnalysis.RealParser.Status;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser.Status(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser.Status(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser.Status() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RealParser.FloatUnion() : Ref;
const unique T$Microsoft.CodeAnalysis.RealParser.FloatUnion : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RealParser.FloatUnion()) == T$Microsoft.CodeAnalysis.RealParser.FloatUnion;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatUnion(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RealParser.FloatUnion(), $T) <==> (T$Microsoft.CodeAnalysis.RealParser.FloatUnion() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolFilter() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolFilter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolFilter()) == T$Microsoft.CodeAnalysis.SymbolFilter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolFilter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolFilter(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolFilter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TreeDumperNode() : Ref;
const unique T$Microsoft.CodeAnalysis.TreeDumperNode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TreeDumperNode()) == T$Microsoft.CodeAnalysis.TreeDumperNode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode(), $T) <==> (T$Microsoft.CodeAnalysis.TreeDumperNode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0() : Ref;
const unique T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0()) == T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0(), $T) <==> (T$Microsoft.CodeAnalysis.TreeDumperNode.$$c__DisplayClass12_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TreeDumperNode.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.TreeDumperNode.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TreeDumperNode.$$c()) == T$Microsoft.CodeAnalysis.TreeDumperNode.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.TreeDumperNode.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13() : Ref;
const unique T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13()) == T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13(), $T) <==> (T$Microsoft.CodeAnalysis.TreeDumperNode.$PreorderTraversal$d__13() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList()) == T$Microsoft.CodeAnalysis.SyntaxTokenList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator()) == T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed()) == T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator()) == T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList.Reversed.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c()) == T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTokenList.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SourceLocation() : Ref;
const unique T$Microsoft.CodeAnalysis.SourceLocation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SourceLocation()) == T$Microsoft.CodeAnalysis.SourceLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SourceLocation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SourceLocation(), $T) <==> (T$Microsoft.CodeAnalysis.SourceLocation() == $T || $Subtype(T$Microsoft.CodeAnalysis.Location(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonFieldWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget(), $T)));


function T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonPropertyEarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.XmlReferenceResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlReferenceResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlReferenceResolver()) == T$Microsoft.CodeAnalysis.XmlReferenceResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlReferenceResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlReferenceResolver(), $T) <==> (T$Microsoft.CodeAnalysis.XmlReferenceResolver() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SourceReferenceResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.SourceReferenceResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SourceReferenceResolver()) == T$Microsoft.CodeAnalysis.SourceReferenceResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SourceReferenceResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SourceReferenceResolver(), $T) <==> (T$Microsoft.CodeAnalysis.SourceReferenceResolver() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineReference() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineReference()) == T$Microsoft.CodeAnalysis.CommandLineReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineReference(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISymbolExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ISymbolExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISymbolExtensions()) == T$Microsoft.CodeAnalysis.ISymbolExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISymbolExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISymbolExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ISymbolExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayCompilerInternalOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TypeAttributesExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeAttributesExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeAttributesExtensions()) == T$Microsoft.CodeAnalysis.TypeAttributesExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeAttributesExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeAttributesExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.TypeAttributesExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownMember() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownMember : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownMember()) == T$Microsoft.CodeAnalysis.WellKnownMember;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownMember(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownMember(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownMember() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentityUtils() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentityUtils : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentityUtils()) == T$Microsoft.CodeAnalysis.AssemblyIdentityUtils;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityUtils(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityUtils(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentityUtils() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ConcurrentCache`2(TKey : Ref,TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ConcurrentCache`2 : int;
axiom(forall TKey : Ref,TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ConcurrentCache`2(TKey,TValue), T$Microsoft.CodeAnalysis.ConcurrentCache`2(T$TKey(),T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.ConcurrentCache`2(TKey,TValue), T$Microsoft.CodeAnalysis.ConcurrentCache`2(T$TKey(),T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConcurrentCache`2(T$TKey(),T$TValue())) == T$Microsoft.CodeAnalysis.ConcurrentCache`2;
axiom(forall TKey : Ref,TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConcurrentCache`2(TKey,TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConcurrentCache`2(TKey,TValue), $T) <==> (T$Microsoft.CodeAnalysis.ConcurrentCache`2(TKey,TValue) == $T || $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry()), $T)));




function T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry() : Ref;
const unique T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry()) == T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry(), $T) <==> (T$Microsoft.CodeAnalysis.ConcurrentCache`2.Entry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayKindOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Metadata() : Ref;
const unique T$Microsoft.CodeAnalysis.Metadata : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Metadata()) == T$Microsoft.CodeAnalysis.Metadata;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Metadata(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Metadata(), $T) <==> (T$Microsoft.CodeAnalysis.Metadata() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CustomModifiersTuple() : Ref;
const unique T$Microsoft.CodeAnalysis.CustomModifiersTuple : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CustomModifiersTuple()) == T$Microsoft.CodeAnalysis.CustomModifiersTuple;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CustomModifiersTuple(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CustomModifiersTuple(), $T) <==> (T$Microsoft.CodeAnalysis.CustomModifiersTuple() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CustomModifier() : Ref;
const unique T$Microsoft.CodeAnalysis.CustomModifier : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CustomModifier()) == T$Microsoft.CodeAnalysis.CustomModifier;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CustomModifier(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CustomModifier(), $T) <==> (T$Microsoft.CodeAnalysis.CustomModifier() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ICustomModifier(), $T)));


function T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager()) == T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager(), $T) <==> (T$Microsoft.CodeAnalysis.CommonSyntaxAndDeclarationManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonMethodEarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.ILabelSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ILabelSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ILabelSymbol()) == T$Microsoft.CodeAnalysis.ILabelSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ILabelSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ILabelSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ILabelSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ModifierInfo`1(TypeSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ModifierInfo`1 : int;
axiom(forall TypeSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ModifierInfo`1(TypeSymbol), T$Microsoft.CodeAnalysis.ModifierInfo`1(T$TypeSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.ModifierInfo`1(TypeSymbol), T$Microsoft.CodeAnalysis.ModifierInfo`1(T$TypeSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ModifierInfo`1(T$TypeSymbol())) == T$Microsoft.CodeAnalysis.ModifierInfo`1;
axiom(forall TypeSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ModifierInfo`1(TypeSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.ModifierInfo`1(TypeSymbol), $T) <==> (T$Microsoft.CodeAnalysis.ModifierInfo`1(TypeSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor()) == T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplay.AbstractSymbolDisplayVisitor() == $T || $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor(), $T)));


function T$Microsoft.CodeAnalysis.OptimizationLevel() : Ref;
const unique T$Microsoft.CodeAnalysis.OptimizationLevel : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.OptimizationLevel()) == T$Microsoft.CodeAnalysis.OptimizationLevel;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.OptimizationLevel(), $T) } $Subtype(T$Microsoft.CodeAnalysis.OptimizationLevel(), $T) <==> (T$Microsoft.CodeAnalysis.OptimizationLevel() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IPointerTypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IPointerTypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IPointerTypeSymbol()) == T$Microsoft.CodeAnalysis.IPointerTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IPointerTypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IPointerTypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IPointerTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser()) == T$Microsoft.CodeAnalysis.CommandLineParser;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34()) == T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$Split$d__34() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0()) == T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$$c__DisplayClass38_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$$c()) == T$Microsoft.CodeAnalysis.CommandLineParser.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39()) == T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$ResolveRelativePaths$d__39() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41()) == T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$ParseFileArgument$d__41() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42()) == T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$ParseSeparatedFileArgument$d__42() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46()) == T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineParser.$ExpandFileNamePattern$d__46() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StackGuard() : Ref;
const unique T$Microsoft.CodeAnalysis.StackGuard : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StackGuard()) == T$Microsoft.CodeAnalysis.StackGuard;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StackGuard(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StackGuard(), $T) <==> (T$Microsoft.CodeAnalysis.StackGuard() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle()) == T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal() : Ref;
const unique T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal()) == T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal(), $T) <==> (T$Microsoft.CodeAnalysis.Symbols.IMethodSymbolInternal() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMethodSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager() : Ref;
const unique T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager()) == T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager(), $T) <==> (T$Microsoft.CodeAnalysis.Symbols.CommonAnonymousTypeManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ErrorLogger() : Ref;
const unique T$Microsoft.CodeAnalysis.ErrorLogger : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ErrorLogger()) == T$Microsoft.CodeAnalysis.ErrorLogger;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ErrorLogger(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ErrorLogger(), $T) <==> (T$Microsoft.CodeAnalysis.ErrorLogger() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CustomAttributesBag`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T), T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T), T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T$T())) == T$Microsoft.CodeAnalysis.CustomAttributesBag`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T), $T) <==> (T$Microsoft.CodeAnalysis.CustomAttributesBag`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart() : Ref;
const unique T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart()) == T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart(), $T) <==> (T$Microsoft.CodeAnalysis.CustomAttributesBag`1.CustomAttributeBagCompletionPart() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxWalkerDepth() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxWalkerDepth : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxWalkerDepth()) == T$Microsoft.CodeAnalysis.SyntaxWalkerDepth;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxWalkerDepth(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxWalkerDepth(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxWalkerDepth() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTrivia() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTrivia : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTrivia()) == T$Microsoft.CodeAnalysis.SyntaxTrivia;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTrivia(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTrivia(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTrivia() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c()) == T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTrivia.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LocationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.LocationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocationKind()) == T$Microsoft.CodeAnalysis.LocationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocationKind(), $T) <==> (T$Microsoft.CodeAnalysis.LocationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SubsystemVersion() : Ref;
const unique T$Microsoft.CodeAnalysis.SubsystemVersion : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SubsystemVersion()) == T$Microsoft.CodeAnalysis.SubsystemVersion;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SubsystemVersion(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SubsystemVersion(), $T) <==> (T$Microsoft.CodeAnalysis.SubsystemVersion() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule()) == T$Microsoft.CodeAnalysis.PEModule;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T), T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T), T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T$T())) == T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.AttributeValueExtractor`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.PEModule.PEHashProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.PEHashProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.PEHashProvider()) == T$Microsoft.CodeAnalysis.PEModule.PEHashProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.PEHashProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.PEHashProvider(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.PEHashProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.CryptographicHashProvider(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace()) == T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.TypeDefToNamespace() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer()) == T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.TypesByNamespaceSortComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer()) == T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.NamespaceHandleEqualityComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.StringAndInt() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.StringAndInt : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.StringAndInt()) == T$Microsoft.CodeAnalysis.PEModule.StringAndInt;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.StringAndInt(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.StringAndInt(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.StringAndInt() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.AttributeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.AttributeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.AttributeInfo()) == T$Microsoft.CodeAnalysis.PEModule.AttributeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.AttributeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.AttributeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.AttributeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder()) == T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.StringTableDecoder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52()) == T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.$GetReferencedManagedModulesOrThrow$d__52() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74()) == T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.$GetTypeDefsOrThrow$d__74() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEModule.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.PEModule.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEModule.$$c()) == T$Microsoft.CodeAnalysis.PEModule.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEModule.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEModule.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.PEModule.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IFieldSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IFieldSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IFieldSymbol()) == T$Microsoft.CodeAnalysis.IFieldSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IFieldSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IFieldSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IFieldSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo()) == T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.AsyncMoveNextBodyDebugInfo() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo(), $T)));


function T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder()) == T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.IPEDeltaAssemblyBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions()) == T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.InstrumentationKindExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator()) == T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c()) == T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EncVariableSlotAllocator.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo()) == T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitOptions()) == T$Microsoft.CodeAnalysis.Emit.EmitOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitOptions(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c()) == T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitOptions.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.SemanticEditKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.SemanticEditKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.SemanticEditKind()) == T$Microsoft.CodeAnalysis.Emit.SemanticEditKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.SemanticEditKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.SemanticEditKind(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.SemanticEditKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DefinitionMap() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DefinitionMap : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DefinitionMap()) == T$Microsoft.CodeAnalysis.Emit.DefinitionMap;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DefinitionMap() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod()) == T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DefinitionMap.MappedMethod() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata()) == T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalMetadata() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EncLocalInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EncLocalInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EncLocalInfo()) == T$Microsoft.CodeAnalysis.Emit.EncLocalInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EncLocalInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EncLocalInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EncLocalInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo()) == T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EncHoistedLocalInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.SymbolMatcher() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.SymbolMatcher : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.SymbolMatcher()) == T$Microsoft.CodeAnalysis.Emit.SymbolMatcher;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolMatcher(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolMatcher(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.SymbolMatcher() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(TPEModuleBuilder : Ref,TModuleCompilationState : Ref,TEmbeddedTypesManager : Ref,TSyntaxNode : Ref,TAttributeData : Ref,TSymbol : Ref,TAssemblySymbol : Ref,TNamedTypeSymbol : Ref,TFieldSymbol : Ref,TMethodSymbol : Ref,TEventSymbol : Ref,TPropertySymbol : Ref,TParameterSymbol : Ref,TTypeParameterSymbol : Ref,TEmbeddedType : Ref,TEmbeddedField : Ref,TEmbeddedMethod : Ref,TEmbeddedEvent : Ref,TEmbeddedProperty : Ref,TEmbeddedParameter : Ref,TEmbeddedTypeParameter : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21 : int;
axiom(forall TPEModuleBuilder : Ref,TModuleCompilationState : Ref,TEmbeddedTypesManager : Ref,TSyntaxNode : Ref,TAttributeData : Ref,TSymbol : Ref,TAssemblySymbol : Ref,TNamedTypeSymbol : Ref,TFieldSymbol : Ref,TMethodSymbol : Ref,TEventSymbol : Ref,TPropertySymbol : Ref,TParameterSymbol : Ref,TTypeParameterSymbol : Ref,TEmbeddedType : Ref,TEmbeddedField : Ref,TEmbeddedMethod : Ref,TEmbeddedEvent : Ref,TEmbeddedProperty : Ref,TEmbeddedParameter : Ref,TEmbeddedTypeParameter : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(TPEModuleBuilder,TModuleCompilationState,TEmbeddedTypesManager,TSyntaxNode,TAttributeData,TSymbol,TAssemblySymbol,TNamedTypeSymbol,TFieldSymbol,TMethodSymbol,TEventSymbol,TPropertySymbol,TParameterSymbol,TTypeParameterSymbol,TEmbeddedType,TEmbeddedField,TEmbeddedMethod,TEmbeddedEvent,TEmbeddedProperty,TEmbeddedParameter,TEmbeddedTypeParameter), T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(T$TPEModuleBuilder(),T$TModuleCompilationState(),T$TEmbeddedTypesManager(),T$TSyntaxNode(),T$TAttributeData(),T$TSymbol(),T$TAssemblySymbol(),T$TNamedTypeSymbol(),T$TFieldSymbol(),T$TMethodSymbol(),T$TEventSymbol(),T$TPropertySymbol(),T$TParameterSymbol(),T$TTypeParameterSymbol(),T$TEmbeddedType(),T$TEmbeddedField(),T$TEmbeddedMethod(),T$TEmbeddedEvent(),T$TEmbeddedProperty(),T$TEmbeddedParameter(),T$TEmbeddedTypeParameter())) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(TPEModuleBuilder,TModuleCompilationState,TEmbeddedTypesManager,TSyntaxNode,TAttributeData,TSymbol,TAssemblySymbol,TNamedTypeSymbol,TFieldSymbol,TMethodSymbol,TEventSymbol,TPropertySymbol,TParameterSymbol,TTypeParameterSymbol,TEmbeddedType,TEmbeddedField,TEmbeddedMethod,TEmbeddedEvent,TEmbeddedProperty,TEmbeddedParameter,TEmbeddedTypeParameter), T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(T$TPEModuleBuilder(),T$TModuleCompilationState(),T$TEmbeddedTypesManager(),T$TSyntaxNode(),T$TAttributeData(),T$TSymbol(),T$TAssemblySymbol(),T$TNamedTypeSymbol(),T$TFieldSymbol(),T$TMethodSymbol(),T$TEventSymbol(),T$TPropertySymbol(),T$TParameterSymbol(),T$TTypeParameterSymbol(),T$TEmbeddedType(),T$TEmbeddedField(),T$TEmbeddedMethod(),T$TEmbeddedEvent(),T$TEmbeddedProperty(),T$TEmbeddedParameter(),T$TEmbeddedTypeParameter())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(T$TPEModuleBuilder(),T$TModuleCompilationState(),T$TEmbeddedTypesManager(),T$TSyntaxNode(),T$TAttributeData(),T$TSymbol(),T$TAssemblySymbol(),T$TNamedTypeSymbol(),T$TFieldSymbol(),T$TMethodSymbol(),T$TEventSymbol(),T$TPropertySymbol(),T$TParameterSymbol(),T$TTypeParameterSymbol(),T$TEmbeddedType(),T$TEmbeddedField(),T$TEmbeddedMethod(),T$TEmbeddedEvent(),T$TEmbeddedProperty(),T$TEmbeddedParameter(),T$TEmbeddedTypeParameter())) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21;
axiom(forall TPEModuleBuilder : Ref,TModuleCompilationState : Ref,TEmbeddedTypesManager : Ref,TSyntaxNode : Ref,TAttributeData : Ref,TSymbol : Ref,TAssemblySymbol : Ref,TNamedTypeSymbol : Ref,TFieldSymbol : Ref,TMethodSymbol : Ref,TEventSymbol : Ref,TPropertySymbol : Ref,TParameterSymbol : Ref,TTypeParameterSymbol : Ref,TEmbeddedType : Ref,TEmbeddedField : Ref,TEmbeddedMethod : Ref,TEmbeddedEvent : Ref,TEmbeddedProperty : Ref,TEmbeddedParameter : Ref,TEmbeddedTypeParameter : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(TPEModuleBuilder,TModuleCompilationState,TEmbeddedTypesManager,TSyntaxNode,TAttributeData,TSymbol,TAssemblySymbol,TNamedTypeSymbol,TFieldSymbol,TMethodSymbol,TEventSymbol,TPropertySymbol,TParameterSymbol,TTypeParameterSymbol,TEmbeddedType,TEmbeddedField,TEmbeddedMethod,TEmbeddedEvent,TEmbeddedProperty,TEmbeddedParameter,TEmbeddedTypeParameter), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(TPEModuleBuilder,TModuleCompilationState,TEmbeddedTypesManager,TSyntaxNode,TAttributeData,TSymbol,TAssemblySymbol,TNamedTypeSymbol,TFieldSymbol,TMethodSymbol,TEventSymbol,TPropertySymbol,TParameterSymbol,TTypeParameterSymbol,TEmbeddedType,TEmbeddedField,TEmbeddedMethod,TEmbeddedEvent,TEmbeddedProperty,TEmbeddedParameter,TEmbeddedTypeParameter), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21(TPEModuleBuilder,TModuleCompilationState,TEmbeddedTypesManager,TSyntaxNode,TAttributeData,TSymbol,TAssemblySymbol,TNamedTypeSymbol,TFieldSymbol,TMethodSymbol,TEventSymbol,TPropertySymbol,TParameterSymbol,TTypeParameterSymbol,TEmbeddedType,TEmbeddedField,TEmbeddedMethod,TEmbeddedEvent,TEmbeddedProperty,TEmbeddedParameter,TEmbeddedTypeParameter) == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager(), $T)));


function T$TPEModuleBuilder() : Ref;
const unique T$TPEModuleBuilder : int;
axiom $TypeConstructor(T$TPEModuleBuilder()) == T$TPEModuleBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$TPEModuleBuilder(), $T) } $Subtype(T$TPEModuleBuilder(), $T) <==> (T$TPEModuleBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TModuleCompilationState() : Ref;
const unique T$TModuleCompilationState : int;
axiom $TypeConstructor(T$TModuleCompilationState()) == T$TModuleCompilationState;
axiom(forall  $T: Ref:: {  $Subtype(T$TModuleCompilationState(), $T) } $Subtype(T$TModuleCompilationState(), $T) <==> (T$TModuleCompilationState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedTypesManager() : Ref;
const unique T$TEmbeddedTypesManager : int;
axiom $TypeConstructor(T$TEmbeddedTypesManager()) == T$TEmbeddedTypesManager;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedTypesManager(), $T) } $Subtype(T$TEmbeddedTypesManager(), $T) <==> (T$TEmbeddedTypesManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TSyntaxNode() : Ref;
const unique T$TSyntaxNode : int;
axiom $TypeConstructor(T$TSyntaxNode()) == T$TSyntaxNode;
axiom(forall  $T: Ref:: {  $Subtype(T$TSyntaxNode(), $T) } $Subtype(T$TSyntaxNode(), $T) <==> (T$TSyntaxNode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$TFieldSymbol() : Ref;
const unique T$TFieldSymbol : int;
axiom $TypeConstructor(T$TFieldSymbol()) == T$TFieldSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TFieldSymbol(), $T) } $Subtype(T$TFieldSymbol(), $T) <==> (T$TFieldSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TEventSymbol() : Ref;
const unique T$TEventSymbol : int;
axiom $TypeConstructor(T$TEventSymbol()) == T$TEventSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TEventSymbol(), $T) } $Subtype(T$TEventSymbol(), $T) <==> (T$TEventSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TPropertySymbol() : Ref;
const unique T$TPropertySymbol : int;
axiom $TypeConstructor(T$TPropertySymbol()) == T$TPropertySymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TPropertySymbol(), $T) } $Subtype(T$TPropertySymbol(), $T) <==> (T$TPropertySymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TParameterSymbol() : Ref;
const unique T$TParameterSymbol : int;
axiom $TypeConstructor(T$TParameterSymbol()) == T$TParameterSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TParameterSymbol(), $T) } $Subtype(T$TParameterSymbol(), $T) <==> (T$TParameterSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TTypeParameterSymbol() : Ref;
const unique T$TTypeParameterSymbol : int;
axiom $TypeConstructor(T$TTypeParameterSymbol()) == T$TTypeParameterSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TTypeParameterSymbol(), $T) } $Subtype(T$TTypeParameterSymbol(), $T) <==> (T$TTypeParameterSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedType() : Ref;
const unique T$TEmbeddedType : int;
axiom $TypeConstructor(T$TEmbeddedType()) == T$TEmbeddedType;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedType(), $T) } $Subtype(T$TEmbeddedType(), $T) <==> (T$TEmbeddedType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedField() : Ref;
const unique T$TEmbeddedField : int;
axiom $TypeConstructor(T$TEmbeddedField()) == T$TEmbeddedField;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedField(), $T) } $Subtype(T$TEmbeddedField(), $T) <==> (T$TEmbeddedField() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedMethod() : Ref;
const unique T$TEmbeddedMethod : int;
axiom $TypeConstructor(T$TEmbeddedMethod()) == T$TEmbeddedMethod;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedMethod(), $T) } $Subtype(T$TEmbeddedMethod(), $T) <==> (T$TEmbeddedMethod() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedEvent() : Ref;
const unique T$TEmbeddedEvent : int;
axiom $TypeConstructor(T$TEmbeddedEvent()) == T$TEmbeddedEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedEvent(), $T) } $Subtype(T$TEmbeddedEvent(), $T) <==> (T$TEmbeddedEvent() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedProperty() : Ref;
const unique T$TEmbeddedProperty : int;
axiom $TypeConstructor(T$TEmbeddedProperty()) == T$TEmbeddedProperty;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedProperty(), $T) } $Subtype(T$TEmbeddedProperty(), $T) <==> (T$TEmbeddedProperty() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedParameter() : Ref;
const unique T$TEmbeddedParameter : int;
axiom $TypeConstructor(T$TEmbeddedParameter()) == T$TEmbeddedParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedParameter(), $T) } $Subtype(T$TEmbeddedParameter(), $T) <==> (T$TEmbeddedParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEmbeddedTypeParameter() : Ref;
const unique T$TEmbeddedTypeParameter : int;
axiom $TypeConstructor(T$TEmbeddedTypeParameter()) == T$TEmbeddedTypeParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$TEmbeddedTypeParameter(), $T) } $Subtype(T$TEmbeddedTypeParameter(), $T) <==> (T$TEmbeddedTypeParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TEventSymbol()), $T)|| $Subtype(T$Microsoft.Cci.IEventDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedEvent.$Microsoft-Cci-IEventDefinition-get_Accessors$d__29() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedField() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TFieldSymbol()), $T)|| $Subtype(T$Microsoft.Cci.IFieldDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IFieldReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(TMember : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1 : int;
axiom(forall TMember : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(TMember), T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TMember())) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(TMember), T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TMember())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TMember())) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1;
axiom(forall TMember : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(TMember), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(TMember), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(TMember) == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)));


function T$TMember() : Ref;
const unique T$TMember : int;
axiom $TypeConstructor(T$TMember()) == T$TMember;
axiom(forall  $T: Ref:: {  $Subtype(T$TMember(), $T) } $Subtype(T$TMember(), $T) <==> (T$TMember() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TMethodSymbol()), $T)|| $Subtype(T$Microsoft.Cci.IMethodDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.EmptyBody() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodBody(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IParameterDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterTypeInformation(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMember`1(T$TPropertySymbol()), $T)|| $Subtype(T$Microsoft.Cci.IPropertyDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedProperty.$Microsoft-Cci-IPropertyDefinition-GetAccessors$d__25() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedTypeParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IGenericMethodParameter(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameter(), $T)|| $Subtype(T$Microsoft.Cci.IGenericParameterReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)|| $Subtype(T$Microsoft.Cci.IGenericMethodParameterReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer()) == T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.TypeComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager()) == T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.CommonEmbeddedTypesManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap()) == T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.NoPia.VtblGap() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitContext() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitContext : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitContext()) == T$Microsoft.CodeAnalysis.Emit.EmitContext;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitContext(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitContext(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitContext() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags()) == T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitContext.Flags() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.MethodImplKey() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.MethodImplKey : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.MethodImplKey()) == T$Microsoft.CodeAnalysis.Emit.MethodImplKey;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.MethodImplKey(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.MethodImplKey(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.MethodImplKey() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts()) == T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.LambdaSyntaxFacts() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitResult() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitResult : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitResult()) == T$Microsoft.CodeAnalysis.Emit.EmitResult;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitResult(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitResult(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitResult() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField()) == T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKeyField() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder()) == T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IUnit(), $T)|| $Subtype(T$Microsoft.Cci.IUnitReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IModuleReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93()) == T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder.$GetAssemblyReferences$d__93() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitBaseline() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitBaseline : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitBaseline()) == T$Microsoft.CodeAnalysis.Emit.EmitBaseline;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitBaseline(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitBaseline(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitBaseline() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols()) == T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitBaseline.MetadataSymbols() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c()) == T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitBaseline.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation()) == T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(TSymbolMatcher : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1 : int;
axiom(forall TSymbolMatcher : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(TSymbolMatcher), T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(T$TSymbolMatcher())) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(TSymbolMatcher), T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(T$TSymbolMatcher())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(T$TSymbolMatcher())) == T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1;
axiom(forall TSymbolMatcher : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(TSymbolMatcher), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(TSymbolMatcher), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DefinitionMap`1(TSymbolMatcher) == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.DefinitionMap(), $T)));


function T$TSymbolMatcher() : Ref;
const unique T$TSymbolMatcher : int;
axiom $TypeConstructor(T$TSymbolMatcher()) == T$TSymbolMatcher;
axiom(forall  $T: Ref:: {  $Subtype(T$TSymbolMatcher(), $T) } $Subtype(T$TSymbolMatcher(), $T) <==> (T$TSymbolMatcher() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.ErrorType() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.ErrorType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.ErrorType()) == T$Microsoft.CodeAnalysis.Emit.ErrorType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.ErrorType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.ErrorType(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.ErrorType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly()) == T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.ErrorType.ErrorAssembly() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IAssemblyReference(), $T)|| $Subtype(T$Microsoft.Cci.IModuleReference(), $T)|| $Subtype(T$Microsoft.Cci.IUnitReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo()) == T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.IteratorMoveNextBodyDebugInfo() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.StateMachineMoveNextBodyDebugInfo(), $T)));


function T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult()) == T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.EmitDifferenceResult() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.EmitResult(), $T)));


function T$Microsoft.CodeAnalysis.Emit.SemanticEdit() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.SemanticEdit : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.SemanticEdit()) == T$Microsoft.CodeAnalysis.Emit.SemanticEdit;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.SemanticEdit(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.SemanticEdit(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.SemanticEdit() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions()) == T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DebugInformationFormatExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(TCompilation : Ref,TSourceModuleSymbol : Ref,TAssemblySymbol : Ref,TTypeSymbol : Ref,TNamedTypeSymbol : Ref,TMethodSymbol : Ref,TSyntaxNode : Ref,TEmbeddedTypesManager : Ref,TModuleCompilationState : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9 : int;
axiom(forall TCompilation : Ref,TSourceModuleSymbol : Ref,TAssemblySymbol : Ref,TTypeSymbol : Ref,TNamedTypeSymbol : Ref,TMethodSymbol : Ref,TSyntaxNode : Ref,TEmbeddedTypesManager : Ref,TModuleCompilationState : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(TCompilation,TSourceModuleSymbol,TAssemblySymbol,TTypeSymbol,TNamedTypeSymbol,TMethodSymbol,TSyntaxNode,TEmbeddedTypesManager,TModuleCompilationState), T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(T$TCompilation(),T$TSourceModuleSymbol(),T$TAssemblySymbol(),T$TTypeSymbol(),T$TNamedTypeSymbol(),T$TMethodSymbol(),T$TSyntaxNode(),T$TEmbeddedTypesManager(),T$TModuleCompilationState())) } $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(TCompilation,TSourceModuleSymbol,TAssemblySymbol,TTypeSymbol,TNamedTypeSymbol,TMethodSymbol,TSyntaxNode,TEmbeddedTypesManager,TModuleCompilationState), T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(T$TCompilation(),T$TSourceModuleSymbol(),T$TAssemblySymbol(),T$TTypeSymbol(),T$TNamedTypeSymbol(),T$TMethodSymbol(),T$TSyntaxNode(),T$TEmbeddedTypesManager(),T$TModuleCompilationState())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(T$TCompilation(),T$TSourceModuleSymbol(),T$TAssemblySymbol(),T$TTypeSymbol(),T$TNamedTypeSymbol(),T$TMethodSymbol(),T$TSyntaxNode(),T$TEmbeddedTypesManager(),T$TModuleCompilationState())) == T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9;
axiom(forall TCompilation : Ref,TSourceModuleSymbol : Ref,TAssemblySymbol : Ref,TTypeSymbol : Ref,TNamedTypeSymbol : Ref,TMethodSymbol : Ref,TSyntaxNode : Ref,TEmbeddedTypesManager : Ref,TModuleCompilationState : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(TCompilation,TSourceModuleSymbol,TAssemblySymbol,TTypeSymbol,TNamedTypeSymbol,TMethodSymbol,TSyntaxNode,TEmbeddedTypesManager,TModuleCompilationState), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(TCompilation,TSourceModuleSymbol,TAssemblySymbol,TTypeSymbol,TNamedTypeSymbol,TMethodSymbol,TSyntaxNode,TEmbeddedTypesManager,TModuleCompilationState), $T) <==> (T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9(TCompilation,TSourceModuleSymbol,TAssemblySymbol,TTypeSymbol,TNamedTypeSymbol,TMethodSymbol,TSyntaxNode,TEmbeddedTypesManager,TModuleCompilationState) == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral(), $T)));



function T$TSourceModuleSymbol() : Ref;
const unique T$TSourceModuleSymbol : int;
axiom $TypeConstructor(T$TSourceModuleSymbol()) == T$TSourceModuleSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TSourceModuleSymbol(), $T) } $Subtype(T$TSourceModuleSymbol(), $T) <==> (T$TSourceModuleSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TTypeSymbol() : Ref;
const unique T$TTypeSymbol : int;
axiom $TypeConstructor(T$TTypeSymbol()) == T$TTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$TTypeSymbol(), $T) } $Subtype(T$TTypeSymbol(), $T) <==> (T$TTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));







function T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions()) == T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.SynthesizedDefinitions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23()) == T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$GetTopLevelTypes$d__23() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c()) == T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.PEModuleBuilder`9.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.SymbolChanges() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.SymbolChanges : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.SymbolChanges()) == T$Microsoft.CodeAnalysis.Emit.SymbolChanges;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolChanges(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolChanges(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.SymbolChanges() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8()) == T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.SymbolChanges.$GetTopLevelTypes$d__8() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter() == $T || $Subtype(T$Microsoft.Cci.MetadataWriter(), $T)));









function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T), T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T), T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$T())) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T), T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T), T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T$T())) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1(T) == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T), $T)));



function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndex`1.TryGetExistingIndex() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.ParameterDefinitionIndex() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$Microsoft.Cci.IParameterDefinition()), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.GenericParameterIndex() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$Microsoft.Cci.IGenericParameter()), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$Microsoft.Cci.DummyTypeReference()), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.EventOrPropertyMapIndex.TryGetExistingIndex() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.MethodImplIndex() == $T || $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DefinitionIndexBase`1(T$Microsoft.CodeAnalysis.Emit.MethodImplKey()), $T)));


function T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer()) == T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer() == $T || $Subtype(T$Microsoft.Cci.ReferenceIndexer(), $T)));


function T$Microsoft.CodeAnalysis.Emit.SymbolChange() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.SymbolChange : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.SymbolChange()) == T$Microsoft.CodeAnalysis.Emit.SymbolChange;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolChange(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.SymbolChange(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.SymbolChange() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder()) == T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DebugDocumentsBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey()) == T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.AnonymousTypeKey() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo()) == T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.AddedOrChangedMethodInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat()) == T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.DebugInformationFormat() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue()) == T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.AnonymousTypeValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Emit.InstrumentationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Emit.InstrumentationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Emit.InstrumentationKind()) == T$Microsoft.CodeAnalysis.Emit.InstrumentationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Emit.InstrumentationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Emit.InstrumentationKind(), $T) <==> (T$Microsoft.CodeAnalysis.Emit.InstrumentationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions()) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TRoot() : Ref;
const unique T$TRoot : int;
axiom $TypeConstructor(T$TRoot()) == T$TRoot;
axiom(forall  $T: Ref:: {  $Subtype(T$TRoot(), $T) } $Subtype(T$TRoot(), $T) <==> (T$TRoot() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






















function T$TSyntax() : Ref;
const unique T$TSyntax : int;
axiom $TypeConstructor(T$TSyntax()) == T$TSyntax;
axiom(forall  $T: Ref:: {  $Subtype(T$TSyntax(), $T) } $Subtype(T$TSyntax(), $T) <==> (T$TSyntax() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));
















function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes()) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.CurrentNodes.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(TRoot : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1 : int;
axiom(forall TRoot : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(T$TRoot())) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(T$TRoot())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(T$TRoot())) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1;
axiom(forall TRoot : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(TRoot), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(TRoot), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass2_0`1(TRoot) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(TRoot : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1 : int;
axiom(forall TRoot : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(T$TRoot())) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(T$TRoot())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(T$TRoot())) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1;
axiom(forall TRoot : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(TRoot), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(TRoot), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass13_0`1(TRoot) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(TRoot : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1 : int;
axiom(forall TRoot : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(T$TRoot())) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(T$TRoot())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(T$TRoot())) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1;
axiom(forall TRoot : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(TRoot), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(TRoot), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__DisplayClass15_0`1(TRoot) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(TRoot : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1 : int;
axiom(forall TRoot : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(T$TRoot())) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(TRoot), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(T$TRoot())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(T$TRoot())) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1;
axiom(forall TRoot : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(TRoot), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(TRoot), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c__36`1(TRoot) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(TNode), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(TNode), T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(T$TNode())) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$GetCurrentNodes$d__40`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNodeExtensions.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IOperation() : Ref;
const unique T$Microsoft.CodeAnalysis.IOperation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IOperation()) == T$Microsoft.CodeAnalysis.IOperation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T) <==> (T$Microsoft.CodeAnalysis.IOperation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol : Ref,TypeSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.TypeNameDecoder`2 : int;
axiom(forall ModuleSymbol : Ref,TypeSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol,TypeSymbol), T$Microsoft.CodeAnalysis.TypeNameDecoder`2(T$ModuleSymbol(),T$TypeSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol,TypeSymbol), T$Microsoft.CodeAnalysis.TypeNameDecoder`2(T$ModuleSymbol(),T$TypeSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeNameDecoder`2(T$ModuleSymbol(),T$TypeSymbol())) == T$Microsoft.CodeAnalysis.TypeNameDecoder`2;
axiom(forall ModuleSymbol : Ref,TypeSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol,TypeSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol,TypeSymbol), $T) <==> (T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol,TypeSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(TAttributeSyntax : Ref,TAttributeData : Ref,TAttributeLocation : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3 : int;
axiom(forall TAttributeSyntax : Ref,TAttributeData : Ref,TAttributeLocation : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(TAttributeSyntax,TAttributeData,TAttributeLocation), T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(T$TAttributeSyntax(),T$TAttributeData(),T$TAttributeLocation())) } $Subtype(T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(TAttributeSyntax,TAttributeData,TAttributeLocation), T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(T$TAttributeSyntax(),T$TAttributeData(),T$TAttributeLocation())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(T$TAttributeSyntax(),T$TAttributeData(),T$TAttributeLocation())) == T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3;
axiom(forall TAttributeSyntax : Ref,TAttributeData : Ref,TAttributeLocation : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(TAttributeSyntax,TAttributeData,TAttributeLocation), $T) } $Subtype(T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(TAttributeSyntax,TAttributeData,TAttributeLocation), $T) <==> (T$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3(TAttributeSyntax,TAttributeData,TAttributeLocation) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Microsoft.CodeAnalysis.AnnotationExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.AnnotationExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AnnotationExtensions()) == T$Microsoft.CodeAnalysis.AnnotationExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AnnotationExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AnnotationExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.AnnotationExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));







function T$Microsoft.CodeAnalysis.DocumentationProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationProvider()) == T$Microsoft.CodeAnalysis.DocumentationProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationProvider(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationProvider() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider()) == T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationProvider.NullDocumentationProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.DocumentationProvider(), $T)));


function T$Microsoft.CodeAnalysis.SpecialTypes() : Ref;
const unique T$Microsoft.CodeAnalysis.SpecialTypes : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SpecialTypes()) == T$Microsoft.CodeAnalysis.SpecialTypes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SpecialTypes(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SpecialTypes(), $T) <==> (T$Microsoft.CodeAnalysis.SpecialTypes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Interop.IClrMetaHost() : Ref;
const unique T$Microsoft.CodeAnalysis.Interop.IClrMetaHost : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Interop.IClrMetaHost()) == T$Microsoft.CodeAnalysis.Interop.IClrMetaHost;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Interop.IClrMetaHost(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Interop.IClrMetaHost(), $T) <==> (T$Microsoft.CodeAnalysis.Interop.IClrMetaHost() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo()) == T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.Interop.IClrRuntimeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Interop.IClrStrongName() : Ref;
const unique T$Microsoft.CodeAnalysis.Interop.IClrStrongName : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Interop.IClrStrongName()) == T$Microsoft.CodeAnalysis.Interop.IClrStrongName;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Interop.IClrStrongName(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Interop.IClrStrongName(), $T) <==> (T$Microsoft.CodeAnalysis.Interop.IClrStrongName() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Interop.ClrStrongName() : Ref;
const unique T$Microsoft.CodeAnalysis.Interop.ClrStrongName : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Interop.ClrStrongName()) == T$Microsoft.CodeAnalysis.Interop.ClrStrongName;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Interop.ClrStrongName(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Interop.ClrStrongName(), $T) <==> (T$Microsoft.CodeAnalysis.Interop.ClrStrongName() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RESOURCE_STRING() : Ref;
const unique T$Microsoft.CodeAnalysis.RESOURCE_STRING : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RESOURCE_STRING()) == T$Microsoft.CodeAnalysis.RESOURCE_STRING;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RESOURCE_STRING(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RESOURCE_STRING(), $T) <==> (T$Microsoft.CodeAnalysis.RESOURCE_STRING() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SpecialMember() : Ref;
const unique T$Microsoft.CodeAnalysis.SpecialMember : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SpecialMember()) == T$Microsoft.CodeAnalysis.SpecialMember;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SpecialMember(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SpecialMember(), $T) <==> (T$Microsoft.CodeAnalysis.SpecialMember() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ResourceException() : Ref;
const unique T$Microsoft.CodeAnalysis.ResourceException : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ResourceException()) == T$Microsoft.CodeAnalysis.ResourceException;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ResourceException(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ResourceException(), $T) <==> (T$Microsoft.CodeAnalysis.ResourceException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LocalInfo`1(TypeSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.LocalInfo`1 : int;
axiom(forall TypeSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.LocalInfo`1(TypeSymbol), T$Microsoft.CodeAnalysis.LocalInfo`1(T$TypeSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.LocalInfo`1(TypeSymbol), T$Microsoft.CodeAnalysis.LocalInfo`1(T$TypeSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocalInfo`1(T$TypeSymbol())) == T$Microsoft.CodeAnalysis.LocalInfo`1;
axiom(forall TypeSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocalInfo`1(TypeSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocalInfo`1(TypeSymbol), $T) <==> (T$Microsoft.CodeAnalysis.LocalInfo`1(TypeSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SynthesizedLocalKind() : Ref;
const unique T$Microsoft.CodeAnalysis.SynthesizedLocalKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SynthesizedLocalKind()) == T$Microsoft.CodeAnalysis.SynthesizedLocalKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SynthesizedLocalKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SynthesizedLocalKind(), $T) <==> (T$Microsoft.CodeAnalysis.SynthesizedLocalKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions()) == T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SynthesizedLocalKindExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RuleSetProcessor() : Ref;
const unique T$Microsoft.CodeAnalysis.RuleSetProcessor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RuleSetProcessor()) == T$Microsoft.CodeAnalysis.RuleSetProcessor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RuleSetProcessor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RuleSetProcessor(), $T) <==> (T$Microsoft.CodeAnalysis.RuleSetProcessor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentityComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentityComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer()) == T$Microsoft.CodeAnalysis.AssemblyIdentityComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentityComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult()) == T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISourceAssemblySymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.ISourceAssemblySymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISourceAssemblySymbol()) == T$Microsoft.CodeAnalysis.ISourceAssemblySymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISourceAssemblySymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISourceAssemblySymbol(), $T) <==> (T$Microsoft.CodeAnalysis.ISourceAssemblySymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RefKind() : Ref;
const unique T$Microsoft.CodeAnalysis.RefKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RefKind()) == T$Microsoft.CodeAnalysis.RefKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RefKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RefKind(), $T) <==> (T$Microsoft.CodeAnalysis.RefKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(K : Ref,V : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2 : int;
axiom(forall K : Ref,V : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(K,V), T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(T$K(),T$V())) } $Subtype(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(K,V), T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(T$K(),T$V())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(T$K(),T$V())) == T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2;
axiom(forall K : Ref,V : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(K,V), $T) } $Subtype(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(K,V), $T) <==> (T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2(K,V) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));





function T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue() : Ref;
const unique T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue()) == T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue(), $T) } $Subtype(T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue(), $T) <==> (T$Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.CacheValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.UnionCollection`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.UnionCollection`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.UnionCollection`1(T), T$Microsoft.CodeAnalysis.UnionCollection`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.UnionCollection`1(T), T$Microsoft.CodeAnalysis.UnionCollection`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.UnionCollection`1(T$T())) == T$Microsoft.CodeAnalysis.UnionCollection`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.UnionCollection`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.UnionCollection`1(T), $T) <==> (T$Microsoft.CodeAnalysis.UnionCollection`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TOrig() : Ref;
const unique T$TOrig : int;
axiom $TypeConstructor(T$TOrig()) == T$TOrig;
axiom(forall  $T: Ref:: {  $Subtype(T$TOrig(), $T) } $Subtype(T$TOrig(), $T) <==> (T$TOrig() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.UnionCollection`1.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.UnionCollection`1.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.UnionCollection`1.$$c()) == T$Microsoft.CodeAnalysis.UnionCollection`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.UnionCollection`1.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.UnionCollection`1.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.UnionCollection`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataTypeName() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataTypeName : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataTypeName()) == T$Microsoft.CodeAnalysis.MetadataTypeName;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataTypeName(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataTypeName(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataTypeName() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataTypeName.Key() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataTypeName.Key : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataTypeName.Key()) == T$Microsoft.CodeAnalysis.MetadataTypeName.Key;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataTypeName.Key(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataTypeName.Key(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataTypeName.Key() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds()) == T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationModeEnumBounds() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ConsListExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ConsListExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConsListExtensions()) == T$Microsoft.CodeAnalysis.ConsListExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConsListExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConsListExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ConsListExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream() : Ref;
const unique T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream()) == T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream(), $T) <==> (T$Microsoft.CodeAnalysis.ReadOnlyUnmanagedMemoryStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IArrayTypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IArrayTypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IArrayTypeSymbol()) == T$Microsoft.CodeAnalysis.IArrayTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IArrayTypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IArrayTypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IArrayTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader() : Ref;
const unique T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader()) == T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader(), $T) <==> (T$Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EmbeddedText() : Ref;
const unique T$Microsoft.CodeAnalysis.EmbeddedText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EmbeddedText()) == T$Microsoft.CodeAnalysis.EmbeddedText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EmbeddedText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EmbeddedText(), $T) <==> (T$Microsoft.CodeAnalysis.EmbeddedText() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream() : Ref;
const unique T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream()) == T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream(), $T) <==> (T$Microsoft.CodeAnalysis.EmbeddedText.CountingDeflateStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1 : int;
axiom(forall TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(TValue), T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(TValue), T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(T$TValue())) == T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1;
axiom(forall TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(TValue), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentityMap`1(TValue) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.ObjectDisplayOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.ObjectDisplayOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ObjectDisplayOptions()) == T$Microsoft.CodeAnalysis.ObjectDisplayOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ObjectDisplayOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ObjectDisplayOptions(), $T) <==> (T$Microsoft.CodeAnalysis.ObjectDisplayOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ThreeStateHelpers() : Ref;
const unique T$Microsoft.CodeAnalysis.ThreeStateHelpers : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ThreeStateHelpers()) == T$Microsoft.CodeAnalysis.ThreeStateHelpers;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ThreeStateHelpers(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ThreeStateHelpers(), $T) <==> (T$Microsoft.CodeAnalysis.ThreeStateHelpers() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CachingBase`1(TEntry : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CachingBase`1 : int;
axiom(forall TEntry : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(TEntry), T$Microsoft.CodeAnalysis.CachingBase`1(T$TEntry())) } $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(TEntry), T$Microsoft.CodeAnalysis.CachingBase`1(T$TEntry())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CachingBase`1(T$TEntry())) == T$Microsoft.CodeAnalysis.CachingBase`1;
axiom(forall TEntry : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(TEntry), $T) } $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(TEntry), $T) <==> (T$Microsoft.CodeAnalysis.CachingBase`1(TEntry) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEntry() : Ref;
const unique T$TEntry : int;
axiom $TypeConstructor(T$TEntry()) == T$TEntry;
axiom(forall  $T: Ref:: {  $Subtype(T$TEntry(), $T) } $Subtype(T$TEntry(), $T) <==> (T$TEntry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataDecoder`5(ModuleSymbol : Ref,TypeSymbol : Ref,MethodSymbol : Ref,FieldSymbol : Ref,Symbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataDecoder`5 : int;
axiom(forall ModuleSymbol : Ref,TypeSymbol : Ref,MethodSymbol : Ref,FieldSymbol : Ref,Symbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataDecoder`5(ModuleSymbol,TypeSymbol,MethodSymbol,FieldSymbol,Symbol), T$Microsoft.CodeAnalysis.MetadataDecoder`5(T$ModuleSymbol(),T$TypeSymbol(),T$MethodSymbol(),T$FieldSymbol(),T$Symbol())) } $Subtype(T$Microsoft.CodeAnalysis.MetadataDecoder`5(ModuleSymbol,TypeSymbol,MethodSymbol,FieldSymbol,Symbol), T$Microsoft.CodeAnalysis.MetadataDecoder`5(T$ModuleSymbol(),T$TypeSymbol(),T$MethodSymbol(),T$FieldSymbol(),T$Symbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataDecoder`5(T$ModuleSymbol(),T$TypeSymbol(),T$MethodSymbol(),T$FieldSymbol(),T$Symbol())) == T$Microsoft.CodeAnalysis.MetadataDecoder`5;
axiom(forall ModuleSymbol : Ref,TypeSymbol : Ref,MethodSymbol : Ref,FieldSymbol : Ref,Symbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataDecoder`5(ModuleSymbol,TypeSymbol,MethodSymbol,FieldSymbol,Symbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataDecoder`5(ModuleSymbol,TypeSymbol,MethodSymbol,FieldSymbol,Symbol), $T) <==> (T$Microsoft.CodeAnalysis.MetadataDecoder`5(ModuleSymbol,TypeSymbol,MethodSymbol,FieldSymbol,Symbol) == $T || $Subtype(T$Microsoft.CodeAnalysis.TypeNameDecoder`2(ModuleSymbol,TypeSymbol), $T)));






function T$Symbol() : Ref;
const unique T$Symbol : int;
axiom $TypeConstructor(T$Symbol()) == T$Symbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Symbol(), $T) } $Subtype(T$Symbol(), $T) <==> (T$Symbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeData()) == T$Microsoft.CodeAnalysis.AttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$TAttributeSyntaxNode() : Ref;
const unique T$TAttributeSyntaxNode : int;
axiom $TypeConstructor(T$TAttributeSyntaxNode()) == T$TAttributeSyntaxNode;
axiom(forall  $T: Ref:: {  $Subtype(T$TAttributeSyntaxNode(), $T) } $Subtype(T$TAttributeSyntaxNode(), $T) <==> (T$TAttributeSyntaxNode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$TTypeWellKnownAttributeData() : Ref;
const unique T$TTypeWellKnownAttributeData : int;
axiom $TypeConstructor(T$TTypeWellKnownAttributeData()) == T$TTypeWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$TTypeWellKnownAttributeData(), $T) } $Subtype(T$TTypeWellKnownAttributeData(), $T) <==> (T$TTypeWellKnownAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));





function T$Microsoft.CodeAnalysis.ImmutableArrayExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ImmutableArrayExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ImmutableArrayExtensions()) == T$Microsoft.CodeAnalysis.ImmutableArrayExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ImmutableArrayExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ImmutableArrayExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ImmutableArrayExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));

















function T$T2() : Ref;
const unique T$T2 : int;
axiom $TypeConstructor(T$T2()) == T$T2;
axiom(forall  $T: Ref:: {  $Subtype(T$T2(), $T) } $Subtype(T$T2(), $T) <==> (T$T2() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$TDerived() : Ref;
const unique T$TDerived : int;
axiom $TypeConstructor(T$TDerived()) == T$TDerived;
axiom(forall  $T: Ref:: {  $Subtype(T$TDerived(), $T) } $Subtype(T$TDerived(), $T) <==> (T$TDerived() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TBase() : Ref;
const unique T$TBase : int;
axiom $TypeConstructor(T$TBase()) == T$TBase;
axiom(forall  $T: Ref:: {  $Subtype(T$TBase(), $T) } $Subtype(T$TBase(), $T) <==> (T$TBase() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));















function T$Microsoft.CodeAnalysis.IDynamicTypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IDynamicTypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IDynamicTypeSymbol()) == T$Microsoft.CodeAnalysis.IDynamicTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IDynamicTypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IDynamicTypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IDynamicTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostic() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostic : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostic()) == T$Microsoft.CodeAnalysis.Diagnostic;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostic(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostic(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostic() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()) == T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic() == $T || $Subtype(T$Microsoft.CodeAnalysis.Diagnostic(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c()) == T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53() : Ref;
const unique T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53()) == T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53(), $T) <==> (T$Microsoft.CodeAnalysis.Diagnostic.$GetDiagnosticLocationsWithinTree$d__53() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.GreenNode() : Ref;
const unique T$Microsoft.CodeAnalysis.GreenNode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.GreenNode()) == T$Microsoft.CodeAnalysis.GreenNode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.GreenNode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.GreenNode(), $T) <==> (T$Microsoft.CodeAnalysis.GreenNode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IObjectWritable(), $T)));



function T$Microsoft.CodeAnalysis.GreenNode.NodeFlags() : Ref;
const unique T$Microsoft.CodeAnalysis.GreenNode.NodeFlags : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.GreenNode.NodeFlags()) == T$Microsoft.CodeAnalysis.GreenNode.NodeFlags;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.GreenNode.NodeFlags(), $T) } $Subtype(T$Microsoft.CodeAnalysis.GreenNode.NodeFlags(), $T) <==> (T$Microsoft.CodeAnalysis.GreenNode.NodeFlags() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45() : Ref;
const unique T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45()) == T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45(), $T) } $Subtype(T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45(), $T) <==> (T$Microsoft.CodeAnalysis.GreenNode.$EnumerateNodes$d__45() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89() : Ref;
const unique T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89()) == T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89(), $T) } $Subtype(T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89(), $T) <==> (T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__89() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91() : Ref;
const unique T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91()) == T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91(), $T) } $Subtype(T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91(), $T) <==> (T$Microsoft.CodeAnalysis.GreenNode.$GetAnnotationsSlow$d__91() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ILoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.ILoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILoopStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression()) == T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ObjectCreationExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ThrowStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ThrowStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ThrowStatement()) == T$Microsoft.CodeAnalysis.Semantics.ThrowStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ThrowStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ThrowStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ThrowStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IThrowStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IIfStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IIfStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IIfStatement()) == T$Microsoft.CodeAnalysis.Semantics.IIfStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIfStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIfStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IIfStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.AwaitExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.AwaitExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.AwaitExpression()) == T$Microsoft.CodeAnalysis.Semantics.AwaitExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.AwaitExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.AwaitExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.AwaitExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ISwitchCase() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISwitchCase : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISwitchCase()) == T$Microsoft.CodeAnalysis.Semantics.ISwitchCase;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISwitchCase(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISwitchCase(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISwitchCase() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression()) == T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.EventAssignmentExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression()) == T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.PlaceholderExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.FixedStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.FixedStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.FixedStatement()) == T$Microsoft.CodeAnalysis.Semantics.FixedStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.FixedStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.FixedStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.FixedStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFixedStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression()) == T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IPlaceholderExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.OperationWalker() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.OperationWalker : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.OperationWalker()) == T$Microsoft.CodeAnalysis.Semantics.OperationWalker;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationWalker(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationWalker(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.OperationWalker() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor(), $T)));



function T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind()) == T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.UnaryOperandKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer()) == T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer()) == T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(TArgument : Ref,TResult : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2 : int;
axiom(forall TArgument : Ref,TResult : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(TArgument,TResult), T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(T$TArgument(),T$TResult())) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(TArgument,TResult), T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(T$TArgument(),T$TResult())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(T$TArgument(),T$TResult())) == T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2;
axiom(forall TArgument : Ref,TResult : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(TArgument,TResult), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(TArgument,TResult), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.OperationVisitor`2(TArgument,TResult) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression()) == T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.DefaultValueExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression()) == T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind()) == T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SimpleUnaryOperationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.Argument() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.Argument : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.Argument()) == T$Microsoft.CodeAnalysis.Semantics.Argument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.Argument(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.Argument(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.Argument() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArgument(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression()) == T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression()) == T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression()) == T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.AddressOfExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind()) == T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.BinaryOperandsKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression()) == T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.InvalidStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.InvalidStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.InvalidStatement()) == T$Microsoft.CodeAnalysis.Semantics.InvalidStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.InvalidStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.InvalidStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.InvalidStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IEndStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IEndStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IEndStatement()) == T$Microsoft.CodeAnalysis.Semantics.IEndStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEndStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEndStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IEndStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression()) == T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IEventAssignmentExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer()) == T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.PropertyInitializer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression()) == T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.TypeOfExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ConversionExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ConversionExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ConversionExpression()) == T$Microsoft.CodeAnalysis.Semantics.ConversionExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConversionExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConversionExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ConversionExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConversionExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind()) == T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SimpleBinaryOperationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.InvalidExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.InvalidExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.InvalidExpression()) == T$Microsoft.CodeAnalysis.Semantics.InvalidExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.InvalidExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.InvalidExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.InvalidExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LateBoundMemberReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILateBoundMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression()) == T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression()) == T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer()) == T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression()) == T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.MethodBindingExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression()) == T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ForLoopStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer()) == T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IPropertyInitializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.Expression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.Expression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.Expression()) == T$Microsoft.CodeAnalysis.Semantics.Expression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.Expression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.Expression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.Expression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause()) == T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.RelationalCaseClause() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IBranchStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IBranchStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IBranchStatement()) == T$Microsoft.CodeAnalysis.Semantics.IBranchStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBranchStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBranchStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IBranchStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression()) == T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression()) == T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IDefaultValueExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.FieldReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind()) == T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.UnaryOperationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IReturnStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IReturnStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IReturnStatement()) == T$Microsoft.CodeAnalysis.Semantics.IReturnStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IReturnStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IReturnStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IReturnStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IInstanceReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISyntheticLocalReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression()) == T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.TypeParameterObjectCreationExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeParameterObjectCreationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IStopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IStopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IStopStatement()) == T$Microsoft.CodeAnalysis.Semantics.IStopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IStopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IStopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IStopStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IThrowStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IThrowStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IThrowStatement()) == T$Microsoft.CodeAnalysis.Semantics.IThrowStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IThrowStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IThrowStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IThrowStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression()) == T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IAwaitExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression()) == T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression()) == T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayCreationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c()) == T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ArrayCreationExpression.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.FieldInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.FieldInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.FieldInitializer()) == T$Microsoft.CodeAnalysis.Semantics.FieldInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.FieldInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.FieldInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.FieldInitializer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFieldInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression()) == T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IsTypeExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer()) == T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ArrayInitializer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ILabelStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILabelStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILabelStatement()) == T$Microsoft.CodeAnalysis.Semantics.ILabelStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILabelStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILabelStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILabelStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.CaseKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.CaseKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.CaseKind()) == T$Microsoft.CodeAnalysis.Semantics.CaseKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.CaseKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression()) == T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.UnboundLambdaExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression()) == T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SizeOfExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression()) == T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IMethodBindingExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ConditionalChoiceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalChoiceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression()) == T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IInvalidExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions()) == T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.UnaryAndBinaryOperationExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.UsingStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.UsingStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.UsingStatement()) == T$Microsoft.CodeAnalysis.Semantics.UsingStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.UsingStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.UsingStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.UsingStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUsingStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ILockStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILockStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILockStatement()) == T$Microsoft.CodeAnalysis.Semantics.ILockStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILockStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILockStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILockStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.TryStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.TryStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.TryStatement()) == T$Microsoft.CodeAnalysis.Semantics.TryStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.TryStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.TryStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.TryStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITryStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.SwitchCase() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SwitchCase : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SwitchCase()) == T$Microsoft.CodeAnalysis.Semantics.SwitchCase;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SwitchCase(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SwitchCase(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SwitchCase() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISwitchCase(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.LoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.LoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LoopStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ArgumentKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ArgumentKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ArgumentKind()) == T$Microsoft.CodeAnalysis.Semantics.ArgumentKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArgumentKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArgumentKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ArgumentKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind()) == T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.InstanceReferenceKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression()) == T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.OperationExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.OperationExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.OperationExtensions()) == T$Microsoft.CodeAnalysis.Semantics.OperationExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.OperationExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector()) == T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.OperationExtensions.OperationCollector() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationWalker(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.EndStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.EndStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.EndStatement()) == T$Microsoft.CodeAnalysis.Semantics.EndStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.EndStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.EndStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.EndStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEndStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.BlockStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.BlockStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.BlockStatement()) == T$Microsoft.CodeAnalysis.Semantics.BlockStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.BlockStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.BlockStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.BlockStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBlockStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.LoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.BranchStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.BranchStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.BranchStatement()) == T$Microsoft.CodeAnalysis.Semantics.BranchStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.BranchStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.BranchStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.BranchStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBranchStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression()) == T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.PointerIndirectionReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause()) == T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression()) == T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IWithStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IWithStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IWithStatement()) == T$Microsoft.CodeAnalysis.Semantics.IWithStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IWithStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IWithStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IWithStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.LambdaExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LambdaExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LambdaExpression()) == T$Microsoft.CodeAnalysis.Semantics.LambdaExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LambdaExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LambdaExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LambdaExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILambdaExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression()) == T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause()) == T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SingleValueCaseClause() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISingleValueCaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression()) == T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ITypeOfExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression()) == T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IUnboundLambdaExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression()) == T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.OmittedArgumentExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IOmittedArgumentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IUsingStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IUsingStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IUsingStatement()) == T$Microsoft.CodeAnalysis.Semantics.IUsingStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUsingStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUsingStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IUsingStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.EventReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.MemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ITryStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ITryStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ITryStatement()) == T$Microsoft.CodeAnalysis.Semantics.ITryStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITryStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITryStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ITryStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IFixedStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IFixedStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IFixedStatement()) == T$Microsoft.CodeAnalysis.Semantics.IFixedStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFixedStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFixedStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IFixedStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind()) == T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression()) == T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression()) == T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.BinaryOperatorExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBinaryOperatorExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LocalReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ICatchClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ICatchClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ICatchClause()) == T$Microsoft.CodeAnalysis.Semantics.ICatchClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICatchClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICatchClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ICatchClause() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ArrayElementReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IndexedPropertyReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.PropertyReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIndexedPropertyReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPropertyReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression()) == T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.NullCoalescingExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.INullCoalescingExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.InvocationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.InvocationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.InvocationExpression()) == T$Microsoft.CodeAnalysis.Semantics.InvocationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.InvocationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.InvocationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.InvocationExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IConversionExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IConversionExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IConversionExpression()) == T$Microsoft.CodeAnalysis.Semantics.IConversionExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConversionExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConversionExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IConversionExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.BranchKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.BranchKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.BranchKind()) == T$Microsoft.CodeAnalysis.Semantics.BranchKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.BranchKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.BranchKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.BranchKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ParameterReferenceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression()) == T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.CaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.CaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.CaseClause()) == T$Microsoft.CodeAnalysis.Semantics.CaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.CaseClause() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement()) == T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ConditionalAccessInstanceExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression()) == T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.AssignmentExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.LabelStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LabelStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LabelStatement()) == T$Microsoft.CodeAnalysis.Semantics.LabelStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LabelStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LabelStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LabelStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILabelStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression()) == T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IAddressOfExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression()) == T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ParenthesizedExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParenthesizedExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IFieldReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer()) == T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause()) == T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression()) == T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ForEachLoopStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.LoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForEachLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind()) == T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.BinaryOperationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression()) == T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IIsTypeExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression()) == T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISizeOfExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.EmptyStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.EmptyStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.EmptyStatement()) == T$Microsoft.CodeAnalysis.Semantics.EmptyStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.EmptyStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.EmptyStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.EmptyStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEmptyStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement()) == T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ExpressionStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IArgument() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IArgument : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IArgument()) == T$Microsoft.CodeAnalysis.Semantics.IArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArgument(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArgument(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.LiteralExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LiteralExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LiteralExpression()) == T$Microsoft.CodeAnalysis.Semantics.LiteralExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LiteralExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LiteralExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LiteralExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILiteralExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ConversionKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ConversionKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ConversionKind()) == T$Microsoft.CodeAnalysis.Semantics.ConversionKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConversionKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ConversionKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ConversionKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression()) == T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.TypeOperationExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.SwitchStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.SwitchStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.SwitchStatement()) == T$Microsoft.CodeAnalysis.Semantics.SwitchStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.SwitchStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.SwitchStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.SwitchStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IEventReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IMemberReferenceExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer()) == T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IPointerIndirectionReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression()) == T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IObjectCreationExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression()) == T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.UnaryOperatorExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IUnaryOperatorExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IConditionalAccessInstanceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.WhileUntilLoopStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.ForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement()) == T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IExpressionStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ICaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ICaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ICaseClause()) == T$Microsoft.CodeAnalysis.Semantics.ICaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ICaseClause() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.LoopKind() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LoopKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LoopKind()) == T$Microsoft.CodeAnalysis.Semantics.LoopKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LoopKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LoopKind(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LoopKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause()) == T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.RangeCaseClause() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.CaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IRangeCaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement()) == T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISwitchStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IArrayElementReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression()) == T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ITypeOperationExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IfStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IfStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IfStatement()) == T$Microsoft.CodeAnalysis.Semantics.IfStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IfStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IfStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IfStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIfStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement()) == T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.LockStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.LockStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.LockStatement()) == T$Microsoft.CodeAnalysis.Semantics.LockStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.LockStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.LockStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.LockStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILockStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ReturnStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ReturnStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ReturnStatement()) == T$Microsoft.CodeAnalysis.Semantics.ReturnStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ReturnStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ReturnStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ReturnStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IReturnStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression()) == T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement()) == T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.VariableDeclarationStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IParameterReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.CatchClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.CatchClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.CatchClause()) == T$Microsoft.CodeAnalysis.Semantics.CatchClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.CatchClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.CatchClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.CatchClause() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICatchClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation()) == T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ISymbolWithOperation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.OperationVisitor() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.OperationVisitor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor()) == T$Microsoft.CodeAnalysis.Semantics.OperationVisitor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.OperationVisitor(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.OperationVisitor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause()) == T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IRelationalCaseClause() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICaseClause(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression()) == T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IInvocationExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasArgumentsExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer()) == T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ParameterInitializer() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.SymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IParameterInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ISymbolInitializer(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration()) == T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.VariableDeclaration() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.WithStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.WithStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.WithStatement()) == T$Microsoft.CodeAnalysis.Semantics.WithStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.WithStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.WithStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.WithStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IWithStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression()) == T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.ILocalReferenceExpression() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IncrementExpression() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IncrementExpression : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IncrementExpression()) == T$Microsoft.CodeAnalysis.Semantics.IncrementExpression;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IncrementExpression(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IncrementExpression(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IncrementExpression() == $T || $Subtype(T$Microsoft.CodeAnalysis.Semantics.CompoundAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IIncrementExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ICompoundAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IAssignmentExpression(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IHasOperatorMethodExpression(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.StopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.StopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.StopStatement()) == T$Microsoft.CodeAnalysis.Semantics.StopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.StopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.StopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.StopStatement() == $T || $Subtype(T$Microsoft.CodeAnalysis.Operation(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IStopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));




function T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement()) == T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.Semantics.ILoopStatement(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration()) == T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IVariableDeclaration() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IBlockStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IBlockStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IBlockStatement()) == T$Microsoft.CodeAnalysis.Semantics.IBlockStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBlockStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IBlockStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IBlockStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement() : Ref;
const unique T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement()) == T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement(), $T) <==> (T$Microsoft.CodeAnalysis.Semantics.IInvalidStatement() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IOperation(), $T)));


function T$Microsoft.CodeAnalysis.ModelExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.ModelExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ModelExtensions()) == T$Microsoft.CodeAnalysis.ModelExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ModelExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ModelExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.ModelExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CompilationStage() : Ref;
const unique T$Microsoft.CodeAnalysis.CompilationStage : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CompilationStage()) == T$Microsoft.CodeAnalysis.CompilationStage;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CompilationStage(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CompilationStage(), $T) <==> (T$Microsoft.CodeAnalysis.CompilationStage() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DeclarationComputer() : Ref;
const unique T$Microsoft.CodeAnalysis.DeclarationComputer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DeclarationComputer()) == T$Microsoft.CodeAnalysis.DeclarationComputer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DeclarationComputer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DeclarationComputer(), $T) <==> (T$Microsoft.CodeAnalysis.DeclarationComputer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DeclarationComputer.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.DeclarationComputer.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DeclarationComputer.$$c()) == T$Microsoft.CodeAnalysis.DeclarationComputer.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DeclarationComputer.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DeclarationComputer.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.DeclarationComputer.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0() : Ref;
const unique T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0()) == T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0(), $T) <==> (T$Microsoft.CodeAnalysis.DeclarationComputer.$$c__DisplayClass4_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CompilationOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.CompilationOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CompilationOptions()) == T$Microsoft.CodeAnalysis.CompilationOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CompilationOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CompilationOptions(), $T) <==> (T$Microsoft.CodeAnalysis.CompilationOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CompilationOptions.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CompilationOptions.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CompilationOptions.$$c()) == T$Microsoft.CodeAnalysis.CompilationOptions.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CompilationOptions.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CompilationOptions.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CompilationOptions.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SpecialType() : Ref;
const unique T$Microsoft.CodeAnalysis.SpecialType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SpecialType()) == T$Microsoft.CodeAnalysis.SpecialType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SpecialType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SpecialType(), $T) <==> (T$Microsoft.CodeAnalysis.SpecialType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags() : Ref;
const unique T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags()) == T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags(), $T) } $Subtype(T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags(), $T) <==> (T$Microsoft.CodeAnalysis.WellKnownDiagnosticTags() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(TNode), T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(TNode), T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(T$TNode())) == T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator()) == T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c()) == T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SeparatedSyntaxList`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IAliasSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IAliasSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IAliasSymbol()) == T$Microsoft.CodeAnalysis.IAliasSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IAliasSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IAliasSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IAliasSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DllImportData() : Ref;
const unique T$Microsoft.CodeAnalysis.DllImportData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DllImportData()) == T$Microsoft.CodeAnalysis.DllImportData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DllImportData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DllImportData(), $T) <==> (T$Microsoft.CodeAnalysis.DllImportData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IPlatformInvokeInformation(), $T)));


function T$Microsoft.CodeAnalysis.TypedConstant() : Ref;
const unique T$Microsoft.CodeAnalysis.TypedConstant : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypedConstant()) == T$Microsoft.CodeAnalysis.TypedConstant;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypedConstant(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypedConstant(), $T) <==> (T$Microsoft.CodeAnalysis.TypedConstant() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.IPropertySymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IPropertySymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IPropertySymbol()) == T$Microsoft.CodeAnalysis.IPropertySymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IPropertySymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IPropertySymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IPropertySymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataReferenceResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataReferenceResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataReferenceResolver()) == T$Microsoft.CodeAnalysis.MetadataReferenceResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataReferenceResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataReferenceResolver(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataReferenceResolver() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.FormattedSymbolList() : Ref;
const unique T$Microsoft.CodeAnalysis.FormattedSymbolList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.FormattedSymbolList()) == T$Microsoft.CodeAnalysis.FormattedSymbolList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.FormattedSymbolList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.FormattedSymbolList(), $T) <==> (T$Microsoft.CodeAnalysis.FormattedSymbolList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T)));


function T$Microsoft.CodeAnalysis.TypeLayout() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeLayout : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeLayout()) == T$Microsoft.CodeAnalysis.TypeLayout;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeLayout(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeLayout(), $T) <==> (T$Microsoft.CodeAnalysis.TypeLayout() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IMessageSerializable() : Ref;
const unique T$Microsoft.CodeAnalysis.IMessageSerializable : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IMessageSerializable()) == T$Microsoft.CodeAnalysis.IMessageSerializable;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T) <==> (T$Microsoft.CodeAnalysis.IMessageSerializable() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.HashSetExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.HashSetExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.HashSetExtensions()) == T$Microsoft.CodeAnalysis.HashSetExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.HashSetExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.HashSetExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.HashSetExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.StrongNameKeys() : Ref;
const unique T$Microsoft.CodeAnalysis.StrongNameKeys : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StrongNameKeys()) == T$Microsoft.CodeAnalysis.StrongNameKeys;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StrongNameKeys(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StrongNameKeys(), $T) <==> (T$Microsoft.CodeAnalysis.StrongNameKeys() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral()) == T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ITokenDeferral() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.Win32Resource() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.Win32Resource : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.Win32Resource()) == T$Microsoft.CodeAnalysis.CodeGen.Win32Resource;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.Win32Resource(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.Win32Resource(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.Win32Resource() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IWin32Resource(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct()) == T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef(), $T)|| $Subtype(T$Microsoft.Cci.INestedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.INestedTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition()) == T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SignatureOnlyLocalDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ILocalDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.MethodBody() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.MethodBody : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.MethodBody()) == T$Microsoft.CodeAnalysis.CodeGen.MethodBody;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MethodBody(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MethodBody(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.MethodBody() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodBody(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ScopeType() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ScopeType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ScopeType()) == T$Microsoft.CodeAnalysis.CodeGen.ScopeType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ScopeType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ScopeType(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ScopeType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant()) == T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.MetadataConstant() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition()) == T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalConstantDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ILocalDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMethodReference(), $T)|| $Subtype(T$Microsoft.Cci.ISignature(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference()) == T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ICustomAttribute(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument()) == T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PermissionSetAttributeWithFileReference.HexPropertyMetadataNamedArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataNamedArgument(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T), T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T), T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T$T())) == T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.TokenMap`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CodeGen.MappedField() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.MappedField : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.MappedField()) == T$Microsoft.CodeAnalysis.CodeGen.MappedField;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MappedField(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MappedField(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.MappedField() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter()) == T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket()) == T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails()) == T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.INamespaceTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer()) == T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.FieldComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c()) == T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0()) == T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass24_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0()) == T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.$$c__DisplayClass27_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SequencePointList() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SequencePointList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SequencePointList()) == T$Microsoft.CodeAnalysis.CodeGen.SequencePointList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SequencePointList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SequencePointList(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SequencePointList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan()) == T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SequencePointList.OffsetAndSpan() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData()) == T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.DynamicAnalysisMethodBodyData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument()) == T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.MetadataNamedArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataNamedArgument(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider()) == T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef()) == T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.DefaultTypeDef() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.ITypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.DebugId() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.DebugId : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.DebugId()) == T$Microsoft.CodeAnalysis.CodeGen.DebugId;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DebugId(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.DebugId(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.DebugId() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField()) == T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IFieldDefinition(), $T)|| $Subtype(T$Microsoft.Cci.ITypeDefinitionMember(), $T)|| $Subtype(T$Microsoft.Cci.ITypeMemberReference(), $T)|| $Subtype(T$Microsoft.Cci.IReference(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)|| $Subtype(T$Microsoft.Cci.IDefinition(), $T)|| $Subtype(T$Microsoft.Cci.IFieldReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter()) == T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch()) == T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.EmitStringCompareAndBranch() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode()) == T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SwitchStringJumpTableEmitter.GetStringHashCode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator()) == T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray()) == T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.MetadataCreateArray() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField()) == T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.InstrumentationPayloadRootField() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SourceSpan() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SourceSpan : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SourceSpan()) == T$Microsoft.CodeAnalysis.CodeGen.SourceSpan;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SourceSpan(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SourceSpan(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SourceSpan() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser()) == T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.SynthesizedLocalOrdinalsDispenser() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IParameterTypeInformation(), $T)|| $Subtype(T$Microsoft.Cci.IParameterListEntry(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions()) == T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILOpCodeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T), T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T), T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T$T())) == T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ItemTokenMap`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo()) == T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BlockType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.Reachability() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.PooledBasicBlock() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlock(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerLeaderBlock() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.SwitchBlock() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.BasicBlockWithHandlerScope(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitState() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ILMarker() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LabelInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TScopeInfo() : Ref;
const unique T$TScopeInfo : int;
axiom $TypeConstructor(T$TScopeInfo()) == T$TScopeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$TScopeInfo(), $T) } $Subtype(T$TScopeInfo(), $T) <==> (T$TScopeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerScope() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.LocalScopeInfo(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ExceptionHandlerContainerScope() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeInfo(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeBounds() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer()) == T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILBuilder.ScopeComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo()) == T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalSlotDebugInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker()) == T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ReferenceDependencyWalker() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager()) == T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature()) == T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalSlotManager.LocalSignature() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle()) == T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ILEmitStyle() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData()) == T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData()) == T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.MethodData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0()) == T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c__DisplayClass4_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c()) == T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.CompilationTestData.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayMethodKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayConstructor() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayGet() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArrayAddress() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet()) == T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArrayMethods.ArraySet() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethod(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo()) == T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ArraySetValueParameterInfo() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ArrayMethodParameterInfo(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition()) == T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalDefinition() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.ILocalDefinition(), $T)|| $Subtype(T$Microsoft.Cci.INamedEntity(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf()) == T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.MetadataTypeOf() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMetadataExpression(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException()) == T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.PermissionSetFileReadException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter()) == T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalOrParameter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField()) == T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ModuleVersionIdField() == $T || $Subtype(T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId()) == T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.LocalDebugId() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo()) == T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint() : Ref;
const unique T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint()) == T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint(), $T) <==> (T$Microsoft.CodeAnalysis.CodeGen.RawSequencePoint() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache()) == T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache() == $T || $Subtype(T$Microsoft.CodeAnalysis.CachingFactory`2(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0()) == T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentIncludeCache.$$c__DisplayClass5_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTreeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTreeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTreeExtensions()) == T$Microsoft.CodeAnalysis.SyntaxTreeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTreeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTreeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTreeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0()) == T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTreeExtensions.$$c__DisplayClass0_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ILocalSymbolInternal() : Ref;
const unique T$Microsoft.CodeAnalysis.ILocalSymbolInternal : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ILocalSymbolInternal()) == T$Microsoft.CodeAnalysis.ILocalSymbolInternal;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ILocalSymbolInternal(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ILocalSymbolInternal(), $T) <==> (T$Microsoft.CodeAnalysis.ILocalSymbolInternal() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ILocalSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SourceFileResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.SourceFileResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SourceFileResolver()) == T$Microsoft.CodeAnalysis.SourceFileResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SourceFileResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SourceFileResolver(), $T) <==> (T$Microsoft.CodeAnalysis.SourceFileResolver() == $T || $Subtype(T$Microsoft.CodeAnalysis.SourceReferenceResolver(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()) == T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IMarshallingInformation(), $T)));




function T$Microsoft.CodeAnalysis.DocumentationMode() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationMode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationMode()) == T$Microsoft.CodeAnalysis.DocumentationMode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationMode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationMode(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationMode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2(K : Ref,V : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2 : int;
axiom(forall K : Ref,V : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2(K,V), T$Microsoft.CodeAnalysis.SmallDictionary`2(T$K(),T$V())) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2(K,V), T$Microsoft.CodeAnalysis.SmallDictionary`2(T$K(),T$V())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2(T$K(),T$V())) == T$Microsoft.CodeAnalysis.SmallDictionary`2;
axiom(forall K : Ref,V : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2(K,V), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2(K,V), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2(K,V) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.SmallDictionary`2.Node() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.Node : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.Node()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.Node;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.Node(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.Node(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.Node() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.NodeLinked() == $T || $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.Node(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNodeHead() == $T || $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode() == $T || $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.Node(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.AvlNode() == $T || $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.HashedNode(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.KeyCollection.EnumerableImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.ValueCollection.EnumerableImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl()) == T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl(), $T) <==> (T$Microsoft.CodeAnalysis.SmallDictionary`2.EnumerableImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(TKey : Ref,TValue : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.CachingIdentityFactory`2 : int;
axiom(forall TKey : Ref,TValue : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(TKey,TValue), T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(T$TKey(),T$TValue())) } $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(TKey,TValue), T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(T$TKey(),T$TValue())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(T$TKey(),T$TValue())) == T$Microsoft.CodeAnalysis.CachingIdentityFactory`2;
axiom(forall TKey : Ref,TValue : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(TKey,TValue), $T) } $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(TKey,TValue), $T) <==> (T$Microsoft.CodeAnalysis.CachingIdentityFactory`2(TKey,TValue) == $T || $Subtype(T$Microsoft.CodeAnalysis.CachingBase`1(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry()), $T)));




function T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry() : Ref;
const unique T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry()) == T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry(), $T) <==> (T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.Entry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0() : Ref;
const unique T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0()) == T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0(), $T) <==> (T$Microsoft.CodeAnalysis.CachingIdentityFactory`2.$$c__DisplayClass8_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MergedAliases() : Ref;
const unique T$Microsoft.CodeAnalysis.MergedAliases : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MergedAliases()) == T$Microsoft.CodeAnalysis.MergedAliases;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MergedAliases(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MergedAliases(), $T) <==> (T$Microsoft.CodeAnalysis.MergedAliases() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IAssemblySymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IAssemblySymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IAssemblySymbol()) == T$Microsoft.CodeAnalysis.IAssemblySymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IAssemblySymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxAnnotation() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxAnnotation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxAnnotation()) == T$Microsoft.CodeAnalysis.SyntaxAnnotation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxAnnotation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxAnnotation(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxAnnotation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IObjectWritable(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c()) == T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxAnnotation.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference() : Ref;
const unique T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference()) == T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference(), $T) <==> (T$Microsoft.CodeAnalysis.CommandLineAnalyzerReference() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SpecialMembers() : Ref;
const unique T$Microsoft.CodeAnalysis.SpecialMembers : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SpecialMembers()) == T$Microsoft.CodeAnalysis.SpecialMembers;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SpecialMembers(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SpecialMembers(), $T) <==> (T$Microsoft.CodeAnalysis.SpecialMembers() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ChildSyntaxList() : Ref;
const unique T$Microsoft.CodeAnalysis.ChildSyntaxList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ChildSyntaxList()) == T$Microsoft.CodeAnalysis.ChildSyntaxList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList(), $T) <==> (T$Microsoft.CodeAnalysis.ChildSyntaxList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator()) == T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.ChildSyntaxList.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed() : Ref;
const unique T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed()) == T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed(), $T) <==> (T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator()) == T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl() : Ref;
const unique T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl()) == T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl(), $T) <==> (T$Microsoft.CodeAnalysis.ChildSyntaxList.Reversed.EnumeratorImpl() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentity() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentity : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentity()) == T$Microsoft.CodeAnalysis.AssemblyIdentity;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentity(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentity(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Boxes() : Ref;
const unique T$Microsoft.CodeAnalysis.Boxes : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Boxes()) == T$Microsoft.CodeAnalysis.Boxes;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Boxes(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Boxes(), $T) <==> (T$Microsoft.CodeAnalysis.Boxes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataImageKind() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataImageKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataImageKind()) == T$Microsoft.CodeAnalysis.MetadataImageKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataImageKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataImageKind(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataImageKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticInfo()) == T$Microsoft.CodeAnalysis.DiagnosticInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticInfo(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IObjectWritable(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c()) == T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0()) == T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticInfo.$$c__DisplayClass13_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeUsageInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeUsageInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeUsageInfo()) == T$Microsoft.CodeAnalysis.AttributeUsageInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeUsageInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeUsageInfo(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeUsageInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage()) == T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeUsageInfo.PackedAttributeUsage() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument()) == T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeUsageInfo.ValidTargetsStringLocalizableErrorArgument() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T)));


function T$Microsoft.CodeAnalysis.INamedTypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.INamedTypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.INamedTypeSymbol()) == T$Microsoft.CodeAnalysis.INamedTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.INamedTypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.INamedTypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.INamedTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ITypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(TEarlyBinder : Ref,TNamedTypeSymbol : Ref,TAttributeSyntax : Ref,TAttributeLocation : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4 : int;
axiom(forall TEarlyBinder : Ref,TNamedTypeSymbol : Ref,TAttributeSyntax : Ref,TAttributeLocation : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(TEarlyBinder,TNamedTypeSymbol,TAttributeSyntax,TAttributeLocation), T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(T$TEarlyBinder(),T$TNamedTypeSymbol(),T$TAttributeSyntax(),T$TAttributeLocation())) } $Subtype(T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(TEarlyBinder,TNamedTypeSymbol,TAttributeSyntax,TAttributeLocation), T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(T$TEarlyBinder(),T$TNamedTypeSymbol(),T$TAttributeSyntax(),T$TAttributeLocation())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(T$TEarlyBinder(),T$TNamedTypeSymbol(),T$TAttributeSyntax(),T$TAttributeLocation())) == T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4;
axiom(forall TEarlyBinder : Ref,TNamedTypeSymbol : Ref,TAttributeSyntax : Ref,TAttributeLocation : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(TEarlyBinder,TNamedTypeSymbol,TAttributeSyntax,TAttributeLocation), $T) } $Subtype(T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(TEarlyBinder,TNamedTypeSymbol,TAttributeSyntax,TAttributeLocation), $T) <==> (T$Microsoft.CodeAnalysis.EarlyDecodeWellKnownAttributeArguments`4(TEarlyBinder,TNamedTypeSymbol,TAttributeSyntax,TAttributeLocation) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TEarlyBinder() : Ref;
const unique T$TEarlyBinder : int;
axiom $TypeConstructor(T$TEarlyBinder()) == T$TEarlyBinder;
axiom(forall  $T: Ref:: {  $Subtype(T$TEarlyBinder(), $T) } $Subtype(T$TEarlyBinder(), $T) <==> (T$TEarlyBinder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Microsoft.CodeAnalysis.SyntaxToken() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxToken : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxToken()) == T$Microsoft.CodeAnalysis.SyntaxToken;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxToken(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxToken(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxToken() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxToken.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxToken.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxToken.$$c()) == T$Microsoft.CodeAnalysis.SyntaxToken.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxToken.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxToken.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxToken.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Location() : Ref;
const unique T$Microsoft.CodeAnalysis.Location : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Location()) == T$Microsoft.CodeAnalysis.Location;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Location(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Location(), $T) <==> (T$Microsoft.CodeAnalysis.Location() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AdditionalTextFile() : Ref;
const unique T$Microsoft.CodeAnalysis.AdditionalTextFile : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AdditionalTextFile()) == T$Microsoft.CodeAnalysis.AdditionalTextFile;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AdditionalTextFile(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AdditionalTextFile(), $T) <==> (T$Microsoft.CodeAnalysis.AdditionalTextFile() == $T || $Subtype(T$Microsoft.CodeAnalysis.AdditionalText(), $T)));


function T$Microsoft.CodeAnalysis.SpeculativeBindingOption() : Ref;
const unique T$Microsoft.CodeAnalysis.SpeculativeBindingOption : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SpeculativeBindingOption()) == T$Microsoft.CodeAnalysis.SpeculativeBindingOption;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SpeculativeBindingOption(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SpeculativeBindingOption(), $T) <==> (T$Microsoft.CodeAnalysis.SpeculativeBindingOption() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataReferenceProperties() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataReferenceProperties : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataReferenceProperties()) == T$Microsoft.CodeAnalysis.MetadataReferenceProperties;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataReferenceProperties(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataReferenceProperties(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataReferenceProperties() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.VarianceKind() : Ref;
const unique T$Microsoft.CodeAnalysis.VarianceKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.VarianceKind()) == T$Microsoft.CodeAnalysis.VarianceKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.VarianceKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.VarianceKind(), $T) <==> (T$Microsoft.CodeAnalysis.VarianceKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Grouping`2(TKey : Ref,TElement : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Grouping`2 : int;
axiom(forall TKey : Ref,TElement : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Grouping`2(TKey,TElement), T$Microsoft.CodeAnalysis.Grouping`2(T$TKey(),T$TElement())) } $Subtype(T$Microsoft.CodeAnalysis.Grouping`2(TKey,TElement), T$Microsoft.CodeAnalysis.Grouping`2(T$TKey(),T$TElement())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Grouping`2(T$TKey(),T$TElement())) == T$Microsoft.CodeAnalysis.Grouping`2;
axiom(forall TKey : Ref,TElement : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Grouping`2(TKey,TElement), $T) } $Subtype(T$Microsoft.CodeAnalysis.Grouping`2(TKey,TElement), $T) <==> (T$Microsoft.CodeAnalysis.Grouping`2(TKey,TElement) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$System.Linq.IGrouping`2(TKey,TElement), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.SymbolVisitor`1(TResult : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolVisitor`1 : int;
axiom(forall TResult : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor`1(TResult), T$Microsoft.CodeAnalysis.SymbolVisitor`1(T$TResult())) } $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor`1(TResult), T$Microsoft.CodeAnalysis.SymbolVisitor`1(T$TResult())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolVisitor`1(T$TResult())) == T$Microsoft.CodeAnalysis.SymbolVisitor`1;
axiom(forall TResult : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor`1(TResult), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor`1(TResult), $T) <==> (T$Microsoft.CodeAnalysis.SymbolVisitor`1(TResult) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.EnumOverflowKind() : Ref;
const unique T$Microsoft.CodeAnalysis.EnumOverflowKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EnumOverflowKind()) == T$Microsoft.CodeAnalysis.EnumOverflowKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EnumOverflowKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EnumOverflowKind(), $T) <==> (T$Microsoft.CodeAnalysis.EnumOverflowKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget() : Ref;
const unique T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()) == T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget(), $T) <==> (T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer()) == T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.ByteSequenceComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts()) == T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.SmallConcurrentSetOfInts() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder()) == T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0()) == T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.PooledStringBuilder.$$c__DisplayClass10_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(TKey : Ref,TElement : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2 : int;
axiom(forall TKey : Ref,TElement : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(TKey,TElement), T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(T$TKey(),T$TElement())) } $Subtype(T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(TKey,TElement), T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(T$TKey(),T$TElement())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(T$TKey(),T$TElement())) == T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2;
axiom(forall TKey : Ref,TElement : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(TKey,TElement), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(TKey,TElement), $T) <==> (T$Microsoft.CodeAnalysis.Collections.CachingDictionary`2(TKey,TElement) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T), T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T), T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T$T())) == T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T), $T) <==> (T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0()) == T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.PooledHashSet`1.$$c__DisplayClass4_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T : Ref,R : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.KeyedStack`2 : int;
axiom(forall T : Ref,R : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T,R), T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T$T(),T$R())) } $Subtype(T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T,R), T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T$T(),T$R())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T$T(),T$R())) == T$Microsoft.CodeAnalysis.Collections.KeyedStack`2;
axiom(forall T : Ref,R : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T,R), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T,R), $T) <==> (T$Microsoft.CodeAnalysis.Collections.KeyedStack`2(T,R) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$R() : Ref;
const unique T$R : int;
axiom $TypeConstructor(T$R()) == T$R;
axiom(forall  $T: Ref:: {  $Subtype(T$R(), $T) } $Subtype(T$R(), $T) <==> (T$R() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.OrderedSet`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T), T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T), T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T$T())) == T$Microsoft.CodeAnalysis.Collections.OrderedSet`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T), $T) <==> (T$Microsoft.CodeAnalysis.Collections.OrderedSet`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), $T)));



function T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(K : Ref,V : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2 : int;
axiom(forall K : Ref,V : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(K,V), T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(T$K(),T$V())) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(K,V), T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(T$K(),T$V())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(T$K(),T$V())) == T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2;
axiom(forall K : Ref,V : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(K,V), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(K,V), $T) <==> (T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2(K,V) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet()) == T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator()) == T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.ValueSet.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0()) == T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.OrderPreservingMultiDictionary`2.$$c__DisplayClass4_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream()) == T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.ImmutableMemoryStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(K : Ref,V : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2 : int;
axiom(forall K : Ref,V : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(K,V), T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(T$K(),T$V())) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(K,V), T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(T$K(),T$V())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(T$K(),T$V())) == T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2;
axiom(forall K : Ref,V : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(K,V), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(K,V), $T) <==> (T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2(K,V) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0()) == T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0(), $T) <==> (T$Microsoft.CodeAnalysis.Collections.PooledDictionary`2.$$c__DisplayClass5_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticDescriptor() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticDescriptor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticDescriptor()) == T$Microsoft.CodeAnalysis.DiagnosticDescriptor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticDescriptor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticDescriptor(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticDescriptor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommitHashAttribute() : Ref;
const unique T$Microsoft.CodeAnalysis.CommitHashAttribute : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommitHashAttribute()) == T$Microsoft.CodeAnalysis.CommitHashAttribute;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommitHashAttribute(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommitHashAttribute(), $T) <==> (T$Microsoft.CodeAnalysis.CommitHashAttribute() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ObsoleteAttributeKind() : Ref;
const unique T$Microsoft.CodeAnalysis.ObsoleteAttributeKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ObsoleteAttributeKind()) == T$Microsoft.CodeAnalysis.ObsoleteAttributeKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ObsoleteAttributeKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ObsoleteAttributeKind(), $T) <==> (T$Microsoft.CodeAnalysis.ObsoleteAttributeKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ICompilationUnitSyntax() : Ref;
const unique T$Microsoft.CodeAnalysis.ICompilationUnitSyntax : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ICompilationUnitSyntax()) == T$Microsoft.CodeAnalysis.ICompilationUnitSyntax;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ICompilationUnitSyntax(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ICompilationUnitSyntax(), $T) <==> (T$Microsoft.CodeAnalysis.ICompilationUnitSyntax() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ResourceDescription() : Ref;
const unique T$Microsoft.CodeAnalysis.ResourceDescription : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ResourceDescription()) == T$Microsoft.CodeAnalysis.ResourceDescription;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ResourceDescription(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ResourceDescription(), $T) <==> (T$Microsoft.CodeAnalysis.ResourceDescription() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.IFileReference(), $T)));


function T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider()) == T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider(), $T) <==> (T$Microsoft.CodeAnalysis.ResourceDescription.ResourceHashProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.CryptographicHashProvider(), $T)));


function T$Microsoft.CodeAnalysis.FormattedSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.FormattedSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.FormattedSymbol()) == T$Microsoft.CodeAnalysis.FormattedSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.FormattedSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.FormattedSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.FormattedSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMessageSerializable(), $T)));


function T$Microsoft.CodeAnalysis.EnumBounds() : Ref;
const unique T$Microsoft.CodeAnalysis.EnumBounds : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EnumBounds()) == T$Microsoft.CodeAnalysis.EnumBounds;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EnumBounds(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EnumBounds(), $T) <==> (T$Microsoft.CodeAnalysis.EnumBounds() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions()) == T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayLocalOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyIdentityParts() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyIdentityParts : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyIdentityParts()) == T$Microsoft.CodeAnalysis.AssemblyIdentityParts;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityParts(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityParts(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyIdentityParts() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ModuleReferences`1(TAssemblySymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ModuleReferences`1 : int;
axiom(forall TAssemblySymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ModuleReferences`1(TAssemblySymbol), T$Microsoft.CodeAnalysis.ModuleReferences`1(T$TAssemblySymbol())) } $Subtype(T$Microsoft.CodeAnalysis.ModuleReferences`1(TAssemblySymbol), T$Microsoft.CodeAnalysis.ModuleReferences`1(T$TAssemblySymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ModuleReferences`1(T$TAssemblySymbol())) == T$Microsoft.CodeAnalysis.ModuleReferences`1;
axiom(forall TAssemblySymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ModuleReferences`1(TAssemblySymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.ModuleReferences`1(TAssemblySymbol), $T) <==> (T$Microsoft.CodeAnalysis.ModuleReferences`1(TAssemblySymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.SymbolVisitor() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolVisitor : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolVisitor()) == T$Microsoft.CodeAnalysis.SymbolVisitor;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolVisitor() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TypedConstantKind() : Ref;
const unique T$Microsoft.CodeAnalysis.TypedConstantKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypedConstantKind()) == T$Microsoft.CodeAnalysis.TypedConstantKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypedConstantKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypedConstantKind(), $T) <==> (T$Microsoft.CodeAnalysis.TypedConstantKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DataFlowAnalysis() : Ref;
const unique T$Microsoft.CodeAnalysis.DataFlowAnalysis : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DataFlowAnalysis()) == T$Microsoft.CodeAnalysis.DataFlowAnalysis;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DataFlowAnalysis(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DataFlowAnalysis(), $T) <==> (T$Microsoft.CodeAnalysis.DataFlowAnalysis() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonEventEarlyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.EarlyWellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonPropertyWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.IDiscardSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IDiscardSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IDiscardSymbol()) == T$Microsoft.CodeAnalysis.IDiscardSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IDiscardSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IDiscardSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IDiscardSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal() : Ref;
const unique T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal()) == T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal(), $T) <==> (T$Microsoft.CodeAnalysis.ISourceAssemblySymbolInternal() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISourceAssemblySymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IAssemblySymbol(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.VersionHelper() : Ref;
const unique T$Microsoft.CodeAnalysis.VersionHelper : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.VersionHelper()) == T$Microsoft.CodeAnalysis.VersionHelper;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.VersionHelper(), $T) } $Subtype(T$Microsoft.CodeAnalysis.VersionHelper(), $T) <==> (T$Microsoft.CodeAnalysis.VersionHelper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SpecialTypeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.SpecialTypeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SpecialTypeExtensions()) == T$Microsoft.CodeAnalysis.SpecialTypeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SpecialTypeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SpecialTypeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.SpecialTypeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId()) == T$Microsoft.CodeAnalysis.DocumentationCommentId;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T), T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T), T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T$T())) == T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1(T) == $T || $Subtype(T$Roslyn.Utilities.ObjectPool`1(T$Microsoft.Cci.DummyTypeReference()), $T)));



function T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c()) == T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.ListPool`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator()) == T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator() == $T || $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator()) == T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.DeclarationGenerator.Generator() == $T || $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor`1(T$Microsoft.Cci.DummyTypeReference()), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator()) == T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.ReferenceGenerator() == $T || $Subtype(T$Microsoft.CodeAnalysis.SymbolVisitor`1(T$Microsoft.Cci.DummyTypeReference()), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser()) == T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TDestination() : Ref;
const unique T$TDestination : int;
axiom $TypeConstructor(T$TDestination()) == T$TDestination;
axiom(forall  $T: Ref:: {  $Subtype(T$TDestination(), $T) } $Subtype(T$TDestination(), $T) <==> (T$TDestination() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo()) == T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo(), $T) <==> (T$Microsoft.CodeAnalysis.DocumentationCommentId.Parser.ParameterInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonAttributeDataComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonAttributeDataComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonAttributeDataComparer()) == T$Microsoft.CodeAnalysis.CommonAttributeDataComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonAttributeDataComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonAttributeDataComparer(), $T) <==> (T$Microsoft.CodeAnalysis.CommonAttributeDataComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataImageReference() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataImageReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataImageReference()) == T$Microsoft.CodeAnalysis.MetadataImageReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataImageReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataImageReference(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataImageReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.PortableExecutableReference(), $T)));


function T$Microsoft.CodeAnalysis.ReportDiagnostic() : Ref;
const unique T$Microsoft.CodeAnalysis.ReportDiagnostic : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ReportDiagnostic()) == T$Microsoft.CodeAnalysis.ReportDiagnostic;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ReportDiagnostic(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ReportDiagnostic(), $T) <==> (T$Microsoft.CodeAnalysis.ReportDiagnostic() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ReferenceDirective() : Ref;
const unique T$Microsoft.CodeAnalysis.ReferenceDirective : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ReferenceDirective()) == T$Microsoft.CodeAnalysis.ReferenceDirective;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ReferenceDirective(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ReferenceDirective(), $T) <==> (T$Microsoft.CodeAnalysis.ReferenceDirective() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.XmlFileResolver() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlFileResolver : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlFileResolver()) == T$Microsoft.CodeAnalysis.XmlFileResolver;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlFileResolver(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlFileResolver(), $T) <==> (T$Microsoft.CodeAnalysis.XmlFileResolver() == $T || $Subtype(T$Microsoft.CodeAnalysis.XmlReferenceResolver(), $T)));


function T$Microsoft.CodeAnalysis.BuildPaths() : Ref;
const unique T$Microsoft.CodeAnalysis.BuildPaths : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.BuildPaths()) == T$Microsoft.CodeAnalysis.BuildPaths;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.BuildPaths(), $T) } $Subtype(T$Microsoft.CodeAnalysis.BuildPaths(), $T) <==> (T$Microsoft.CodeAnalysis.BuildPaths() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataImportOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataImportOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataImportOptions()) == T$Microsoft.CodeAnalysis.MetadataImportOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataImportOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataImportOptions(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataImportOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StreamErrorLogger() : Ref;
const unique T$Microsoft.CodeAnalysis.StreamErrorLogger : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StreamErrorLogger()) == T$Microsoft.CodeAnalysis.StreamErrorLogger;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger(), $T) <==> (T$Microsoft.CodeAnalysis.StreamErrorLogger() == $T || $Subtype(T$Microsoft.CodeAnalysis.ErrorLogger(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet() : Ref;
const unique T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet()) == T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet(), $T) <==> (T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer() : Ref;
const unique T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer()) == T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer(), $T) <==> (T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.Comparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c()) == T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.StreamErrorLogger.DiagnosticDescriptorSet.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c()) == T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.StreamErrorLogger.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AdditionalText() : Ref;
const unique T$Microsoft.CodeAnalysis.AdditionalText : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AdditionalText()) == T$Microsoft.CodeAnalysis.AdditionalText;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AdditionalText(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AdditionalText(), $T) <==> (T$Microsoft.CodeAnalysis.AdditionalText() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTreeComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTreeComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTreeComparer()) == T$Microsoft.CodeAnalysis.SyntaxTreeComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTreeComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTreeComparer(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTreeComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.InternalErrorCode() : Ref;
const unique T$Microsoft.CodeAnalysis.InternalErrorCode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.InternalErrorCode()) == T$Microsoft.CodeAnalysis.InternalErrorCode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.InternalErrorCode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.InternalErrorCode(), $T) <==> (T$Microsoft.CodeAnalysis.InternalErrorCode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer()) == T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer() == $T || $Subtype(T$Microsoft.CodeAnalysis.AssemblyIdentityComparer(), $T)));


function T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary()) == T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value()) == T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkAssemblyDictionary.Value() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary()) == T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key()) == T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Key() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value() : Ref;
const unique T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value()) == T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value(), $T) <==> (T$Microsoft.CodeAnalysis.DesktopAssemblyIdentityComparer.FrameworkRetargetingDictionary.Value() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy() : Ref;
const unique T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy()) == T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy(), $T) <==> (T$Microsoft.CodeAnalysis.AssemblyPortabilityPolicy() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity() : Ref;
const unique T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity()) == T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity(), $T) } $Subtype(T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity(), $T) <==> (T$Microsoft.CodeAnalysis.InternalDiagnosticSeverity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation()) == T$Microsoft.CodeAnalysis.Compilation;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TLocation() : Ref;
const unique T$TLocation : int;
axiom $TypeConstructor(T$TLocation()) == T$TLocation;
axiom(forall  $T: Ref:: {  $Subtype(T$TLocation(), $T) } $Subtype(T$TLocation(), $T) <==> (T$TLocation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider()) == T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider()) == T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.SimpleEmitStreamProvider() == $T || $Subtype(T$Microsoft.CodeAnalysis.Compilation.EmitStreamProvider(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm()) == T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.Win32ResourceForm() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.$$c()) == T$Microsoft.CodeAnalysis.Compilation.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87()) == T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.$get_References$d__87() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0()) == T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1()) == T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass192_1() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0() : Ref;
const unique T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0()) == T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0(), $T) <==> (T$Microsoft.CodeAnalysis.Compilation.$$c__DisplayClass213_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RESOURCE() : Ref;
const unique T$Microsoft.CodeAnalysis.RESOURCE : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RESOURCE()) == T$Microsoft.CodeAnalysis.RESOURCE;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RESOURCE(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RESOURCE(), $T) <==> (T$Microsoft.CodeAnalysis.RESOURCE() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator() : Ref;
const unique T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator()) == T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator(), $T) <==> (T$Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolInfo()) == T$Microsoft.CodeAnalysis.SymbolInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolInfo(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle()) == T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxTree() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxTree : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxTree()) == T$Microsoft.CodeAnalysis.SyntaxTree;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxTree(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxTree(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxTree() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TypeInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeInfo()) == T$Microsoft.CodeAnalysis.TypeInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeInfo(), $T) <==> (T$Microsoft.CodeAnalysis.TypeInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.DiagnosticSeverity() : Ref;
const unique T$Microsoft.CodeAnalysis.DiagnosticSeverity : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.DiagnosticSeverity()) == T$Microsoft.CodeAnalysis.DiagnosticSeverity;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.DiagnosticSeverity(), $T) } $Subtype(T$Microsoft.CodeAnalysis.DiagnosticSeverity(), $T) <==> (T$Microsoft.CodeAnalysis.DiagnosticSeverity() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ControlFlowAnalysis() : Ref;
const unique T$Microsoft.CodeAnalysis.ControlFlowAnalysis : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ControlFlowAnalysis()) == T$Microsoft.CodeAnalysis.ControlFlowAnalysis;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ControlFlowAnalysis(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ControlFlowAnalysis(), $T) <==> (T$Microsoft.CodeAnalysis.ControlFlowAnalysis() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.COFFResourceReader() : Ref;
const unique T$Microsoft.CodeAnalysis.COFFResourceReader : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.COFFResourceReader()) == T$Microsoft.CodeAnalysis.COFFResourceReader;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.COFFResourceReader(), $T) } $Subtype(T$Microsoft.CodeAnalysis.COFFResourceReader(), $T) <==> (T$Microsoft.CodeAnalysis.COFFResourceReader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LanguageNames() : Ref;
const unique T$Microsoft.CodeAnalysis.LanguageNames : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LanguageNames()) == T$Microsoft.CodeAnalysis.LanguageNames;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LanguageNames(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LanguageNames(), $T) <==> (T$Microsoft.CodeAnalysis.LanguageNames() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ParamInfo`1(TypeSymbol : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ParamInfo`1 : int;
axiom(forall TypeSymbol : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ParamInfo`1(TypeSymbol), T$Microsoft.CodeAnalysis.ParamInfo`1(T$TypeSymbol())) } $Subtype(T$Microsoft.CodeAnalysis.ParamInfo`1(TypeSymbol), T$Microsoft.CodeAnalysis.ParamInfo`1(T$TypeSymbol())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ParamInfo`1(T$TypeSymbol())) == T$Microsoft.CodeAnalysis.ParamInfo`1;
axiom(forall TypeSymbol : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ParamInfo`1(TypeSymbol), $T) } $Subtype(T$Microsoft.CodeAnalysis.ParamInfo`1(TypeSymbol), $T) <==> (T$Microsoft.CodeAnalysis.ParamInfo`1(TypeSymbol) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonEventWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)));


function T$Microsoft.CodeAnalysis.XmlCharType() : Ref;
const unique T$Microsoft.CodeAnalysis.XmlCharType : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.XmlCharType()) == T$Microsoft.CodeAnalysis.XmlCharType;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.XmlCharType(), $T) } $Subtype(T$Microsoft.CodeAnalysis.XmlCharType(), $T) <==> (T$Microsoft.CodeAnalysis.XmlCharType() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.StaticCast`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.StaticCast`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.StaticCast`1(T), T$Microsoft.CodeAnalysis.StaticCast`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.StaticCast`1(T), T$Microsoft.CodeAnalysis.StaticCast`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.StaticCast`1(T$T())) == T$Microsoft.CodeAnalysis.StaticCast`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.StaticCast`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.StaticCast`1(T), $T) <==> (T$Microsoft.CodeAnalysis.StaticCast`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.ParseOptions() : Ref;
const unique T$Microsoft.CodeAnalysis.ParseOptions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ParseOptions()) == T$Microsoft.CodeAnalysis.ParseOptions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ParseOptions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.ParseOptions(), $T) <==> (T$Microsoft.CodeAnalysis.ParseOptions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LocalizableString() : Ref;
const unique T$Microsoft.CodeAnalysis.LocalizableString : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocalizableString()) == T$Microsoft.CodeAnalysis.LocalizableString;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocalizableString(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocalizableString(), $T) <==> (T$Microsoft.CodeAnalysis.LocalizableString() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString() : Ref;
const unique T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString()) == T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString(), $T) } $Subtype(T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString(), $T) <==> (T$Microsoft.CodeAnalysis.LocalizableString.FixedLocalizableString() == $T || $Subtype(T$Microsoft.CodeAnalysis.LocalizableString(), $T)));


function T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax() : Ref;
const unique T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax()) == T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax(), $T) <==> (T$Microsoft.CodeAnalysis.IStructuredTriviaSyntax() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference()) == T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.TranslationSyntaxReference() == $T || $Subtype(T$Microsoft.CodeAnalysis.SyntaxReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(T$TNode())) == T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SeparatedSyntaxListBuilder`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Syntax.SyntaxList() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList() == $T || $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode(), $T)));



function T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyWeakChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList.SeparatedWithManyChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithManyWeakChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithThreeChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxList.WithTwoChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(T$TNode())) == T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxTokenListBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilderExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxListBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap()) == T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry()) == T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap.WarningStateMapEntry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxNodeOrTokenListBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(T$TNode())) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$TOther() : Ref;
const unique T$TOther : int;
axiom $TypeConstructor(T$TOther()) == T$TOther;
axiom(forall  $T: Ref:: {  $Subtype(T$TOther(), $T) } $Subtype(T$TOther(), $T) <==> (T$TOther() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList`1.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxDiagnosticInfoList.Enumerator.NodeIteration() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(T$TNode())) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxListBuilder`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenStats() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListPool() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList() == $T || $Subtype(T$Microsoft.CodeAnalysis.GreenNode(), $T)));



function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildren.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren() == $T || $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithTwoChildren.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(T$TNode())) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.GreenNodeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));





function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilderExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(TNode : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1 : int;
axiom(forall TNode : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(T$TNode())) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(TNode), T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(T$TNode())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(T$TNode())) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1;
axiom(forall TNode : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(TNode), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(TNode), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1(TNode) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));





function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.ChildSyntaxList.Reversed.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry()) == T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxNodeCache.Entry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder() : Ref;
const unique T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder()) == T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder(), $T) <==> (T$Microsoft.CodeAnalysis.Syntax.SyntaxTriviaListBuilder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.RuleSetInclude() : Ref;
const unique T$Microsoft.CodeAnalysis.RuleSetInclude : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.RuleSetInclude()) == T$Microsoft.CodeAnalysis.RuleSetInclude;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.RuleSetInclude(), $T) } $Subtype(T$Microsoft.CodeAnalysis.RuleSetInclude(), $T) <==> (T$Microsoft.CodeAnalysis.RuleSetInclude() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.ArrayElement`1(T : Ref) : Ref;
const unique T$Microsoft.CodeAnalysis.ArrayElement`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayElement`1(T), T$Microsoft.CodeAnalysis.ArrayElement`1(T$T())) } $Subtype(T$Microsoft.CodeAnalysis.ArrayElement`1(T), T$Microsoft.CodeAnalysis.ArrayElement`1(T$T())) );
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.ArrayElement`1(T$T())) == T$Microsoft.CodeAnalysis.ArrayElement`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.ArrayElement`1(T), $T) } $Subtype(T$Microsoft.CodeAnalysis.ArrayElement`1(T), $T) <==> (T$Microsoft.CodeAnalysis.ArrayElement`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Microsoft.CodeAnalysis.CandidateReason() : Ref;
const unique T$Microsoft.CodeAnalysis.CandidateReason : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CandidateReason()) == T$Microsoft.CodeAnalysis.CandidateReason;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CandidateReason(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CandidateReason(), $T) <==> (T$Microsoft.CodeAnalysis.CandidateReason() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IModuleSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IModuleSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IModuleSymbol()) == T$Microsoft.CodeAnalysis.IModuleSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IModuleSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IModuleSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IModuleSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode()) == T$Microsoft.CodeAnalysis.SyntaxNode;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));







function T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack()) == T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack()) == T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.TriviaListEnumeratorStack.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack()) == T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which()) == T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.TwoEnumeratorListStack.Which() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack()) == T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which()) == T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.ThreeEnumeratorListStack.Which() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83()) == T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$ChildNodes$d__83() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85()) == T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$AncestorsAndSelf$d__85() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass96_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100()) == T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$ChildTokens$d__100() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass118_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass119_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass120_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass125_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass126_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0()) == T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$$c__DisplayClass127_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166()) == T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesOnly$d__166() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167()) == T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensOnly$d__167() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168()) == T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantNodesAndTokensIntoTrivia$d__168() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169()) == T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaOnly$d__169() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170 : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170()) == T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNode.$DescendantTriviaIntoTrivia$d__170() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.Platform() : Ref;
const unique T$Microsoft.CodeAnalysis.Platform : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.Platform()) == T$Microsoft.CodeAnalysis.Platform;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.Platform(), $T) } $Subtype(T$Microsoft.CodeAnalysis.Platform(), $T) <==> (T$Microsoft.CodeAnalysis.Platform() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.MetadataReaderExtensions() : Ref;
const unique T$Microsoft.CodeAnalysis.MetadataReaderExtensions : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.MetadataReaderExtensions()) == T$Microsoft.CodeAnalysis.MetadataReaderExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.MetadataReaderExtensions(), $T) } $Subtype(T$Microsoft.CodeAnalysis.MetadataReaderExtensions(), $T) <==> (T$Microsoft.CodeAnalysis.MetadataReaderExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.IRangeVariableSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.IRangeVariableSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.IRangeVariableSymbol()) == T$Microsoft.CodeAnalysis.IRangeVariableSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.IRangeVariableSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.IRangeVariableSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.IRangeVariableSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.PEAssembly() : Ref;
const unique T$Microsoft.CodeAnalysis.PEAssembly : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.PEAssembly()) == T$Microsoft.CodeAnalysis.PEAssembly;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.PEAssembly(), $T) } $Subtype(T$Microsoft.CodeAnalysis.PEAssembly(), $T) <==> (T$Microsoft.CodeAnalysis.PEAssembly() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TypeKind() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeKind()) == T$Microsoft.CodeAnalysis.TypeKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeKind(), $T) <==> (T$Microsoft.CodeAnalysis.TypeKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData()) == T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData(), $T) <==> (T$Microsoft.CodeAnalysis.CommonReturnTypeWellKnownAttributeData() == $T || $Subtype(T$Microsoft.CodeAnalysis.WellKnownAttributeData(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget(), $T)));


function T$Microsoft.CodeAnalysis.CommonDiagnosticComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.CommonDiagnosticComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CommonDiagnosticComparer()) == T$Microsoft.CodeAnalysis.CommonDiagnosticComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CommonDiagnosticComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CommonDiagnosticComparer(), $T) <==> (T$Microsoft.CodeAnalysis.CommonDiagnosticComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol() : Ref;
const unique T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol()) == T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T) } $Subtype(T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol(), $T) <==> (T$Microsoft.CodeAnalysis.INamespaceOrTypeSymbol() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.CodeAnalysis.ISymbol(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CaseInsensitiveComparison() : Ref;
const unique T$Microsoft.CodeAnalysis.CaseInsensitiveComparison : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CaseInsensitiveComparison()) == T$Microsoft.CodeAnalysis.CaseInsensitiveComparison;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CaseInsensitiveComparison(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CaseInsensitiveComparison(), $T) <==> (T$Microsoft.CodeAnalysis.CaseInsensitiveComparison() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer() : Ref;
const unique T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer()) == T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer(), $T) } $Subtype(T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer(), $T) <==> (T$Microsoft.CodeAnalysis.CaseInsensitiveComparison.OneToOneUnicodeComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.TypeCompareKindExtension() : Ref;
const unique T$Microsoft.CodeAnalysis.TypeCompareKindExtension : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.TypeCompareKindExtension()) == T$Microsoft.CodeAnalysis.TypeCompareKindExtension;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.TypeCompareKindExtension(), $T) } $Subtype(T$Microsoft.CodeAnalysis.TypeCompareKindExtension(), $T) <==> (T$Microsoft.CodeAnalysis.TypeCompareKindExtension() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeDescription() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeDescription : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeDescription()) == T$Microsoft.CodeAnalysis.AttributeDescription;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeDescription(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeDescription(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeDescription() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget()) == T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTarget() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo() : Ref;
const unique T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo()) == T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo(), $T) } $Subtype(T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo(), $T) <==> (T$Microsoft.CodeAnalysis.AttributeDescription.TypeHandleTargetInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNavigator() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNavigator : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNavigator()) == T$Microsoft.CodeAnalysis.SyntaxNavigator;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNavigator(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNavigator(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNavigator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds()) == T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNavigator.SyntaxKinds() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c() : Ref;
const unique T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c()) == T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c(), $T) <==> (T$Microsoft.CodeAnalysis.SyntaxNavigator.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle() : Ref;
const unique T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle()) == T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle(), $T) } $Subtype(T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle(), $T) <==> (T$Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.OperationKind() : Ref;
const unique T$Microsoft.CodeAnalysis.OperationKind : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.OperationKind()) == T$Microsoft.CodeAnalysis.OperationKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.OperationKind(), $T) } $Subtype(T$Microsoft.CodeAnalysis.OperationKind(), $T) <==> (T$Microsoft.CodeAnalysis.OperationKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Microsoft.CodeAnalysis.EmbeddedResource() : Ref;
const unique T$Microsoft.CodeAnalysis.EmbeddedResource : int;
axiom $TypeConstructor(T$Microsoft.CodeAnalysis.EmbeddedResource()) == T$Microsoft.CodeAnalysis.EmbeddedResource;
axiom(forall  $T: Ref:: {  $Subtype(T$Microsoft.CodeAnalysis.EmbeddedResource(), $T) } $Subtype(T$Microsoft.CodeAnalysis.EmbeddedResource(), $T) <==> (T$Microsoft.CodeAnalysis.EmbeddedResource() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.XmlUtilities() : Ref;
const unique T$Roslyn.Utilities.XmlUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.XmlUtilities()) == T$Roslyn.Utilities.XmlUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.XmlUtilities(), $T) } $Subtype(T$Roslyn.Utilities.XmlUtilities(), $T) <==> (T$Roslyn.Utilities.XmlUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.GeneratedCodeUtilities() : Ref;
const unique T$Roslyn.Utilities.GeneratedCodeUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.GeneratedCodeUtilities()) == T$Roslyn.Utilities.GeneratedCodeUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.GeneratedCodeUtilities(), $T) } $Subtype(T$Roslyn.Utilities.GeneratedCodeUtilities(), $T) <==> (T$Roslyn.Utilities.GeneratedCodeUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectPool`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.ObjectPool`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.ObjectPool`1(T), T$Roslyn.Utilities.ObjectPool`1(T$T())) } $Subtype(T$Roslyn.Utilities.ObjectPool`1(T), T$Roslyn.Utilities.ObjectPool`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectPool`1(T$T())) == T$Roslyn.Utilities.ObjectPool`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectPool`1(T), $T) } $Subtype(T$Roslyn.Utilities.ObjectPool`1(T), $T) <==> (T$Roslyn.Utilities.ObjectPool`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ObjectPool`1.Element() : Ref;
const unique T$Roslyn.Utilities.ObjectPool`1.Element : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectPool`1.Element()) == T$Roslyn.Utilities.ObjectPool`1.Element;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectPool`1.Element(), $T) } $Subtype(T$Roslyn.Utilities.ObjectPool`1.Element(), $T) <==> (T$Roslyn.Utilities.ObjectPool`1.Element() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectPool`1.Factory() : Ref;
const unique T$Roslyn.Utilities.ObjectPool`1.Factory : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectPool`1.Factory()) == T$Roslyn.Utilities.ObjectPool`1.Factory;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectPool`1.Factory(), $T) } $Subtype(T$Roslyn.Utilities.ObjectPool`1.Factory(), $T) <==> (T$Roslyn.Utilities.ObjectPool`1.Factory() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ImmutableListExtensions() : Ref;
const unique T$Roslyn.Utilities.ImmutableListExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ImmutableListExtensions()) == T$Roslyn.Utilities.ImmutableListExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ImmutableListExtensions(), $T) } $Subtype(T$Roslyn.Utilities.ImmutableListExtensions(), $T) <==> (T$Roslyn.Utilities.ImmutableListExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.ReaderWriterLockSlimExtensions() : Ref;
const unique T$Roslyn.Utilities.ReaderWriterLockSlimExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions()) == T$Roslyn.Utilities.ReaderWriterLockSlimExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions(), $T) } $Subtype(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions(), $T) <==> (T$Roslyn.Utilities.ReaderWriterLockSlimExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter() : Ref;
const unique T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter()) == T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter(), $T) } $Subtype(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter(), $T) <==> (T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.ReadLockExiter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter() : Ref;
const unique T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter()) == T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter(), $T) } $Subtype(T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter(), $T) <==> (T$Roslyn.Utilities.ReaderWriterLockSlimExtensions.WriteLockExiter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.OrderedMultiDictionary`2(K : Ref,V : Ref) : Ref;
const unique T$Roslyn.Utilities.OrderedMultiDictionary`2 : int;
axiom(forall K : Ref,V : Ref :: {  $Subtype(T$Roslyn.Utilities.OrderedMultiDictionary`2(K,V), T$Roslyn.Utilities.OrderedMultiDictionary`2(T$K(),T$V())) } $Subtype(T$Roslyn.Utilities.OrderedMultiDictionary`2(K,V), T$Roslyn.Utilities.OrderedMultiDictionary`2(T$K(),T$V())) );
axiom $TypeConstructor(T$Roslyn.Utilities.OrderedMultiDictionary`2(T$K(),T$V())) == T$Roslyn.Utilities.OrderedMultiDictionary`2;
axiom(forall K : Ref,V : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.OrderedMultiDictionary`2(K,V), $T) } $Subtype(T$Roslyn.Utilities.OrderedMultiDictionary`2(K,V), $T) <==> (T$Roslyn.Utilities.OrderedMultiDictionary`2(K,V) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11() : Ref;
const unique T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11()) == T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11(), $T) } $Subtype(T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11(), $T) <==> (T$Roslyn.Utilities.OrderedMultiDictionary`2.$GetEnumerator$d__11() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectBinder() : Ref;
const unique T$Roslyn.Utilities.ObjectBinder : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectBinder()) == T$Roslyn.Utilities.ObjectBinder;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectBinder(), $T) } $Subtype(T$Roslyn.Utilities.ObjectBinder(), $T) <==> (T$Roslyn.Utilities.ObjectBinder() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.WeakReferenceExtensions() : Ref;
const unique T$Roslyn.Utilities.WeakReferenceExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.WeakReferenceExtensions()) == T$Roslyn.Utilities.WeakReferenceExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.WeakReferenceExtensions(), $T) } $Subtype(T$Roslyn.Utilities.WeakReferenceExtensions(), $T) <==> (T$Roslyn.Utilities.WeakReferenceExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.PlatformInformation() : Ref;
const unique T$Roslyn.Utilities.PlatformInformation : int;
axiom $TypeConstructor(T$Roslyn.Utilities.PlatformInformation()) == T$Roslyn.Utilities.PlatformInformation;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.PlatformInformation(), $T) } $Subtype(T$Roslyn.Utilities.PlatformInformation(), $T) <==> (T$Roslyn.Utilities.PlatformInformation() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ImmutableArrayExtensions() : Ref;
const unique T$Roslyn.Utilities.ImmutableArrayExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ImmutableArrayExtensions()) == T$Roslyn.Utilities.ImmutableArrayExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ImmutableArrayExtensions(), $T) } $Subtype(T$Roslyn.Utilities.ImmutableArrayExtensions(), $T) <==> (T$Roslyn.Utilities.ImmutableArrayExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Roslyn.Utilities.ReferenceEqualityComparer() : Ref;
const unique T$Roslyn.Utilities.ReferenceEqualityComparer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ReferenceEqualityComparer()) == T$Roslyn.Utilities.ReferenceEqualityComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ReferenceEqualityComparer(), $T) } $Subtype(T$Roslyn.Utilities.ReferenceEqualityComparer(), $T) <==> (T$Roslyn.Utilities.ReferenceEqualityComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.FileKey() : Ref;
const unique T$Roslyn.Utilities.FileKey : int;
axiom $TypeConstructor(T$Roslyn.Utilities.FileKey()) == T$Roslyn.Utilities.FileKey;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.FileKey(), $T) } $Subtype(T$Roslyn.Utilities.FileKey(), $T) <==> (T$Roslyn.Utilities.FileKey() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectBinderSnapshot() : Ref;
const unique T$Roslyn.Utilities.ObjectBinderSnapshot : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectBinderSnapshot()) == T$Roslyn.Utilities.ObjectBinderSnapshot;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectBinderSnapshot(), $T) } $Subtype(T$Roslyn.Utilities.ObjectBinderSnapshot(), $T) <==> (T$Roslyn.Utilities.ObjectBinderSnapshot() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ISetExtensions() : Ref;
const unique T$Roslyn.Utilities.ISetExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ISetExtensions()) == T$Roslyn.Utilities.ISetExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ISetExtensions(), $T) } $Subtype(T$Roslyn.Utilities.ISetExtensions(), $T) <==> (T$Roslyn.Utilities.ISetExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.Functions`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.Functions`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.Functions`1(T), T$Roslyn.Utilities.Functions`1(T$T())) } $Subtype(T$Roslyn.Utilities.Functions`1(T), T$Roslyn.Utilities.Functions`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.Functions`1(T$T())) == T$Roslyn.Utilities.Functions`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.Functions`1(T), $T) } $Subtype(T$Roslyn.Utilities.Functions`1(T), $T) <==> (T$Roslyn.Utilities.Functions`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.Functions`1.$$c() : Ref;
const unique T$Roslyn.Utilities.Functions`1.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.Functions`1.$$c()) == T$Roslyn.Utilities.Functions`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.Functions`1.$$c(), $T) } $Subtype(T$Roslyn.Utilities.Functions`1.$$c(), $T) <==> (T$Roslyn.Utilities.Functions`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.EnumField() : Ref;
const unique T$Roslyn.Utilities.EnumField : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EnumField()) == T$Roslyn.Utilities.EnumField;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumField(), $T) } $Subtype(T$Roslyn.Utilities.EnumField(), $T) <==> (T$Roslyn.Utilities.EnumField() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.EnumField.EnumFieldComparer() : Ref;
const unique T$Roslyn.Utilities.EnumField.EnumFieldComparer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EnumField.EnumFieldComparer()) == T$Roslyn.Utilities.EnumField.EnumFieldComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumField.EnumFieldComparer(), $T) } $Subtype(T$Roslyn.Utilities.EnumField.EnumFieldComparer(), $T) <==> (T$Roslyn.Utilities.EnumField.EnumFieldComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.EnumerableExtensions() : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions()) == T$Roslyn.Utilities.EnumerableExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions(), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions(), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));

































function T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T), T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T$T())) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T), T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T$T())) == T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c() : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c()) == T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c(), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c(), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions.Comparisons`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T), T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T$T())) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T), T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T$T())) == T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions.$ConcatWorker$d__3`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T), T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T$T())) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T), T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T$T())) == T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions.$$c__DisplayClass9_0`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T), T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T$T())) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T), T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T$T())) == T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions.$$c__22`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.EnumerableExtensions.$$c() : Ref;
const unique T$Roslyn.Utilities.EnumerableExtensions.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EnumerableExtensions.$$c()) == T$Roslyn.Utilities.EnumerableExtensions.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c(), $T) } $Subtype(T$Roslyn.Utilities.EnumerableExtensions.$$c(), $T) <==> (T$Roslyn.Utilities.EnumerableExtensions.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.MultiDictionary`2(K : Ref,V : Ref) : Ref;
const unique T$Roslyn.Utilities.MultiDictionary`2 : int;
axiom(forall K : Ref,V : Ref :: {  $Subtype(T$Roslyn.Utilities.MultiDictionary`2(K,V), T$Roslyn.Utilities.MultiDictionary`2(T$K(),T$V())) } $Subtype(T$Roslyn.Utilities.MultiDictionary`2(K,V), T$Roslyn.Utilities.MultiDictionary`2(T$K(),T$V())) );
axiom $TypeConstructor(T$Roslyn.Utilities.MultiDictionary`2(T$K(),T$V())) == T$Roslyn.Utilities.MultiDictionary`2;
axiom(forall K : Ref,V : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.MultiDictionary`2(K,V), $T) } $Subtype(T$Roslyn.Utilities.MultiDictionary`2(K,V), $T) <==> (T$Roslyn.Utilities.MultiDictionary`2(K,V) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.MultiDictionary`2.ValueSet() : Ref;
const unique T$Roslyn.Utilities.MultiDictionary`2.ValueSet : int;
axiom $TypeConstructor(T$Roslyn.Utilities.MultiDictionary`2.ValueSet()) == T$Roslyn.Utilities.MultiDictionary`2.ValueSet;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.MultiDictionary`2.ValueSet(), $T) } $Subtype(T$Roslyn.Utilities.MultiDictionary`2.ValueSet(), $T) <==> (T$Roslyn.Utilities.MultiDictionary`2.ValueSet() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator() : Ref;
const unique T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator : int;
axiom $TypeConstructor(T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator()) == T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator(), $T) } $Subtype(T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator(), $T) <==> (T$Roslyn.Utilities.MultiDictionary`2.ValueSet.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.TextChangeRangeExtensions() : Ref;
const unique T$Roslyn.Utilities.TextChangeRangeExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.TextChangeRangeExtensions()) == T$Roslyn.Utilities.TextChangeRangeExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.TextChangeRangeExtensions(), $T) } $Subtype(T$Roslyn.Utilities.TextChangeRangeExtensions(), $T) <==> (T$Roslyn.Utilities.TextChangeRangeExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.PathKind() : Ref;
const unique T$Roslyn.Utilities.PathKind : int;
axiom $TypeConstructor(T$Roslyn.Utilities.PathKind()) == T$Roslyn.Utilities.PathKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.PathKind(), $T) } $Subtype(T$Roslyn.Utilities.PathKind(), $T) <==> (T$Roslyn.Utilities.PathKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.JsonWriter() : Ref;
const unique T$Roslyn.Utilities.JsonWriter : int;
axiom $TypeConstructor(T$Roslyn.Utilities.JsonWriter()) == T$Roslyn.Utilities.JsonWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.JsonWriter(), $T) } $Subtype(T$Roslyn.Utilities.JsonWriter(), $T) <==> (T$Roslyn.Utilities.JsonWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.JsonWriter.Pending() : Ref;
const unique T$Roslyn.Utilities.JsonWriter.Pending : int;
axiom $TypeConstructor(T$Roslyn.Utilities.JsonWriter.Pending()) == T$Roslyn.Utilities.JsonWriter.Pending;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.JsonWriter.Pending(), $T) } $Subtype(T$Roslyn.Utilities.JsonWriter.Pending(), $T) <==> (T$Roslyn.Utilities.JsonWriter.Pending() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ExceptionUtilities() : Ref;
const unique T$Roslyn.Utilities.ExceptionUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ExceptionUtilities()) == T$Roslyn.Utilities.ExceptionUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ExceptionUtilities(), $T) } $Subtype(T$Roslyn.Utilities.ExceptionUtilities(), $T) <==> (T$Roslyn.Utilities.ExceptionUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.DocumentationCommentXmlNames() : Ref;
const unique T$Roslyn.Utilities.DocumentationCommentXmlNames : int;
axiom $TypeConstructor(T$Roslyn.Utilities.DocumentationCommentXmlNames()) == T$Roslyn.Utilities.DocumentationCommentXmlNames;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.DocumentationCommentXmlNames(), $T) } $Subtype(T$Roslyn.Utilities.DocumentationCommentXmlNames(), $T) <==> (T$Roslyn.Utilities.DocumentationCommentXmlNames() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SetWithInsertionOrder`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SetWithInsertionOrder`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SetWithInsertionOrder`1(T), T$Roslyn.Utilities.SetWithInsertionOrder`1(T$T())) } $Subtype(T$Roslyn.Utilities.SetWithInsertionOrder`1(T), T$Roslyn.Utilities.SetWithInsertionOrder`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SetWithInsertionOrder`1(T$T())) == T$Roslyn.Utilities.SetWithInsertionOrder`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SetWithInsertionOrder`1(T), $T) } $Subtype(T$Roslyn.Utilities.SetWithInsertionOrder`1(T), $T) <==> (T$Roslyn.Utilities.SetWithInsertionOrder`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), $T)));



function T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7() : Ref;
const unique T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7()) == T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7(), $T) } $Subtype(T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7(), $T) <==> (T$Roslyn.Utilities.SetWithInsertionOrder`1.$GetEnumerator$d__7() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.FileNameUtilities() : Ref;
const unique T$Roslyn.Utilities.FileNameUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.FileNameUtilities()) == T$Roslyn.Utilities.FileNameUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.FileNameUtilities(), $T) } $Subtype(T$Roslyn.Utilities.FileNameUtilities(), $T) <==> (T$Roslyn.Utilities.FileNameUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.BlobBuildingStream() : Ref;
const unique T$Roslyn.Utilities.BlobBuildingStream : int;
axiom $TypeConstructor(T$Roslyn.Utilities.BlobBuildingStream()) == T$Roslyn.Utilities.BlobBuildingStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.BlobBuildingStream(), $T) } $Subtype(T$Roslyn.Utilities.BlobBuildingStream(), $T) <==> (T$Roslyn.Utilities.BlobBuildingStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.BlobBuildingStream.$$c() : Ref;
const unique T$Roslyn.Utilities.BlobBuildingStream.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.BlobBuildingStream.$$c()) == T$Roslyn.Utilities.BlobBuildingStream.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.BlobBuildingStream.$$c(), $T) } $Subtype(T$Roslyn.Utilities.BlobBuildingStream.$$c(), $T) <==> (T$Roslyn.Utilities.BlobBuildingStream.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ComMemoryStream() : Ref;
const unique T$Roslyn.Utilities.ComMemoryStream : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ComMemoryStream()) == T$Roslyn.Utilities.ComMemoryStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ComMemoryStream(), $T) } $Subtype(T$Roslyn.Utilities.ComMemoryStream(), $T) <==> (T$Roslyn.Utilities.ComMemoryStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IUnsafeComStream(), $T)));


function T$Roslyn.Utilities.IncrementalHashExtensions() : Ref;
const unique T$Roslyn.Utilities.IncrementalHashExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.IncrementalHashExtensions()) == T$Roslyn.Utilities.IncrementalHashExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.IncrementalHashExtensions(), $T) } $Subtype(T$Roslyn.Utilities.IncrementalHashExtensions(), $T) <==> (T$Roslyn.Utilities.IncrementalHashExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SemaphoreSlimExtensions() : Ref;
const unique T$Roslyn.Utilities.SemaphoreSlimExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SemaphoreSlimExtensions()) == T$Roslyn.Utilities.SemaphoreSlimExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SemaphoreSlimExtensions(), $T) } $Subtype(T$Roslyn.Utilities.SemaphoreSlimExtensions(), $T) <==> (T$Roslyn.Utilities.SemaphoreSlimExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer() : Ref;
const unique T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer()) == T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer(), $T) } $Subtype(T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer(), $T) <==> (T$Roslyn.Utilities.SemaphoreSlimExtensions.SemaphoreDisposer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1() : Ref;
const unique T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1()) == T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1(), $T) } $Subtype(T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1(), $T) <==> (T$Roslyn.Utilities.SemaphoreSlimExtensions.$DisposableWaitAsync$d__1() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CompilerPathUtilities() : Ref;
const unique T$Roslyn.Utilities.CompilerPathUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CompilerPathUtilities()) == T$Roslyn.Utilities.CompilerPathUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CompilerPathUtilities(), $T) } $Subtype(T$Roslyn.Utilities.CompilerPathUtilities(), $T) <==> (T$Roslyn.Utilities.CompilerPathUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup() : Ref;
const unique T$Roslyn.Utilities.CorLightup : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup()) == T$Roslyn.Utilities.CorLightup;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup(), $T) <==> (T$Roslyn.Utilities.CorLightup() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop()) == T$Roslyn.Utilities.CorLightup.Desktop;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo()) == T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop._CultureInfo() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes()) == T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop.CultureTypes() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop._Directory() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop._Directory : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop._Directory()) == T$Roslyn.Utilities.CorLightup.Desktop._Directory;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._Directory(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._Directory(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop._Directory() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop._Assembly() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop._Assembly : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop._Assembly()) == T$Roslyn.Utilities.CorLightup.Desktop._Assembly;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._Assembly(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._Assembly(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop._Assembly() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop._Module() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop._Module : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop._Module()) == T$Roslyn.Utilities.CorLightup.Desktop._Module;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._Module(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._Module(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop._Module() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs()) == T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop._ResolveEventArgs() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop._AppDomain() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop._AppDomain : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop._AppDomain()) == T$Roslyn.Utilities.CorLightup.Desktop._AppDomain;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._AppDomain(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop._AppDomain(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop._AppDomain() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper() : Ref;
const unique T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper()) == T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper(), $T) } $Subtype(T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper(), $T) <==> (T$Roslyn.Utilities.CorLightup.Desktop.AssemblyResolveWrapper() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.StringOrdinalComparer() : Ref;
const unique T$Roslyn.Utilities.StringOrdinalComparer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.StringOrdinalComparer()) == T$Roslyn.Utilities.StringOrdinalComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.StringOrdinalComparer(), $T) } $Subtype(T$Roslyn.Utilities.StringOrdinalComparer(), $T) <==> (T$Roslyn.Utilities.StringOrdinalComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ArrayExtensions() : Ref;
const unique T$Roslyn.Utilities.ArrayExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ArrayExtensions()) == T$Roslyn.Utilities.ArrayExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ArrayExtensions(), $T) } $Subtype(T$Roslyn.Utilities.ArrayExtensions(), $T) <==> (T$Roslyn.Utilities.ArrayExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));













function T$Roslyn.Utilities.StringExtensions() : Ref;
const unique T$Roslyn.Utilities.StringExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.StringExtensions()) == T$Roslyn.Utilities.StringExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.StringExtensions(), $T) } $Subtype(T$Roslyn.Utilities.StringExtensions(), $T) <==> (T$Roslyn.Utilities.StringExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.TextKeyedCache`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.TextKeyedCache`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.TextKeyedCache`1(T), T$Roslyn.Utilities.TextKeyedCache`1(T$T())) } $Subtype(T$Roslyn.Utilities.TextKeyedCache`1(T), T$Roslyn.Utilities.TextKeyedCache`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.TextKeyedCache`1(T$T())) == T$Roslyn.Utilities.TextKeyedCache`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.TextKeyedCache`1(T), $T) } $Subtype(T$Roslyn.Utilities.TextKeyedCache`1(T), $T) <==> (T$Roslyn.Utilities.TextKeyedCache`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry() : Ref;
const unique T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry : int;
axiom $TypeConstructor(T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry()) == T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry(), $T) } $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry(), $T) <==> (T$Roslyn.Utilities.TextKeyedCache`1.LocalEntry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry() : Ref;
const unique T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry : int;
axiom $TypeConstructor(T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry()) == T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry(), $T) } $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry(), $T) <==> (T$Roslyn.Utilities.TextKeyedCache`1.SharedEntry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue() : Ref;
const unique T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue : int;
axiom $TypeConstructor(T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue()) == T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue(), $T) } $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue(), $T) <==> (T$Roslyn.Utilities.TextKeyedCache`1.SharedEntryValue() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0() : Ref;
const unique T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0()) == T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0(), $T) } $Subtype(T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0(), $T) <==> (T$Roslyn.Utilities.TextKeyedCache`1.$$c__DisplayClass21_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.BitArithmeticUtilities() : Ref;
const unique T$Roslyn.Utilities.BitArithmeticUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.BitArithmeticUtilities()) == T$Roslyn.Utilities.BitArithmeticUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.BitArithmeticUtilities(), $T) } $Subtype(T$Roslyn.Utilities.BitArithmeticUtilities(), $T) <==> (T$Roslyn.Utilities.BitArithmeticUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.InterlockedOperations() : Ref;
const unique T$Roslyn.Utilities.InterlockedOperations : int;
axiom $TypeConstructor(T$Roslyn.Utilities.InterlockedOperations()) == T$Roslyn.Utilities.InterlockedOperations;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.InterlockedOperations(), $T) } $Subtype(T$Roslyn.Utilities.InterlockedOperations(), $T) <==> (T$Roslyn.Utilities.InterlockedOperations() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));





function T$Roslyn.Utilities.EncodingExtensions() : Ref;
const unique T$Roslyn.Utilities.EncodingExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EncodingExtensions()) == T$Roslyn.Utilities.EncodingExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EncodingExtensions(), $T) } $Subtype(T$Roslyn.Utilities.EncodingExtensions(), $T) <==> (T$Roslyn.Utilities.EncodingExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.IReadOnlySet`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.IReadOnlySet`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), T$Roslyn.Utilities.IReadOnlySet`1(T$T())) } $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), T$Roslyn.Utilities.IReadOnlySet`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.IReadOnlySet`1(T$T())) == T$Roslyn.Utilities.IReadOnlySet`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), $T) } $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), $T) <==> (T$Roslyn.Utilities.IReadOnlySet`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ReflectionUtilities() : Ref;
const unique T$Roslyn.Utilities.ReflectionUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ReflectionUtilities()) == T$Roslyn.Utilities.ReflectionUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ReflectionUtilities(), $T) } $Subtype(T$Roslyn.Utilities.ReflectionUtilities(), $T) <==> (T$Roslyn.Utilities.ReflectionUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Roslyn.Utilities.UICultureUtilities() : Ref;
const unique T$Roslyn.Utilities.UICultureUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.UICultureUtilities()) == T$Roslyn.Utilities.UICultureUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities(), $T) } $Subtype(T$Roslyn.Utilities.UICultureUtilities(), $T) <==> (T$Roslyn.Utilities.UICultureUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0() : Ref;
const unique T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0()) == T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0(), $T) } $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0(), $T) <==> (T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass3_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0() : Ref;
const unique T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0()) == T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0(), $T) } $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0(), $T) <==> (T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass5_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T), T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T$T())) } $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T), T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T$T())) == T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T), $T) } $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T), $T) <==> (T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass6_0`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T), T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T$T())) } $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T), T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T$T())) == T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T), $T) } $Subtype(T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T), $T) <==> (T$Roslyn.Utilities.UICultureUtilities.$$c__DisplayClass7_0`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.StringTable() : Ref;
const unique T$Roslyn.Utilities.StringTable : int;
axiom $TypeConstructor(T$Roslyn.Utilities.StringTable()) == T$Roslyn.Utilities.StringTable;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.StringTable(), $T) } $Subtype(T$Roslyn.Utilities.StringTable(), $T) <==> (T$Roslyn.Utilities.StringTable() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.StringTable.Entry() : Ref;
const unique T$Roslyn.Utilities.StringTable.Entry : int;
axiom $TypeConstructor(T$Roslyn.Utilities.StringTable.Entry()) == T$Roslyn.Utilities.StringTable.Entry;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.StringTable.Entry(), $T) } $Subtype(T$Roslyn.Utilities.StringTable.Entry(), $T) <==> (T$Roslyn.Utilities.StringTable.Entry() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0() : Ref;
const unique T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0()) == T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0(), $T) } $Subtype(T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0(), $T) <==> (T$Roslyn.Utilities.StringTable.$$c__DisplayClass18_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T), T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T$T())) } $Subtype(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T), T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T$T())) == T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T), $T) } $Subtype(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T), $T) <==> (T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c() : Ref;
const unique T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c()) == T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c(), $T) } $Subtype(T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c(), $T) <==> (T$Roslyn.Utilities.ImmutableSetWithInsertionOrder`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectWriter() : Ref;
const unique T$Roslyn.Utilities.ObjectWriter : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectWriter()) == T$Roslyn.Utilities.ObjectWriter;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectWriter(), $T) } $Subtype(T$Roslyn.Utilities.ObjectWriter(), $T) <==> (T$Roslyn.Utilities.ObjectWriter() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap() : Ref;
const unique T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap()) == T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap(), $T) } $Subtype(T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap(), $T) <==> (T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c() : Ref;
const unique T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c()) == T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c(), $T) } $Subtype(T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c(), $T) <==> (T$Roslyn.Utilities.ObjectWriter.WriterReferenceMap.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectWriter.EncodingKind() : Ref;
const unique T$Roslyn.Utilities.ObjectWriter.EncodingKind : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectWriter.EncodingKind()) == T$Roslyn.Utilities.ObjectWriter.EncodingKind;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectWriter.EncodingKind(), $T) } $Subtype(T$Roslyn.Utilities.ObjectWriter.EncodingKind(), $T) <==> (T$Roslyn.Utilities.ObjectWriter.EncodingKind() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0() : Ref;
const unique T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0()) == T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0(), $T) } $Subtype(T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0(), $T) <==> (T$Roslyn.Utilities.ObjectWriter.$$c__DisplayClass31_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.AssemblyUtilities() : Ref;
const unique T$Roslyn.Utilities.AssemblyUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.AssemblyUtilities()) == T$Roslyn.Utilities.AssemblyUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.AssemblyUtilities(), $T) } $Subtype(T$Roslyn.Utilities.AssemblyUtilities(), $T) <==> (T$Roslyn.Utilities.AssemblyUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.StreamExtensions() : Ref;
const unique T$Roslyn.Utilities.StreamExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.StreamExtensions()) == T$Roslyn.Utilities.StreamExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.StreamExtensions(), $T) } $Subtype(T$Roslyn.Utilities.StreamExtensions(), $T) <==> (T$Roslyn.Utilities.StreamExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.EnumUtilities() : Ref;
const unique T$Roslyn.Utilities.EnumUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EnumUtilities()) == T$Roslyn.Utilities.EnumUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EnumUtilities(), $T) } $Subtype(T$Roslyn.Utilities.EnumUtilities(), $T) <==> (T$Roslyn.Utilities.EnumUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ThreadSafeFlagOperations() : Ref;
const unique T$Roslyn.Utilities.ThreadSafeFlagOperations : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ThreadSafeFlagOperations()) == T$Roslyn.Utilities.ThreadSafeFlagOperations;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ThreadSafeFlagOperations(), $T) } $Subtype(T$Roslyn.Utilities.ThreadSafeFlagOperations(), $T) <==> (T$Roslyn.Utilities.ThreadSafeFlagOperations() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.DecimalUtilities() : Ref;
const unique T$Roslyn.Utilities.DecimalUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.DecimalUtilities()) == T$Roslyn.Utilities.DecimalUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.DecimalUtilities(), $T) } $Subtype(T$Roslyn.Utilities.DecimalUtilities(), $T) <==> (T$Roslyn.Utilities.DecimalUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.EmptyComparer() : Ref;
const unique T$Roslyn.Utilities.EmptyComparer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.EmptyComparer()) == T$Roslyn.Utilities.EmptyComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.EmptyComparer(), $T) } $Subtype(T$Roslyn.Utilities.EmptyComparer(), $T) <==> (T$Roslyn.Utilities.EmptyComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.IObjectWritable() : Ref;
const unique T$Roslyn.Utilities.IObjectWritable : int;
axiom $TypeConstructor(T$Roslyn.Utilities.IObjectWritable()) == T$Roslyn.Utilities.IObjectWritable;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.IObjectWritable(), $T) } $Subtype(T$Roslyn.Utilities.IObjectWritable(), $T) <==> (T$Roslyn.Utilities.IObjectWritable() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ConcurrentSet`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.ConcurrentSet`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.ConcurrentSet`1(T), T$Roslyn.Utilities.ConcurrentSet`1(T$T())) } $Subtype(T$Roslyn.Utilities.ConcurrentSet`1(T), T$Roslyn.Utilities.ConcurrentSet`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.ConcurrentSet`1(T$T())) == T$Roslyn.Utilities.ConcurrentSet`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ConcurrentSet`1(T), $T) } $Subtype(T$Roslyn.Utilities.ConcurrentSet`1(T), $T) <==> (T$Roslyn.Utilities.ConcurrentSet`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator() : Ref;
const unique T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator()) == T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator(), $T) } $Subtype(T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator(), $T) <==> (T$Roslyn.Utilities.ConcurrentSet`1.KeyEnumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18() : Ref;
const unique T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18()) == T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18(), $T) } $Subtype(T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18(), $T) <==> (T$Roslyn.Utilities.ConcurrentSet`1.$GetEnumeratorImpl$d__18() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ImmutableByteArrayInterop() : Ref;
const unique T$Roslyn.Utilities.ImmutableByteArrayInterop : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ImmutableByteArrayInterop()) == T$Roslyn.Utilities.ImmutableByteArrayInterop;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ImmutableByteArrayInterop(), $T) } $Subtype(T$Roslyn.Utilities.ImmutableByteArrayInterop(), $T) <==> (T$Roslyn.Utilities.ImmutableByteArrayInterop() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion() : Ref;
const unique T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion()) == T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion(), $T) } $Subtype(T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion(), $T) <==> (T$Roslyn.Utilities.ImmutableByteArrayInterop.ByteArrayUnion() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.IUnsafeComStream() : Ref;
const unique T$Roslyn.Utilities.IUnsafeComStream : int;
axiom $TypeConstructor(T$Roslyn.Utilities.IUnsafeComStream()) == T$Roslyn.Utilities.IUnsafeComStream;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.IUnsafeComStream(), $T) } $Subtype(T$Roslyn.Utilities.IUnsafeComStream(), $T) <==> (T$Roslyn.Utilities.IUnsafeComStream() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SpecializedCollections() : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections()) == T$Roslyn.Utilities.SpecializedCollections;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections(), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections(), $T) <==> (T$Roslyn.Utilities.SpecializedCollections() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));





















function T$Roslyn.Utilities.SpecializedCollections.Empty() : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty()) == T$Roslyn.Utilities.SpecializedCollections.Empty;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty(), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty(), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(TKey : Ref,TValue : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2 : int;
axiom(forall TKey : Ref,TValue : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(TKey,TValue), T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(T$TKey(),T$TValue())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(TKey,TValue), T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(T$TKey(),T$TValue())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(T$TKey(),T$TValue())) == T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2;
axiom(forall TKey : Ref,TValue : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(TKey,TValue), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(TKey,TValue), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.Dictionary`2(TKey,TValue) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T$Microsoft.Cci.DummyTypeReference()), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerable`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator() : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator()) == T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator(), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator(), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator`1(T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Enumerator(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.List`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Empty.List`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.List`1(T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T), T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Empty.Set`1(T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.Empty.Collection`1(T), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), $T)));



function T$Roslyn.Utilities.SpecializedCollections.ReadOnly() : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.ReadOnly : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.ReadOnly()) == T$Roslyn.Utilities.SpecializedCollections.ReadOnly;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly(), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly(), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.ReadOnly() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying : Ref,T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2 : int;
axiom(forall TUnderlying : Ref,T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying,T), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(T$TUnderlying(),T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying,T), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(T$TUnderlying(),T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(T$TUnderlying(),T$T())) == T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2;
axiom(forall TUnderlying : Ref,T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying,T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying,T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying,T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying,T), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$TUnderlying() : Ref;
const unique T$TUnderlying : int;
axiom $TypeConstructor(T$TUnderlying()) == T$TUnderlying;
axiom(forall  $T: Ref:: {  $Subtype(T$TUnderlying(), $T) } $Subtype(T$TUnderlying(), $T) <==> (T$TUnderlying() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1 : int;
axiom(forall TUnderlying : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(T$TUnderlying())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(T$TUnderlying())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(T$TUnderlying())) == T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1;
axiom(forall TUnderlying : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying : Ref,T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2 : int;
axiom(forall TUnderlying : Ref,T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying,T), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(T$TUnderlying(),T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying,T), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(T$TUnderlying(),T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(T$TUnderlying(),T$T())) == T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2;
axiom(forall TUnderlying : Ref,T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying,T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying,T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`2(TUnderlying,T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Enumerable`1(TUnderlying), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(TUnderlying : Ref,T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2 : int;
axiom(forall TUnderlying : Ref,T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(TUnderlying,T), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(T$TUnderlying(),T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(TUnderlying,T), T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(T$TUnderlying(),T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(T$TUnderlying(),T$T())) == T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2;
axiom(forall TUnderlying : Ref,T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(TUnderlying,T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(TUnderlying,T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Set`2(TUnderlying,T) == $T || $Subtype(T$Roslyn.Utilities.SpecializedCollections.ReadOnly.Collection`2(TUnderlying,T), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Roslyn.Utilities.IReadOnlySet`1(T), $T)));




function T$Roslyn.Utilities.SpecializedCollections.Singleton() : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Singleton : int;
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Singleton()) == T$Roslyn.Utilities.SpecializedCollections.Singleton;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton(), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton(), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Singleton() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T), T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T), T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Singleton.List`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T), T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T$T())) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T), T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T$T())) == T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T), $T) } $Subtype(T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T), $T) <==> (T$Roslyn.Utilities.SpecializedCollections.Singleton.Enumerator`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.KeyValuePair() : Ref;
const unique T$Roslyn.Utilities.KeyValuePair : int;
axiom $TypeConstructor(T$Roslyn.Utilities.KeyValuePair()) == T$Roslyn.Utilities.KeyValuePair;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.KeyValuePair(), $T) } $Subtype(T$Roslyn.Utilities.KeyValuePair(), $T) <==> (T$Roslyn.Utilities.KeyValuePair() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Roslyn.Utilities.CompilerOptionParseUtilities() : Ref;
const unique T$Roslyn.Utilities.CompilerOptionParseUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CompilerOptionParseUtilities()) == T$Roslyn.Utilities.CompilerOptionParseUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CompilerOptionParseUtilities(), $T) } $Subtype(T$Roslyn.Utilities.CompilerOptionParseUtilities(), $T) <==> (T$Roslyn.Utilities.CompilerOptionParseUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.OneOrMany`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.OneOrMany`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.OneOrMany`1(T), T$Roslyn.Utilities.OneOrMany`1(T$T())) } $Subtype(T$Roslyn.Utilities.OneOrMany`1(T), T$Roslyn.Utilities.OneOrMany`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.OneOrMany`1(T$T())) == T$Roslyn.Utilities.OneOrMany`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.OneOrMany`1(T), $T) } $Subtype(T$Roslyn.Utilities.OneOrMany`1(T), $T) <==> (T$Roslyn.Utilities.OneOrMany`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.OneOrMany`1.Enumerator() : Ref;
const unique T$Roslyn.Utilities.OneOrMany`1.Enumerator : int;
axiom $TypeConstructor(T$Roslyn.Utilities.OneOrMany`1.Enumerator()) == T$Roslyn.Utilities.OneOrMany`1.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.OneOrMany`1.Enumerator(), $T) } $Subtype(T$Roslyn.Utilities.OneOrMany`1.Enumerator(), $T) <==> (T$Roslyn.Utilities.OneOrMany`1.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ObjectReader() : Ref;
const unique T$Roslyn.Utilities.ObjectReader : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectReader()) == T$Roslyn.Utilities.ObjectReader;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectReader(), $T) } $Subtype(T$Roslyn.Utilities.ObjectReader(), $T) <==> (T$Roslyn.Utilities.ObjectReader() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T), T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T$T())) } $Subtype(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T), T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T$T())) == T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T), $T) } $Subtype(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T), $T) <==> (T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c() : Ref;
const unique T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c()) == T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c(), $T) } $Subtype(T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c(), $T) <==> (T$Roslyn.Utilities.ObjectReader.ReaderReferenceMap`1.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ConcurrentDictionaryExtensions() : Ref;
const unique T$Roslyn.Utilities.ConcurrentDictionaryExtensions : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ConcurrentDictionaryExtensions()) == T$Roslyn.Utilities.ConcurrentDictionaryExtensions;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ConcurrentDictionaryExtensions(), $T) } $Subtype(T$Roslyn.Utilities.ConcurrentDictionaryExtensions(), $T) <==> (T$Roslyn.Utilities.ConcurrentDictionaryExtensions() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.UnicodeCharacterUtilities() : Ref;
const unique T$Roslyn.Utilities.UnicodeCharacterUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.UnicodeCharacterUtilities()) == T$Roslyn.Utilities.UnicodeCharacterUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.UnicodeCharacterUtilities(), $T) } $Subtype(T$Roslyn.Utilities.UnicodeCharacterUtilities(), $T) <==> (T$Roslyn.Utilities.UnicodeCharacterUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.Hash() : Ref;
const unique T$Roslyn.Utilities.Hash : int;
axiom $TypeConstructor(T$Roslyn.Utilities.Hash()) == T$Roslyn.Utilities.Hash;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.Hash(), $T) } $Subtype(T$Roslyn.Utilities.Hash(), $T) <==> (T$Roslyn.Utilities.Hash() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));






function T$Roslyn.Utilities.OneOrMany() : Ref;
const unique T$Roslyn.Utilities.OneOrMany : int;
axiom $TypeConstructor(T$Roslyn.Utilities.OneOrMany()) == T$Roslyn.Utilities.OneOrMany;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.OneOrMany(), $T) } $Subtype(T$Roslyn.Utilities.OneOrMany(), $T) <==> (T$Roslyn.Utilities.OneOrMany() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




function T$Roslyn.Utilities.DesktopShim() : Ref;
const unique T$Roslyn.Utilities.DesktopShim : int;
axiom $TypeConstructor(T$Roslyn.Utilities.DesktopShim()) == T$Roslyn.Utilities.DesktopShim;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.DesktopShim(), $T) } $Subtype(T$Roslyn.Utilities.DesktopShim(), $T) <==> (T$Roslyn.Utilities.DesktopShim() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.DesktopShim.FileNotFoundException() : Ref;
const unique T$Roslyn.Utilities.DesktopShim.FileNotFoundException : int;
axiom $TypeConstructor(T$Roslyn.Utilities.DesktopShim.FileNotFoundException()) == T$Roslyn.Utilities.DesktopShim.FileNotFoundException;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.DesktopShim.FileNotFoundException(), $T) } $Subtype(T$Roslyn.Utilities.DesktopShim.FileNotFoundException(), $T) <==> (T$Roslyn.Utilities.DesktopShim.FileNotFoundException() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.ConsList`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.ConsList`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.ConsList`1(T), T$Roslyn.Utilities.ConsList`1(T$T())) } $Subtype(T$Roslyn.Utilities.ConsList`1(T), T$Roslyn.Utilities.ConsList`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.ConsList`1(T$T())) == T$Roslyn.Utilities.ConsList`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ConsList`1(T), $T) } $Subtype(T$Roslyn.Utilities.ConsList`1(T), $T) <==> (T$Roslyn.Utilities.ConsList`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.ConsList`1.Enumerator() : Ref;
const unique T$Roslyn.Utilities.ConsList`1.Enumerator : int;
axiom $TypeConstructor(T$Roslyn.Utilities.ConsList`1.Enumerator()) == T$Roslyn.Utilities.ConsList`1.Enumerator;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.ConsList`1.Enumerator(), $T) } $Subtype(T$Roslyn.Utilities.ConsList`1.Enumerator(), $T) <==> (T$Roslyn.Utilities.ConsList`1.Enumerator() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.NoThrowStreamDisposer() : Ref;
const unique T$Roslyn.Utilities.NoThrowStreamDisposer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.NoThrowStreamDisposer()) == T$Roslyn.Utilities.NoThrowStreamDisposer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.NoThrowStreamDisposer(), $T) } $Subtype(T$Roslyn.Utilities.NoThrowStreamDisposer(), $T) <==> (T$Roslyn.Utilities.NoThrowStreamDisposer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.WeakList`1(T : Ref) : Ref;
const unique T$Roslyn.Utilities.WeakList`1 : int;
axiom(forall T : Ref :: {  $Subtype(T$Roslyn.Utilities.WeakList`1(T), T$Roslyn.Utilities.WeakList`1(T$T())) } $Subtype(T$Roslyn.Utilities.WeakList`1(T), T$Roslyn.Utilities.WeakList`1(T$T())) );
axiom $TypeConstructor(T$Roslyn.Utilities.WeakList`1(T$T())) == T$Roslyn.Utilities.WeakList`1;
axiom(forall T : Ref,  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.WeakList`1(T), $T) } $Subtype(T$Roslyn.Utilities.WeakList`1(T), $T) <==> (T$Roslyn.Utilities.WeakList`1(T) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12() : Ref;
const unique T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12()) == T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12(), $T) } $Subtype(T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12(), $T) <==> (T$Roslyn.Utilities.WeakList`1.$GetEnumerator$d__12() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.CommandLineUtilities() : Ref;
const unique T$Roslyn.Utilities.CommandLineUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.CommandLineUtilities()) == T$Roslyn.Utilities.CommandLineUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.CommandLineUtilities(), $T) } $Subtype(T$Roslyn.Utilities.CommandLineUtilities(), $T) <==> (T$Roslyn.Utilities.CommandLineUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.PathUtilities() : Ref;
const unique T$Roslyn.Utilities.PathUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.PathUtilities()) == T$Roslyn.Utilities.PathUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.PathUtilities(), $T) } $Subtype(T$Roslyn.Utilities.PathUtilities(), $T) <==> (T$Roslyn.Utilities.PathUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.PathUtilities.PathComparer() : Ref;
const unique T$Roslyn.Utilities.PathUtilities.PathComparer : int;
axiom $TypeConstructor(T$Roslyn.Utilities.PathUtilities.PathComparer()) == T$Roslyn.Utilities.PathUtilities.PathComparer;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.PathUtilities.PathComparer(), $T) } $Subtype(T$Roslyn.Utilities.PathUtilities.PathComparer(), $T) <==> (T$Roslyn.Utilities.PathUtilities.PathComparer() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)|| $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.PathUtilities.$$c() : Ref;
const unique T$Roslyn.Utilities.PathUtilities.$$c : int;
axiom $TypeConstructor(T$Roslyn.Utilities.PathUtilities.$$c()) == T$Roslyn.Utilities.PathUtilities.$$c;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.PathUtilities.$$c(), $T) } $Subtype(T$Roslyn.Utilities.PathUtilities.$$c(), $T) <==> (T$Roslyn.Utilities.PathUtilities.$$c() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$Roslyn.Utilities.FileUtilities() : Ref;
const unique T$Roslyn.Utilities.FileUtilities : int;
axiom $TypeConstructor(T$Roslyn.Utilities.FileUtilities()) == T$Roslyn.Utilities.FileUtilities;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.FileUtilities(), $T) } $Subtype(T$Roslyn.Utilities.FileUtilities(), $T) <==> (T$Roslyn.Utilities.FileUtilities() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));



function T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0() : Ref;
const unique T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0 : int;
axiom $TypeConstructor(T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0()) == T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0;
axiom(forall  $T: Ref:: {  $Subtype(T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0(), $T) } $Subtype(T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0(), $T) <==> (T$Roslyn.Utilities.FileUtilities.$$c__DisplayClass11_0() == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));


function T$$$f__AnonymousType2`2(<<>h__TransparentIdentifier0>j__TPar : Ref,<typeDef>j__TPar : Ref) : Ref;
const unique T$$$f__AnonymousType2`2 : int;
axiom(forall <<>h__TransparentIdentifier0>j__TPar : Ref,<typeDef>j__TPar : Ref :: {  $Subtype(T$$$f__AnonymousType2`2(<<>h__TransparentIdentifier0>j__TPar,<typeDef>j__TPar), T$$$f__AnonymousType2`2(T$$$$h__TransparentIdentifier0$j__TPar(),T$$typeDef$j__TPar())) } $Subtype(T$$$f__AnonymousType2`2(<<>h__TransparentIdentifier0>j__TPar,<typeDef>j__TPar), T$$$f__AnonymousType2`2(T$$$$h__TransparentIdentifier0$j__TPar(),T$$typeDef$j__TPar())) );
axiom $TypeConstructor(T$$$f__AnonymousType2`2(T$$$$h__TransparentIdentifier0$j__TPar(),T$$typeDef$j__TPar())) == T$$$f__AnonymousType2`2;
axiom(forall <<>h__TransparentIdentifier0>j__TPar : Ref,<typeDef>j__TPar : Ref,  $T: Ref:: {  $Subtype(T$$$f__AnonymousType2`2(<<>h__TransparentIdentifier0>j__TPar,<typeDef>j__TPar), $T) } $Subtype(T$$$f__AnonymousType2`2(<<>h__TransparentIdentifier0>j__TPar,<typeDef>j__TPar), $T) <==> (T$$$f__AnonymousType2`2(<<>h__TransparentIdentifier0>j__TPar,<typeDef>j__TPar) == $T || $Subtype(T$Microsoft.Cci.DummyTypeReference(), $T)));




 

procedure  Microsoft.Cci.DebugSourceDocument.#ctor$System.String$System.Guid(this : Ref,location : Ref,language : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.Cci.DummyTypeReference());
assume language == null || $Subtype($DynamicType(language), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._location[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._language[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._isComputedChecksum[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._sourceInfo[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := location;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
assume {:nonnull} $r1 != null;
F$Microsoft.Cci.DebugSourceDocument._location[$r1] := $r2;

$r3 := this;
$r4 := language;
assume {:nonnull} $r3 != null;
F$Microsoft.Cci.DebugSourceDocument._language[$r3] := $r4;

return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.#ctor$System.String$System.Guid$System.Func$Microsoft.Cci.DebugSourceInfo$(this : Ref,location : Ref,language : Ref,sourceInfo : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.Cci.DummyTypeReference());
assume language == null || $Subtype($DynamicType(language), T$Microsoft.Cci.DummyTypeReference());
assume sourceInfo == null || $Subtype($DynamicType(sourceInfo), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DebugSourceInfo()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultBoolValue;
assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._location[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._language[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._isComputedChecksum[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._sourceInfo[this] := $defaultRef;

$r0 := this;
$r1 := location;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := language;
assume {:nonnull} $r0 != null;
call Microsoft.Cci.DebugSourceDocument.#ctor$System.String$System.Guid($r0,$r1,$r2);


		if ($Exception != null)
		{
			return;
		}

$r3 := this;
$r4 := sourceInfo;
call $r5 := System.Threading.Tasks.Task.Run``1$System.Func$``0$($r4);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r3 != null;
F$Microsoft.Cci.DebugSourceDocument._sourceInfo[$r3] := $r5;

$r6 := this;
$r7 := true;
assume {:nonnull} $r6 != null;
F$Microsoft.Cci.DebugSourceDocument._isComputedChecksum[$r6] := $r7;

return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.#ctor$System.String$System.Guid$System.Collections.Immutable.ImmutableArray$System.Byte$$System.Guid(this : Ref,location : Ref,language : Ref,checksum : Ref,algorithm : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var local_0 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize0 : int;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.Cci.DummyTypeReference());
assume language == null || $Subtype($DynamicType(language), T$Microsoft.Cci.DummyTypeReference());
assume checksum == null || $Subtype($DynamicType(checksum), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));
assume algorithm == null || $Subtype($DynamicType(algorithm), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
local_0 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._location[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._language[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._isComputedChecksum[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.Cci.DebugSourceDocument._sourceInfo[this] := $defaultRef;

$r0 := this;
$r1 := location;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := language;
assume {:nonnull} $r0 != null;
call Microsoft.Cci.DebugSourceDocument.#ctor$System.String$System.Guid($r0,$r1,$r2);


		if ($Exception != null)
		{
			return;
		}

$r3 := this;
$r4 := checksum;
$r5 := algorithm;
$r6 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r7 := local_0;
call $r8 := Alloc();
assume $DynamicType($r8) == T$Microsoft.Cci.DebugSourceInfo();
assume $TypeConstructor($DynamicType($r8)) == T$Microsoft.Cci.DebugSourceInfo;
assume {:nonnull} $r8 != null;
call Microsoft.Cci.DebugSourceInfo.#ctor$System.Collections.Immutable.ImmutableArray$System.Byte$$System.Guid$System.Collections.Immutable.ImmutableArray$System.Byte$($r8,$r4,$r5,$r7);


		if ($Exception != null)
		{
			return;
		}

$r9 := $r8;
call $r10 := System.Threading.Tasks.Task.FromResult``1$``0($r9);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r3 != null;
F$Microsoft.Cci.DebugSourceDocument._sourceInfo[$r3] := $r10;

return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.IsSupportedAlgorithm$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm(algorithm : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r2 : Ref;
	var $r3 : int;
	var $r5 : bool;
	var $r4 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume algorithm == null || $Subtype($DynamicType(algorithm), T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r5 := $defaultBoolValue;
$r4 := $defaultBoolValue;
$r0 := algorithm;
$r1 := 1;
$r2 := $r0 - $r1;
$r3 := 1;
if ($r2 > $r3)
{
		goto L_0008;
}

$r5 := true;
$result := $r5;
return ;
	L_0008:
$r4 := false;
$result := $r4;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.GetAlgorithmGuid$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm(algorithm : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r15 : Ref;
	var $r16 : int;
	var $r2 : int;
	var $r3 : int;
	var $r4 : int;
	var $r5 : int;
	var $r6 : int;
	var $r7 : int;
	var $r8 : int;
	var $r9 : int;
	var $r10 : int;
	var $r11 : int;
	var $r12 : int;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r17 : int;
	var $r18 : int;
	var $r19 : int;
	var $r20 : int;
	var $r21 : int;
	var $r22 : int;
	var $r23 : int;
	var $r24 : int;
	var $r25 : int;
	var $r26 : int;
	var $r27 : int;
	var $r28 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : Ref;
	var $r32 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume algorithm == null || $Subtype($DynamicType(algorithm), T$Microsoft.CodeAnalysis.Text.SourceHashAlgorithm());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r15 := $defaultRef;
$r16 := $defaultIntValue;
$r2 := $defaultIntValue;
$r3 := $defaultIntValue;
$r4 := $defaultIntValue;
$r5 := $defaultIntValue;
$r6 := $defaultIntValue;
$r7 := $defaultIntValue;
$r8 := $defaultIntValue;
$r9 := $defaultIntValue;
$r10 := $defaultIntValue;
$r11 := $defaultIntValue;
$r12 := $defaultIntValue;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r17 := $defaultIntValue;
$r18 := $defaultIntValue;
$r19 := $defaultIntValue;
$r20 := $defaultIntValue;
$r21 := $defaultIntValue;
$r22 := $defaultIntValue;
$r23 := $defaultIntValue;
$r24 := $defaultIntValue;
$r25 := $defaultIntValue;
$r26 := $defaultIntValue;
$r27 := $defaultIntValue;
$r28 := $defaultRef;
$r29 := $defaultRef;
$r30 := $defaultRef;
$r31 := $defaultRef;
$r32 := $defaultRef;
$r0 := algorithm;
$r1 := 1;
if ($r0 == $r1)
{
		goto L_000A;
}

$r15 := algorithm;
$r16 := 2;
if ($r15 == $r16)
{
		goto L_0038;
}

		goto L_006C;
	L_000A:
$r2 := -15198484;
$r3 := -21922;
$r4 := 19728;
$r5 := 135;
$r6 := 247;
$r7 := 111;
$r8 := 73;
$r9 := 99;
$r10 := 131;
$r11 := 52;
$r12 := 96;
call $r13 := Alloc();
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r13)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r13 != null;
call System.Guid.#ctor$System.Int32$System.Int16$System.Int16$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte($r13,$r2,$r3,$r4,$r5,$r6,$r7,$r8,$r9,$r10,$r11,$r12);


		if ($Exception != null)
		{
			return;
		}

$r14 := $r13;
$result := $r14;
return ;
	L_0038:
$r17 := -2010525681;
$r18 := 4536;
$r19 := 16915;
$r20 := 135;
$r21 := 139;
$r22 := 119;
$r23 := 14;
$r24 := 133;
$r25 := 151;
$r26 := 172;
$r27 := 22;
call $r28 := Alloc();
assume $DynamicType($r28) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r28)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r28 != null;
call System.Guid.#ctor$System.Int32$System.Int16$System.Int16$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte$System.Byte($r28,$r17,$r18,$r19,$r20,$r21,$r22,$r23,$r24,$r25,$r26,$r27);


		if ($Exception != null)
		{
			return;
		}

$r29 := $r28;
$result := $r29;
return ;
	L_006C:
$r30 := algorithm;
call $r31 := $BoxFromUnion($r30);
call $r32 := Roslyn.Utilities.ExceptionUtilities.UnexpectedValue$System.Object($r31);


		if ($Exception != null)
		{
			return;
		}

call $ExceptionType := System.Object.GetType($r32);
$Exception := $r32;
return;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.get_DocumentType(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := F$Microsoft.Cci.DebugSourceDocument.s_corSymDocumentTypeText;
$result := $r0;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.get_Language(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.Cci.DebugSourceDocument._language[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference());
$result := $r1;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.get_LanguageVendor(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := F$Microsoft.Cci.DebugSourceDocument.s_corSymLanguageVendorMicrosoft;
$result := $r0;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.get_Location(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.Cci.DebugSourceDocument._location[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference());
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$result := $r1;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.GetSourceInfo(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r4 : Ref;
	var local_0 : Ref;
	var $r5 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize0 : int;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r4 := $defaultRef;
local_0 := $defaultRef;
$r5 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.Cci.DebugSourceDocument._sourceInfo[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DebugSourceInfo()));
$r2 := $r1;
if ($r2 != null)
{
		goto L_0014;
}

$r4 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r5 := local_0;
$result := $r5;
return ;
	L_0014:
assume {:nonnull} $r1 != null;
call $r3 := System.Threading.Tasks.Task`1.get_Result($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.get_IsComputedChecksum(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DebugSourceDocument());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.Cci.DebugSourceDocument._isComputedChecksum[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.Cci.DebugSourceDocument.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r9))) == T$System.String;
$r10 := $defaultRef;
$r11 := $defaultRef;
F$Microsoft.Cci.DebugSourceDocument.CorSymLanguageTypeCSharp := $defaultRef;
F$Microsoft.Cci.DebugSourceDocument.CorSymLanguageTypeBasic := $defaultRef;
F$Microsoft.Cci.DebugSourceDocument.s_corSymLanguageVendorMicrosoft := $defaultRef;
F$Microsoft.Cci.DebugSourceDocument.s_corSymDocumentTypeText := $defaultRef;
$r0 := $string_literal_#1##2#f#3##4##5##6#f#7##8##9##10#c#5##8##4##4#d#2##8##11##9##3##2##8##9##9#c#9##12#fa#2##9##6#a#4##13#;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
call $r1 := Alloc();
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r1)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r1 != null;
call System.Guid.#ctor$System.String($r1,$r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := $r1;
F$Microsoft.Cci.DebugSourceDocument.CorSymLanguageTypeCSharp := $r2;
$r3 := $string_literal_#1##2#a#4##6#d#9#b#7##8#c#6##5#c#8##4##4#d#9##8#b#12##12##6##8##9##9#a#9##6##12##12#a#4#dd#6##13#;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
call $r4 := Alloc();
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r4)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r4 != null;
call System.Guid.#ctor$System.String($r4,$r3);


		if ($Exception != null)
		{
			return;
		}

$r5 := $r4;
F$Microsoft.Cci.DebugSourceDocument.CorSymLanguageTypeBasic := $r5;
$r6 := $string_literal_#1##11##11##12#b#12##3#c#12##8#e#5#e#11##8##4##4#d#6##8##11##9##2#f#8##9##9#c#9##12#fa#2##9##6#a#4##13#;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
call $r7 := Alloc();
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r7)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r7 != null;
call System.Guid.#ctor$System.String($r7,$r6);


		if ($Exception != null)
		{
			return;
		}

$r8 := $r7;
F$Microsoft.Cci.DebugSourceDocument.s_corSymLanguageVendorMicrosoft := $r8;
$r9 := $string_literal_#1##3#a#7##5##11#d#9#b#8##5##5##4##4##8##4##4#d#2##8#bd#6#a#8##9##9##9##9#f#7##9##7##12##11#bd#13#;
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r9))) == T$System.String;
call $r10 := Alloc();
assume $DynamicType($r10) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r10)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r10 != null;
call System.Guid.#ctor$System.String($r10,$r9);


		if ($Exception != null)
		{
			return;
		}

$r11 := $r10;
F$Microsoft.Cci.DebugSourceDocument.s_corSymDocumentTypeText := $r11;
return ;

}

 

procedure  Microsoft.Cci.DefinitionWithLocation.#ctor$Microsoft.Cci.IDefinition$System.Int32$System.Int32$System.Int32$System.Int32(this : Ref,definition : Ref,startLine : int,startColumn : int,endLine : int,endColumn : int) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $r4 : Ref;
	var $r5 : int;
	var $r6 : Ref;
	var $r7 : int;
	var $r8 : Ref;
	var $r9 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DefinitionWithLocation());
assume definition == null || $Subtype($DynamicType(definition), T$Microsoft.Cci.IDefinition());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r4 := $defaultRef;
$r5 := $defaultIntValue;
$r6 := $defaultRef;
$r7 := $defaultIntValue;
$r8 := $defaultRef;
$r9 := $defaultIntValue;
assume {:nonnull} this != null;
F$Microsoft.Cci.DefinitionWithLocation.Definition[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.Cci.DefinitionWithLocation.StartLine[this] := $defaultIntValue;

assume {:nonnull} this != null;
F$Microsoft.Cci.DefinitionWithLocation.StartColumn[this] := $defaultIntValue;

assume {:nonnull} this != null;
F$Microsoft.Cci.DefinitionWithLocation.EndLine[this] := $defaultIntValue;

assume {:nonnull} this != null;
F$Microsoft.Cci.DefinitionWithLocation.EndColumn[this] := $defaultIntValue;

$r0 := this;
$r1 := definition;
assume {:nonnull} $r0 != null;
F$Microsoft.Cci.DefinitionWithLocation.Definition[$r0] := $r1;

$r2 := this;
$r3 := startLine;
assume {:nonnull} $r2 != null;
F$Microsoft.Cci.DefinitionWithLocation.StartLine[$r2] := $r3;

$r4 := this;
$r5 := startColumn;
assume {:nonnull} $r4 != null;
F$Microsoft.Cci.DefinitionWithLocation.StartColumn[$r4] := $r5;

$r6 := this;
$r7 := endLine;
assume {:nonnull} $r6 != null;
F$Microsoft.Cci.DefinitionWithLocation.EndLine[$r6] := $r7;

$r8 := this;
$r9 := endColumn;
assume {:nonnull} $r8 != null;
F$Microsoft.Cci.DefinitionWithLocation.EndColumn[$r8] := $r9;

return ;

}

 

procedure  Microsoft.Cci.DefinitionWithLocation.ToString(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : int;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : int;
	var $r10 : Ref;
	var $r11 : int;
	var local_0 : int;
	var $r12 : int;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : int;
	var $r16 : Ref;
	var $r17 : int;
	var $r18 : int;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : int;
	var $r22 : Ref;
	var $r23 : int;
	var $r24 : int;
	var $r25 : Ref;
	var $r26 : Ref;
	var $r27 : int;
	var $r28 : Ref;
	var $r29 : int;
	var $r30 : int;
	var $r31 : Ref;
	var $r32 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.Cci.DefinitionWithLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := $defaultIntValue;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultIntValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r7))) == T$System.String;
$r8 := $defaultRef;
$r9 := $defaultIntValue;
$r10 := $defaultRef;
$r11 := $defaultIntValue;
local_0 := $defaultIntValue;
$r12 := $defaultIntValue;
$r13 := $defaultRef;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
$r14 := $defaultRef;
$r15 := $defaultIntValue;
$r16 := $defaultRef;
$r17 := $defaultIntValue;
$r18 := $defaultIntValue;
$r19 := $defaultRef;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $defaultRef;
$r21 := $defaultIntValue;
$r22 := $defaultRef;
$r23 := $defaultIntValue;
$r24 := $defaultIntValue;
$r25 := $defaultRef;
assume $DynamicType($r25) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r25))) == T$System.String;
$r26 := $defaultRef;
$r27 := $defaultIntValue;
$r28 := $defaultRef;
$r29 := $defaultIntValue;
$r30 := $defaultIntValue;
$r31 := $defaultRef;
assume $DynamicType($r31) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r31))) == T$System.String;
$r32 := $defaultRef;
assume $DynamicType($r32) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r32))) == T$System.String;
$r0 := $string_literal_#1##9##13####9###$$###9###start#14##1##4##13##15##1##6##13#$end#14##1##2##13##15##1##12##13#;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := 5;
call $r2 := Alloc();
assume $ArrayLength($r2) == $r1;
assume (forall $tmp1: int :: $ArrayContents[$r2][$tmp1] == null);
$r3 := $r2;
$r4 := 0;
$r5 := this;
assume {:nonnull} $r5 != null;
$r6 := F$Microsoft.Cci.DefinitionWithLocation.Definition[$r5];

assume $Subtype($DynamicType($r6), T$Microsoft.Cci.IDefinition());
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r6);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails()))
{
call $r7 := Microsoft.CodeAnalysis.CodeGen.PrivateImplementationDetails.ToString($r6);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct()))
{
call $r7 := Microsoft.CodeAnalysis.CodeGen.ExplicitSizeStruct.ToString($r6);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField()))
{
call $r7 := Microsoft.CodeAnalysis.CodeGen.SynthesizedStaticField.ToString($r6);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod()))
{
call $r7 := Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedMethod.ToString($r6);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter()))
{
call $r7 := Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedParameter.ToString($r6);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType()))
{
call $r7 := Microsoft.CodeAnalysis.Emit.NoPia.EmbeddedTypesManager`21.CommonEmbeddedType.ToString($r6);


}

else if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r3,$r4,$r7);
$r8 := $r2;
$r9 := 1;
$r10 := this;
assume {:nonnull} $r10 != null;
$r11 := F$Microsoft.Cci.DefinitionWithLocation.StartLine[$r10];

local_0 := $r11;
$r12 := local_0;
assume {:nonnull} $r12 != null;
call $r13 := System.UInt32.ToString($r12);


		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r8,$r9,$r13);
$r14 := $r2;
$r15 := 2;
$r16 := this;
assume {:nonnull} $r16 != null;
$r17 := F$Microsoft.Cci.DefinitionWithLocation.StartColumn[$r16];

local_0 := $r17;
$r18 := local_0;
assume {:nonnull} $r18 != null;
call $r19 := System.UInt32.ToString($r18);


		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r14,$r15,$r19);
$r20 := $r2;
$r21 := 3;
$r22 := this;
assume {:nonnull} $r22 != null;
$r23 := F$Microsoft.Cci.DefinitionWithLocation.EndLine[$r22];

local_0 := $r23;
$r24 := local_0;
assume {:nonnull} $r24 != null;
call $r25 := System.UInt32.ToString($r24);


		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r20,$r21,$r25);
$r26 := $r2;
$r27 := 4;
$r28 := this;
assume {:nonnull} $r28 != null;
$r29 := F$Microsoft.Cci.DefinitionWithLocation.EndColumn[$r28];

local_0 := $r29;
$r30 := local_0;
assume {:nonnull} $r30 != null;
call $r31 := System.UInt32.ToString($r30);


		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r26,$r27,$r31);
call $r32 := System.String.Format$System.String$System.Objectarray($r0,$r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r32;
return ;

}

 

procedure  Microsoft.CodeAnalysis.SyntaxNodeLocationComparer.#ctor$Microsoft.CodeAnalysis.Compilation(this : Ref,compilation : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer());
assume compilation == null || $Subtype($DynamicType(compilation), T$Microsoft.CodeAnalysis.Compilation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer._compilation[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := compilation;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer._compilation[$r1] := $r2;

return ;

}

 

procedure  Microsoft.CodeAnalysis.SyntaxNodeLocationComparer.Compare$Microsoft.CodeAnalysis.SyntaxNode$Microsoft.CodeAnalysis.SyntaxNode(this : Ref,x : Ref,y : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer());
assume x == null || $Subtype($DynamicType(x), T$Microsoft.CodeAnalysis.SyntaxNode());
assume y == null || $Subtype($DynamicType(y), T$Microsoft.CodeAnalysis.SyntaxNode());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.SyntaxNodeLocationComparer._compilation[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Compilation());
$r2 := x;
assume {:nonnull} $r2 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r2);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.SyntaxNode()))
{
call $r3 := Microsoft.CodeAnalysis.SyntaxNode.GetLocation($r2);


}

else if ($r2 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r4 := y;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r4);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.SyntaxNode()))
{
call $r5 := Microsoft.CodeAnalysis.SyntaxNode.GetLocation($r4);


}

else if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Compilation()))
{
call $r6 := Microsoft.CodeAnalysis.Compilation.CompareSourceLocations$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r1,$r3,$r5);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Compilation()))
{
call $r6 := Microsoft.CodeAnalysis.Compilation.CompareSourceLocations$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r1,$r3,$r5);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.#ctor$System.String$Microsoft.CodeAnalysis.Text.TextSpan$Microsoft.CodeAnalysis.Text.LinePositionSpan(this : Ref,filePath : Ref,sourceSpan : Ref,lineSpan : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
assume filePath == null || $Subtype($DynamicType(filePath), T$Microsoft.Cci.DummyTypeReference());
assume sourceSpan == null || $Subtype($DynamicType(sourceSpan), T$Microsoft.CodeAnalysis.Text.TextSpan());
assume lineSpan == null || $Subtype($DynamicType(lineSpan), T$Microsoft.CodeAnalysis.Text.LinePositionSpan());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.ExternalFileLocation._sourceSpan[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Location.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := sourceSpan;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.ExternalFileLocation._sourceSpan[$r1] := $r2;

$r3 := this;
$r4 := filePath;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := lineSpan;
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.FileLinePositionSpan();
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.FileLinePositionSpan;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor$System.String$Microsoft.CodeAnalysis.Text.LinePositionSpan($r6,$r4,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
assume {:nonnull} $r3 != null;
F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[$r3] := $r7;

return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.get_SourceSpan(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.ExternalFileLocation._sourceSpan[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Text.TextSpan());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.GetLineSpan(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.GetMappedLineSpan(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.get_Kind(this : Ref) returns ($result : Ref)
{
	var $r0 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
$r0 := 4;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.Equals$System.Object(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r0 := this;
$r1 := obj;
$r2 := $As($r1,T$Microsoft.CodeAnalysis.ExternalFileLocation());
assume {:nonnull} $r0 != null;
call $r3 := Microsoft.CodeAnalysis.ExternalFileLocation.Equals$Microsoft.CodeAnalysis.ExternalFileLocation($r0,$r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.Equals$Microsoft.CodeAnalysis.ExternalFileLocation(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r5 : bool;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : bool;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : bool;
	var $r12 : Ref;
	var $r13 : Ref;
	var local_0 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : bool;
	var $r6 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.CodeAnalysis.ExternalFileLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r5 := $defaultBoolValue;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultBoolValue;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultBoolValue;
$r12 := $defaultRef;
$r13 := $defaultRef;
local_0 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r17 := $defaultBoolValue;
$r6 := $defaultBoolValue;
$r0 := obj;
$r1 := this;
if ($r0 != $r1)
{
		goto L_0006;
}

$r5 := true;
$result := $r5;
return ;
	L_0006:
$r2 := obj;
$r3 := null;
call $r4 := Microsoft.CodeAnalysis.Location.op_Inequality$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

if ($r4 == false)
{
		goto L_0037;
}

$r7 := this;
assume {:nonnull} $r7 != null;
$r8 := F$Microsoft.CodeAnalysis.ExternalFileLocation._sourceSpan[$r7];

assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.Text.TextSpan());
$r9 := obj;
assume {:nonnull} $r9 != null;
$r10 := F$Microsoft.CodeAnalysis.ExternalFileLocation._sourceSpan[$r9];

assume $Subtype($DynamicType($r10), T$Microsoft.CodeAnalysis.Text.TextSpan());
call $r11 := Microsoft.CodeAnalysis.Text.TextSpan.op_Equality$Microsoft.CodeAnalysis.Text.TextSpan$Microsoft.CodeAnalysis.Text.TextSpan($r8,$r10);


		if ($Exception != null)
		{
			return;
		}

if ($r11 == false)
{
		goto L_0037;
}

$r12 := this;
assume {:nonnull} $r12 != null;
$r13 := F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[$r12];

assume $Subtype($DynamicType($r13), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
local_0 := $r13;
$r14 := local_0;
$r15 := obj;
assume {:nonnull} $r15 != null;
$r16 := F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[$r15];

assume $Subtype($DynamicType($r16), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
assume {:nonnull} $r14 != null;
call $r17 := Microsoft.CodeAnalysis.FileLinePositionSpan.Equals$Microsoft.CodeAnalysis.FileLinePositionSpan($r14,$r16);


		if ($Exception != null)
		{
			return;
		}

$result := $r17;
return ;
	L_0037:
$r6 := false;
$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.ExternalFileLocation.GetHashCode(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $r4 : Ref;
	var $r5 : Ref;
	var local_1 : Ref;
	var $r6 : Ref;
	var $r7 : int;
	var $r8 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.ExternalFileLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r4 := $defaultRef;
$r5 := $defaultRef;
local_1 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultIntValue;
$r8 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.ExternalFileLocation._lineSpan[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
local_0 := $r1;
$r2 := local_0;
assume {:nonnull} $r2 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r2);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.FileLinePositionSpan()))
{
call $r3 := Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode($r2);


}

else if ($r2 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.ExternalFileLocation._sourceSpan[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.Text.TextSpan());
local_1 := $r5;
$r6 := local_1;
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r6);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Text.TextSpan()))
{
call $r7 := Microsoft.CodeAnalysis.Text.TextSpan.GetHashCode($r6);


}

else if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r8 := Roslyn.Utilities.Hash.Combine$System.Int32$System.Int32($r3,$r7);


		if ($Exception != null)
		{
			return;
		}

$result := $r8;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.ParseAndGetException$System.String(text : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;

assume text == null || $Subtype($DynamicType(text), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r0 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_pool;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Roslyn.Utilities.ObjectPool`1(T$Microsoft.Cci.DummyTypeReference(T$T()))))
{
call $r1 := Roslyn.Utilities.ObjectPool`1.Allocate($r0);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Roslyn.Utilities.ObjectPool`1(T$T())))
{
call $r1 := Roslyn.Utilities.ObjectPool`1.Allocate($r0);


}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_0 := $r1;
$r2 := local_0;
$r3 := text;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
assume {:nonnull} $r2 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r2);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader()))
{
call $r4 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.ParseInternal$System.String($r2,$r3);


}

else if ($r2 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r5 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_pool;
$r6 := local_0;
assume {:nonnull} $r5 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r5);
if ($Subtype(DynamicDispatch_Type_2, T$Roslyn.Utilities.ObjectPool`1(T$Microsoft.Cci.DummyTypeReference(T$T()))))
{
call Roslyn.Utilities.ObjectPool`1.Free$`0($r5,$r6);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Roslyn.Utilities.ObjectPool`1(T$T())))
{
call Roslyn.Utilities.ObjectPool`1.Free$`0($r5,$r6);


}

else if ($r5 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r4;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.ParseInternal$System.String(this : Ref,text : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : bool;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : bool;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : bool;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r19 : Ref;
	var local_0 : Ref;
	var $r27 : Ref;
	var $r28 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : Ref;
	var $r32 : Ref;
	var $r33 : Ref;
	var $r26 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var DynamicDispatch_Type_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader());
assume text == null || $Subtype($DynamicType(text), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultBoolValue;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultBoolValue;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultBoolValue;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultRef;
$r19 := $defaultRef;
local_0 := $defaultRef;
$r27 := $defaultRef;
$r28 := $defaultRef;
$r29 := $defaultRef;
$r30 := $defaultRef;
$r31 := $defaultRef;
$r32 := $defaultRef;
$r33 := $defaultRef;
$r26 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$r2 := text;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader()))
{
call Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.SetText$System.String($r1,$r2);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r3 := this;
assume {:nonnull} $r3 != null;
$r4 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r3];

assume $Subtype($DynamicType($r4), T$Microsoft.Cci.DummyTypeReference());
if ($r4 != null)
{
		goto L_002A;
}

$r5 := this;
$r6 := this;
assume {:nonnull} $r6 != null;
$r7 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[$r6];

assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$r8 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_xmlSettings;
call $r9 := System.Xml.XmlReader.Create$System.IO.TextReader$System.Xml.XmlReaderSettings($r7,$r8);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r5 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r5] := $r9;

	L_002A:
	L_002B:
$r10 := this;
assume {:nonnull} $r10 != null;
$r11 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r10];

assume $Subtype($DynamicType($r11), T$Microsoft.Cci.DummyTypeReference());
assume {:nonnull} $r11 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r11);
if ($r11 != null)
{
assert false;
}

		if ($Exception != null)
		{
			goto L_0072;
		}

$r13 := this;
assume {:nonnull} $r13 != null;
$r14 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r13];

assume $Subtype($DynamicType($r14), T$Microsoft.Cci.DummyTypeReference());
call $r15 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.ReachedEnd$System.Xml.XmlReader($r14);


		if ($Exception != null)
		{
			goto L_0072;
		}

if ($r15 == false)
{
		goto L_002B;
}

$r16 := this;
assume {:nonnull} $r16 != null;
$r17 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[$r16];

assume $Subtype($DynamicType($r17), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
assume {:nonnull} $r17 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r17);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader()))
{
call $r18 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.get_Eof($r17);


}

else if ($r17 != null)
{
assert false;
}

		if ($Exception != null)
		{
			goto L_0072;
		}

if ($r18 == false)
{
		goto L_006E;
}

$r20 := this;
assume {:nonnull} $r20 != null;
$r21 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r20];

assume $Subtype($DynamicType($r21), T$Microsoft.Cci.DummyTypeReference());
assume {:nonnull} $r21 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r21);
if ($r21 != null)
{
assert false;
}

		if ($Exception != null)
		{
			goto L_0072;
		}

$r22 := this;
$r23 := null;
assume {:nonnull} $r22 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r22] := $r23;

$r24 := this;
assume {:nonnull} $r24 != null;
$r25 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[$r24];

assume $Subtype($DynamicType($r25), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
assume {:nonnull} $r25 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r25);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader()))
{
call Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.Reset($r25);


}

else if ($r25 != null)
{
assert false;
}

		if ($Exception != null)
		{
			goto L_0072;
		}

	L_006E:
$r19 := null;
local_0 := $r19;
		goto L_0092;
	L_0072:
if (!$Subtype($ExceptionType, T$Microsoft.Cci.DummyTypeReference()))
{
return;
}

$r27 := $Exception;
$ExceptionInCatchHandler := $Exception;
$ExceptionInCatchHandlerType := $ExceptionType;
$Exception := null;
$ExceptionType := null;
$r28 := this;
assume {:nonnull} $r28 != null;
$r29 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r28];

assume $Subtype($DynamicType($r29), T$Microsoft.Cci.DummyTypeReference());
assume {:nonnull} $r29 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r29);
if ($r29 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r30 := this;
$r31 := null;
assume {:nonnull} $r30 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[$r30] := $r31;

$r32 := this;
assume {:nonnull} $r32 != null;
$r33 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[$r32];

assume $Subtype($DynamicType($r33), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
assume {:nonnull} $r33 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r33);
if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader()))
{
call Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.Reset($r33);


}

else if ($r33 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_0 := $r27;
		goto L_0092;
	L_0092:
$r26 := local_0;
$result := $r26;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._reader[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[this] := $defaultRef;

$r0 := this;
call $r1 := Alloc();
assume $DynamicType($r1) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader();
assume $TypeConstructor($DynamicType($r1)) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader;
assume {:nonnull} $r1 != null;
call Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.#ctor($r1);


		if ($Exception != null)
		{
			return;
		}

$r2 := $r1;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader._textReader[$r0] := $r2;

$r3 := this;
assume {:nonnull} $r3 != null;
call System.Object.#ctor($r3);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.#cctor() 
{
	var $r0 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : int;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $temp_var_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultIntValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultIntValue;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_pool := $defaultRef;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_xmlSettings := $defaultRef;
$r0 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.__9;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c()))
{
call $r2 := CreateDelegate_Roslyn.Utilities.ObjectPool`1.Factory(Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.$#cctor$b__8_0,$r0,Type0());
		if ($Exception != null)
		{
			return;
		}


}

else if ($r0 != null)
{
assert false;
}

$r3 := $r2;
$r4 := 2;
call $r5 := Alloc();
assume $DynamicType($r5) == T$Roslyn.Utilities.ObjectPool`1(T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader());
assume $TypeConstructor($DynamicType($r5)) == T$Roslyn.Utilities.ObjectPool`1;
assume {:nonnull} $r5 != null;
call Roslyn.Utilities.ObjectPool`1.#ctor$Roslyn.Utilities.ObjectPool$`0$.Factory$System.Int32($r5,$r3,$r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := $r5;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_pool := $r6;
call $r7 := Alloc();
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r7)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r7 != null;
call System.Xml.XmlReaderSettings.#ctor($r7);


		if ($Exception != null)
		{
			return;
		}

$r8 := $r7;
$r9 := $r8;
$r10 := 0;
assume {:nonnull} $r9 != null;
$temp_var_1 := Int2Union($r10);
call DynamicDispatch_Type_2 := System.Object.GetType($r9);
if ($r9 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.s_xmlSettings := $r8;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.Reset(this : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $r4 : Ref;
	var $r5 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r4 := $defaultRef;
$r5 := $defaultIntValue;
$r0 := this;
$r1 := null;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._text[$r0] := $r1;

$r2 := this;
$r3 := 0;
assume {:nonnull} $r2 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r2] := $r3;

$r4 := this;
$r5 := 0;
assume {:nonnull} $r4 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._readsPastTheEnd[$r4] := $r5;

return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.SetText$System.String(this : Ref,text : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $r4 : Ref;
	var $r5 : int;
	var $r6 : int;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
assume text == null || $Subtype($DynamicType(text), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r4 := $defaultRef;
$r5 := $defaultIntValue;
$r6 := $defaultIntValue;
$r7 := $defaultRef;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultIntValue;
$r0 := this;
$r1 := text;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._text[$r0] := $r1;

$r2 := this;
$r3 := 0;
assume {:nonnull} $r2 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._readsPastTheEnd[$r2] := $r3;

$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r4];

$r6 := 0;
if ($r5 <= $r6)
{
		goto L_0027;
}

$r7 := this;
$r8 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
assume {:nonnull} $r8 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r8);
if ($r8 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r7 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r7] := $r9;

	L_0027:
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.get_Position(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.ReachedEnd$System.Xml.XmlReader(reader : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r2 : int;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : int;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : bool;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;

assume reader == null || $Subtype($DynamicType(reader), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r2 := $defaultIntValue;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultIntValue;
$r7 := $defaultRef;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultRef;
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r9))) == T$System.String;
$r10 := $defaultBoolValue;
$r3 := $defaultBoolValue;
$r0 := reader;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r2 := 1;
if ($r1 != $r2)
{
		goto L_0024;
}

$r4 := reader;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r4);
if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r6 := 15;
if ($r5 != $r6)
{
		goto L_0024;
}

$r7 := reader;
assume {:nonnull} $r7 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r7);
if ($r7 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r9 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_currentElementName;
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r9))) == T$System.String;
call $r10 := System.String.op_Equality$System.String$System.String($r8,$r9);


		if ($Exception != null)
		{
			return;
		}

$result := $r10;
return ;
	L_0024:
$r3 := false;
$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.get_Eof(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r2 : int;
	var $r3 : bool;
	var $r4 : bool;
	var $r5 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r2 := $defaultIntValue;
$r3 := $defaultBoolValue;
$r4 := $defaultBoolValue;
$r5 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._readsPastTheEnd[$r0];

$r2 := 100;
$r3 := $r1 < $r2;
$r4 := false;
$r5 := $r3 == $r4;
$result := $r5;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.Read$System.Chararray$System.Int32$System.Int32(this : Ref,buffer : Ref,index : int,count : int) returns ($result : int)
{
	var $r0 : int;
	var $r2 : Ref;
	var $r3 : bool;
	var $r1 : int;
	var $r4 : int;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : int;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : int;
	var $r11 : Ref;
	var $r12 : int;
	var $r13 : int;
	var $r14 : int;
	var $r15 : int;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : int;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : int;
	var $r22 : Ref;
	var $r23 : int;
	var $r24 : int;
	var $r25 : Ref;
	var $r26 : int;
	var $r27 : int;
	var $r28 : int;
	var $r29 : int;
	var $r30 : Ref;
	var $r31 : Ref;
	var $r32 : int;
	var $r33 : Ref;
	var $r34 : Ref;
	var $r35 : Ref;
	var $r36 : int;
	var $r37 : Ref;
	var $r38 : int;
	var $r39 : int;
	var $r40 : Ref;
	var $r41 : int;
	var $r42 : int;
	var $r43 : Ref;
	var $r44 : int;
	var $r45 : int;
	var $r46 : int;
	var $r47 : int;
	var $r48 : Ref;
	var $r49 : Ref;
	var $r50 : int;
	var $r51 : Ref;
	var $r52 : Ref;
	var $r53 : int;
	var $r54 : Ref;
	var $r55 : int;
	var $r56 : int;
	var $r57 : Ref;
	var $r58 : int;
	var $r59 : int;
	var $r60 : Ref;
	var $r61 : Ref;
	var $r62 : int;
	var $r63 : int;
	var $r64 : Ref;
	var $r65 : int;
	var $r66 : int;
	var $r67 : int;
	var $r68 : int;
	var $r69 : int;
	var $r70 : int;
	var $r73 : Ref;
	var $r74 : Ref;
	var $r75 : int;
	var $r76 : int;
	var $r77 : int;
	var $r78 : Ref;
	var $r79 : int;
	var $r80 : int;
	var $r81 : int;
	var $r82 : int;
	var $r83 : int;
	var $r71 : int;
	var $r72 : int;
	var $immutableArgument_index : int;
	var $immutableArgument_count : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var DynamicDispatch_Type_5 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
assume buffer == null || $Subtype($DynamicType(buffer), T$System.Char$Array$());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r1 := $defaultIntValue;
$r4 := $defaultIntValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultIntValue;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultRef;
$r10 := $defaultIntValue;
$r11 := $defaultRef;
$r12 := $defaultIntValue;
$r13 := $defaultIntValue;
$r14 := $defaultIntValue;
$r15 := $defaultIntValue;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultIntValue;
$r19 := $defaultRef;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $defaultRef;
$r21 := $defaultIntValue;
$r22 := $defaultRef;
assume $DynamicType($r22) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r22))) == T$System.String;
$r23 := $defaultIntValue;
$r24 := $defaultIntValue;
$r25 := $defaultRef;
$r26 := $defaultIntValue;
$r27 := $defaultIntValue;
$r28 := $defaultIntValue;
$r29 := $defaultIntValue;
$r30 := $defaultRef;
$r31 := $defaultRef;
$r32 := $defaultIntValue;
$r33 := $defaultRef;
$r34 := $defaultRef;
assume $DynamicType($r34) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r34))) == T$System.String;
$r35 := $defaultRef;
$r36 := $defaultIntValue;
$r37 := $defaultRef;
assume $DynamicType($r37) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r37))) == T$System.String;
$r38 := $defaultIntValue;
$r39 := $defaultIntValue;
$r40 := $defaultRef;
assume $DynamicType($r40) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r40))) == T$System.String;
$r41 := $defaultIntValue;
$r42 := $defaultIntValue;
$r43 := $defaultRef;
$r44 := $defaultIntValue;
$r45 := $defaultIntValue;
$r46 := $defaultIntValue;
$r47 := $defaultIntValue;
$r48 := $defaultRef;
$r49 := $defaultRef;
$r50 := $defaultIntValue;
$r51 := $defaultRef;
assume $DynamicType($r51) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r51))) == T$System.String;
$r52 := $defaultRef;
$r53 := $defaultIntValue;
$r54 := $defaultRef;
assume $DynamicType($r54) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r54))) == T$System.String;
$r55 := $defaultIntValue;
$r56 := $defaultIntValue;
$r57 := $defaultRef;
assume $DynamicType($r57) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r57))) == T$System.String;
$r58 := $defaultIntValue;
$r59 := $defaultIntValue;
$r60 := $defaultRef;
$r61 := $defaultRef;
assume $DynamicType($r61) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r61))) == T$System.String;
$r62 := $defaultIntValue;
$r63 := $defaultIntValue;
$r64 := $defaultRef;
$r65 := $defaultIntValue;
$r66 := $defaultIntValue;
$r67 := $defaultIntValue;
$r68 := $defaultIntValue;
$r69 := $defaultIntValue;
$r70 := $defaultIntValue;
$r73 := $defaultRef;
$r74 := $defaultRef;
$r75 := $defaultIntValue;
$r76 := $defaultIntValue;
$r77 := $defaultIntValue;
$r78 := $defaultRef;
$r79 := $defaultIntValue;
$r80 := $defaultIntValue;
$r81 := $defaultIntValue;
$r82 := $defaultIntValue;
$r83 := $defaultIntValue;
$r71 := $defaultIntValue;
$r72 := $defaultIntValue;
$immutableArgument_index := $defaultIntValue;
$immutableArgument_count := $defaultIntValue;
$immutableArgument_count := count;
$immutableArgument_index := index;
$r0 := $immutableArgument_count;
if ($r0 == 0)
{
		goto L_000B;
}

$r2 := this;
assume {:nonnull} $r2 != null;
call $r3 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.get_Eof($r2);


		if ($Exception != null)
		{
			return;
		}

if ($r3 == false)
{
		goto L_000D;
}

	L_000B:
$r1 := 0;
$result := $r1;
return ;
	L_000D:
$r4 := $immutableArgument_count;
$r5 := this;
$r6 := this;
assume {:nonnull} $r6 != null;
$r7 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r6];

$r8 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := this;
assume {:nonnull} $r9 != null;
$r10 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r9];

$r11 := buffer;
$immutableArgument_index := $immutableArgument_index;
$immutableArgument_count := $immutableArgument_count;
call $immutableArgument_index,$immutableArgument_count,$r14 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.EncodeAndAdvance$System.String$System.Int32$System.Chararray$System.Int32$$System.Int32$($r8,$r10,$r11,$immutableArgument_index,$immutableArgument_count);


		if ($Exception != null)
		{
			return;
		}

$r15 := $r7 + $r14;
assume {:nonnull} $r5 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r5] := $r15;

$r16 := this;
$r17 := this;
assume {:nonnull} $r17 != null;
$r18 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r17];

$r19 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentStart;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := this;
assume {:nonnull} $r20 != null;
$r21 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r20];

$r22 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart;
assume $DynamicType($r22) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r22))) == T$System.String;
assume {:nonnull} $r22 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r22);
if ($r22 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r24 := $r21 - $r23;
$r25 := buffer;
$immutableArgument_index := $immutableArgument_index;
$immutableArgument_count := $immutableArgument_count;
call $immutableArgument_index,$immutableArgument_count,$r28 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.EncodeAndAdvance$System.String$System.Int32$System.Chararray$System.Int32$$System.Int32$($r19,$r24,$r25,$immutableArgument_index,$immutableArgument_count);


		if ($Exception != null)
		{
			return;
		}

$r29 := $r18 + $r28;
assume {:nonnull} $r16 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r16] := $r29;

$r30 := this;
$r31 := this;
assume {:nonnull} $r31 != null;
$r32 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r31];

$r33 := this;
assume {:nonnull} $r33 != null;
$r34 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._text[$r33];

assume $Subtype($DynamicType($r34), T$Microsoft.Cci.DummyTypeReference());
assume $DynamicType($r34) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r34))) == T$System.String;
$r35 := this;
assume {:nonnull} $r35 != null;
$r36 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r35];

$r37 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart;
assume $DynamicType($r37) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r37))) == T$System.String;
assume {:nonnull} $r37 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r37);
if ($r37 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r39 := $r36 - $r38;
$r40 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentStart;
assume $DynamicType($r40) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r40))) == T$System.String;
assume {:nonnull} $r40 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r40);
if ($r40 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r42 := $r39 - $r41;
$r43 := buffer;
$immutableArgument_index := $immutableArgument_index;
$immutableArgument_count := $immutableArgument_count;
call $immutableArgument_index,$immutableArgument_count,$r46 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.EncodeAndAdvance$System.String$System.Int32$System.Chararray$System.Int32$$System.Int32$($r34,$r42,$r43,$immutableArgument_index,$immutableArgument_count);


		if ($Exception != null)
		{
			return;
		}

$r47 := $r32 + $r46;
assume {:nonnull} $r30 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r30] := $r47;

$r48 := this;
$r49 := this;
assume {:nonnull} $r49 != null;
$r50 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r49];

$r51 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentEnd;
assume $DynamicType($r51) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r51))) == T$System.String;
$r52 := this;
assume {:nonnull} $r52 != null;
$r53 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r52];

$r54 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart;
assume $DynamicType($r54) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r54))) == T$System.String;
assume {:nonnull} $r54 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r54);
if ($r54 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r56 := $r53 - $r55;
$r57 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentStart;
assume $DynamicType($r57) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r57))) == T$System.String;
assume {:nonnull} $r57 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r57);
if ($r57 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r59 := $r56 - $r58;
$r60 := this;
assume {:nonnull} $r60 != null;
$r61 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._text[$r60];

assume $Subtype($DynamicType($r61), T$Microsoft.Cci.DummyTypeReference());
assume $DynamicType($r61) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r61))) == T$System.String;
assume {:nonnull} $r61 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r61);
if ($r61 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r63 := $r59 - $r62;
$r64 := buffer;
$immutableArgument_index := $immutableArgument_index;
$immutableArgument_count := $immutableArgument_count;
call $immutableArgument_index,$immutableArgument_count,$r67 := Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.EncodeAndAdvance$System.String$System.Int32$System.Chararray$System.Int32$$System.Int32$($r51,$r63,$r64,$immutableArgument_index,$immutableArgument_count);


		if ($Exception != null)
		{
			return;
		}

$r68 := $r50 + $r67;
assume {:nonnull} $r48 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[$r48] := $r68;

$r69 := $r4;
$r70 := $immutableArgument_count;
if ($r69 != $r70)
{
		goto L_00F6;
}

$r73 := this;
$r74 := this;
assume {:nonnull} $r74 != null;
$r75 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._readsPastTheEnd[$r74];

$r76 := 1;
$r77 := $r75 + $r76;
assume {:nonnull} $r73 != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._readsPastTheEnd[$r73] := $r77;

$r78 := buffer;
$r79 := $immutableArgument_index;
$r80 := 32;
assume Union2Int(Int2Union($r80)) == $r80;
call $WriteArrayElement($r78,$r79,Int2Union($r80));
$r81 := $immutableArgument_count;
$r82 := 1;
$r83 := $r81 - $r82;
$immutableArgument_count := $r83;
	L_00F6:
$r71 := $immutableArgument_count;
$r72 := $r4 - $r71;
$result := $r72;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.EncodeAndAdvance$System.String$System.Int32$System.Chararray$System.Int32$$System.Int32$(src : Ref,srcIndex : int,dest : Ref,destIndex : int,destCount : int) returns (destIndex$out : int,destCount$out : int,$result : int)
{
	var $r0 : int;
	var $r1 : int;
	var $r3 : int;
	var $r4 : int;
	var $r5 : int;
	var $r6 : Ref;
	var $r7 : int;
	var $r2 : int;
	var $r8 : Ref;
	var $r9 : int;
	var $r10 : int;
	var $r11 : int;
	var $r12 : int;
	var $r13 : int;
	var $r14 : int;
	var local_0 : int;
	var $r15 : Ref;
	var $r16 : int;
	var $r17 : Ref;
	var $r18 : int;
	var $r19 : int;
	var $r20 : int;
	var $r21 : int;
	var $r22 : int;
	var $r23 : int;
	var $r24 : int;
	var $r25 : int;
	var $r26 : int;
	var $r27 : int;
	var $r28 : int;
	var $r29 : int;
	var $r30 : int;
	var $r31 : int;
	var $immutableArgument_destCount : int;
	var $immutableArgument_destIndex : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;

assume src == null || $Subtype($DynamicType(src), T$Microsoft.Cci.DummyTypeReference());
assume dest == null || $Subtype($DynamicType(dest), T$System.Char$Array$());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
$r1 := $defaultIntValue;
$r3 := $defaultIntValue;
$r4 := $defaultIntValue;
$r5 := $defaultIntValue;
$r6 := $defaultRef;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
$r7 := $defaultIntValue;
$r2 := $defaultIntValue;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultIntValue;
$r10 := $defaultIntValue;
$r11 := $defaultIntValue;
$r12 := $defaultIntValue;
$r13 := $defaultIntValue;
$r14 := $defaultIntValue;
local_0 := $defaultIntValue;
$r15 := $defaultRef;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $defaultIntValue;
$r17 := $defaultRef;
$r18 := $defaultIntValue;
$r19 := $defaultIntValue;
$r20 := $defaultIntValue;
$r21 := $defaultIntValue;
$r22 := $defaultIntValue;
$r23 := $defaultIntValue;
$r24 := $defaultIntValue;
$r25 := $defaultIntValue;
$r26 := $defaultIntValue;
$r27 := $defaultIntValue;
$r28 := $defaultIntValue;
$r29 := $defaultIntValue;
$r30 := $defaultIntValue;
$r31 := $defaultIntValue;
$immutableArgument_destCount := $defaultIntValue;
$immutableArgument_destIndex := $defaultIntValue;
$immutableArgument_destIndex := destIndex;
$immutableArgument_destCount := destCount;
$immutableArgument_destCount := $immutableArgument_destCount;
$r1 := $immutableArgument_destCount;
if ($r1 == 0)
{
		goto L_0012;
}

$r3 := srcIndex;
$r4 := 0;
if ($r3 < $r4)
{
		goto L_0012;
}

$r5 := srcIndex;
$r6 := src;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r6);
if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r5 < $r7)
{
		goto L_0014;
}

	L_0012:
$r2 := 0;
destIndex$out := $immutableArgument_destIndex;
destCount$out := $immutableArgument_destCount;
$result := $r2;
return ;
	L_0014:
$r8 := src;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
assume {:nonnull} $r8 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r8);
if ($r8 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r10 := srcIndex;
$r11 := $r9 - $r10;
$immutableArgument_destCount := $immutableArgument_destCount;
$r13 := $immutableArgument_destCount;
call $r14 := System.Math.Min$System.Int32$System.Int32($r11,$r13);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r14;
$r15 := src;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := srcIndex;
$r17 := dest;
$immutableArgument_destIndex := $immutableArgument_destIndex;
$r19 := $immutableArgument_destIndex;
$r20 := local_0;
assume {:nonnull} $r15 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r15);
if ($r15 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$immutableArgument_destIndex := $immutableArgument_destIndex;
$immutableArgument_destIndex := $immutableArgument_destIndex;
$r23 := $immutableArgument_destIndex;
$r24 := local_0;
$r25 := $r23 + $r24;
$immutableArgument_destIndex := $r25;
$immutableArgument_destCount := $immutableArgument_destCount;
$immutableArgument_destCount := $immutableArgument_destCount;
$r28 := $immutableArgument_destCount;
$r29 := local_0;
$r30 := $r28 - $r29;
$immutableArgument_destCount := $r30;
$r31 := local_0;
destIndex$out := $immutableArgument_destIndex;
destCount$out := $immutableArgument_destCount;
$result := $r31;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.Read(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
call $r0 := Roslyn.Utilities.ExceptionUtilities.get_Unreachable();


		if ($Exception != null)
		{
			return;
		}

call $ExceptionType := System.Object.GetType($r0);
$Exception := $r0;
return;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.Peek(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
call $r0 := Roslyn.Utilities.ExceptionUtilities.get_Unreachable();


		if ($Exception != null)
		{
			return;
		}

call $ExceptionType := System.Object.GetType($r0);
$Exception := $r0;
return;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._text[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._position[this] := $defaultIntValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader._readsPastTheEnd[this] := $defaultIntValue;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.IO.TextReader.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
$r4 := $defaultRef;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := $defaultRef;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := $defaultRef;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r9))) == T$System.String;
$r10 := $defaultRef;
assume $DynamicType($r10) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r10))) == T$System.String;
$r11 := $defaultRef;
assume $DynamicType($r11) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r11))) == T$System.String;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := $defaultRef;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
$r14 := $defaultRef;
assume $DynamicType($r14) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r14))) == T$System.String;
$r15 := $defaultRef;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $defaultRef;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
$r17 := $defaultRef;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$r18 := $defaultRef;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
$r19 := $defaultRef;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $defaultRef;
assume $DynamicType($r20) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r20))) == T$System.String;
$r21 := $defaultRef;
assume $DynamicType($r21) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r21))) == T$System.String;
$r22 := $defaultRef;
assume $DynamicType($r22) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r22))) == T$System.String;
$r23 := $defaultRef;
assume $DynamicType($r23) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r23))) == T$System.String;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.maxReadsPastTheEnd := $defaultIntValue;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_rootElementName := $defaultRef;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_currentElementName := $defaultRef;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart := $defaultRef;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentStart := $defaultRef;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentEnd := $defaultRef;
$r0 := $string_literal__;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
call $r1 := System.Guid.NewGuid();


		if ($Exception != null)
		{
			return;
		}

local_0 := $r1;
$r2 := local_0;
$r3 := $string_literal_N;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
assume {:nonnull} $r2 != null;
call $r4 := System.Guid.ToString$System.String($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

call $r5 := System.String.Concat$System.String$System.String($r0,$r4);


		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_rootElementName := $r5;
$r6 := $string_literal__;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
call $r7 := System.Guid.NewGuid();


		if ($Exception != null)
		{
			return;
		}

local_0 := $r7;
$r8 := local_0;
$r9 := $string_literal_N;
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r9))) == T$System.String;
assume {:nonnull} $r8 != null;
call $r10 := System.Guid.ToString$System.String($r8,$r9);


		if ($Exception != null)
		{
			return;
		}

call $r11 := System.String.Concat$System.String$System.String($r6,$r10);


		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_currentElementName := $r11;
$r12 := $string_literal_$;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_rootElementName;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
$r14 := $string_literal_$;
assume $DynamicType($r14) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r14))) == T$System.String;
call $r15 := System.String.Concat$System.String$System.String$System.String($r12,$r13,$r14);


		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.RootStart := $r15;
$r16 := $string_literal_$;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
$r17 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_currentElementName;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$r18 := $string_literal_$;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
call $r19 := System.String.Concat$System.String$System.String$System.String($r16,$r17,$r18);


		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentStart := $r19;
$r20 := $string_literal_$#15#;
assume $DynamicType($r20) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r20))) == T$System.String;
$r21 := F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.s_currentElementName;
assume $DynamicType($r21) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r21))) == T$System.String;
$r22 := $string_literal_$;
assume $DynamicType($r22) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r22))) == T$System.String;
call $r23 := System.String.Concat$System.String$System.String$System.String($r20,$r21,$r22);


		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.Reader.CurrentEnd := $r23;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.__9 := $defaultRef;
call $r0 := Alloc();
assume $DynamicType($r0) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c();
assume $TypeConstructor($DynamicType($r0)) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := $r0;
F$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.__9 := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c.$#cctor$b__8_0(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.$$c());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
call $r0 := Alloc();
assume $DynamicType($r0) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader();
assume $TypeConstructor($DynamicType($r0)) == T$Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.XmlDocumentationCommentTextReader.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := $r0;
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.#ctor$System.String$System.Int32$System.Int32(this : Ref,path : Ref,lineNumber : int,columnNumber : int) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : int;
	var $r3 : int;
	var $r4 : Ref;
	var local_1 : Ref;
	var $r5 : int;
	var $r6 : int;
	var $r7 : int;
	var $r8 : int;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlLocation());
assume path == null || $Subtype($DynamicType(path), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultIntValue;
$r3 := $defaultIntValue;
$r4 := $defaultRef;
local_1 := $defaultRef;
$r5 := $defaultIntValue;
$r6 := $defaultIntValue;
$r7 := $defaultIntValue;
$r8 := $defaultIntValue;
$r9 := $defaultRef;
$r10 := $defaultRef;
assume $DynamicType($r10) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r10))) == T$System.String;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.XmlLocation._positionSpan[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Location.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := local_0;
$r2 := lineNumber;
$r3 := columnNumber;
assume {:nonnull} $r1 != null;
call Microsoft.CodeAnalysis.Text.LinePosition.#ctor$System.Int32$System.Int32($r1,$r2,$r3);


		if ($Exception != null)
		{
			return;
		}

$r4 := local_1;
$r5 := lineNumber;
$r6 := columnNumber;
$r7 := 1;
$r8 := $r6 + $r7;
assume {:nonnull} $r4 != null;
call Microsoft.CodeAnalysis.Text.LinePosition.#ctor$System.Int32$System.Int32($r4,$r5,$r8);


		if ($Exception != null)
		{
			return;
		}

$r9 := this;
$r10 := path;
assume $DynamicType($r10) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r10))) == T$System.String;
$r11 := local_0;
$r12 := local_1;
call $r13 := Alloc();
assume $DynamicType($r13) == T$Microsoft.CodeAnalysis.FileLinePositionSpan();
assume $TypeConstructor($DynamicType($r13)) == T$Microsoft.CodeAnalysis.FileLinePositionSpan;
assume {:nonnull} $r13 != null;
call Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor$System.String$Microsoft.CodeAnalysis.Text.LinePosition$Microsoft.CodeAnalysis.Text.LinePosition($r13,$r10,$r11,$r12);


		if ($Exception != null)
		{
			return;
		}

$r14 := $r13;
assume {:nonnull} $r9 != null;
F$Microsoft.CodeAnalysis.XmlLocation._positionSpan[$r9] := $r14;

return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.Create$System.Xml.XmlException$System.String(exception : Ref,path : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r2 : int;
	var $r3 : int;
	var $r4 : int;
	var $r5 : int;
	var local_0 : int;
	var $r6 : Ref;
	var $r7 : int;
	var $r8 : int;
	var $r9 : int;
	var $r10 : int;
	var $r11 : int;
	var local_1 : int;
	var $r12 : Ref;
	var $r13 : int;
	var $r14 : int;
	var $r15 : Ref;
	var $r16 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume exception == null || $Subtype($DynamicType(exception), T$Microsoft.Cci.DummyTypeReference());
assume path == null || $Subtype($DynamicType(path), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r2 := $defaultIntValue;
$r3 := $defaultIntValue;
$r4 := $defaultIntValue;
$r5 := $defaultIntValue;
local_0 := $defaultIntValue;
$r6 := $defaultRef;
$r7 := $defaultIntValue;
$r8 := $defaultIntValue;
$r9 := $defaultIntValue;
$r10 := $defaultIntValue;
$r11 := $defaultIntValue;
local_1 := $defaultIntValue;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := $defaultIntValue;
$r14 := $defaultIntValue;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r0 := exception;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r2 := 1;
$r3 := $r1 - $r2;
$r4 := 0;
call $r5 := System.Math.Max$System.Int32$System.Int32($r3,$r4);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r5;
$r6 := exception;
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r6);
if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r8 := 1;
$r9 := $r7 - $r8;
$r10 := 0;
call $r11 := System.Math.Max$System.Int32$System.Int32($r9,$r10);


		if ($Exception != null)
		{
			return;
		}

local_1 := $r11;
$r12 := path;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := local_0;
$r14 := local_1;
call $r15 := Alloc();
assume $DynamicType($r15) == T$Microsoft.CodeAnalysis.XmlLocation();
assume $TypeConstructor($DynamicType($r15)) == T$Microsoft.CodeAnalysis.XmlLocation;
assume {:nonnull} $r15 != null;
call Microsoft.CodeAnalysis.XmlLocation.#ctor$System.String$System.Int32$System.Int32($r15,$r12,$r13,$r14);


		if ($Exception != null)
		{
			return;
		}

$r16 := $r15;
$result := $r16;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.Create$System.Xml.Linq.XObject$System.String(obj : Ref,path : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $r3 : int;
	var $r4 : int;
	var $r5 : int;
	var $r6 : int;
	var local_0 : int;
	var $r7 : int;
	var $r8 : int;
	var $r9 : int;
	var $r10 : int;
	var $r11 : int;
	var local_1 : int;
	var $r12 : Ref;
	var $r13 : int;
	var $r14 : int;
	var $r15 : Ref;
	var $r16 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.Cci.DummyTypeReference());
assume path == null || $Subtype($DynamicType(path), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r3 := $defaultIntValue;
$r4 := $defaultIntValue;
$r5 := $defaultIntValue;
$r6 := $defaultIntValue;
local_0 := $defaultIntValue;
$r7 := $defaultIntValue;
$r8 := $defaultIntValue;
$r9 := $defaultIntValue;
$r10 := $defaultIntValue;
$r11 := $defaultIntValue;
local_1 := $defaultIntValue;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := $defaultIntValue;
$r14 := $defaultIntValue;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r0 := obj;
$r1 := $r0;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r3 := 1;
$r4 := $r2 - $r3;
$r5 := 0;
call $r6 := System.Math.Max$System.Int32$System.Int32($r4,$r5);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r6;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r0);
if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r8 := 1;
$r9 := $r7 - $r8;
$r10 := 0;
call $r11 := System.Math.Max$System.Int32$System.Int32($r9,$r10);


		if ($Exception != null)
		{
			return;
		}

local_1 := $r11;
$r12 := path;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := local_0;
$r14 := local_1;
call $r15 := Alloc();
assume $DynamicType($r15) == T$Microsoft.CodeAnalysis.XmlLocation();
assume $TypeConstructor($DynamicType($r15)) == T$Microsoft.CodeAnalysis.XmlLocation;
assume {:nonnull} $r15 != null;
call Microsoft.CodeAnalysis.XmlLocation.#ctor$System.String$System.Int32$System.Int32($r15,$r12,$r13,$r14);


		if ($Exception != null)
		{
			return;
		}

$r16 := $r15;
$result := $r16;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.get_Kind(this : Ref) returns ($result : Ref)
{
	var $r0 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
$r0 := 3;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.GetLineSpan(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.XmlLocation._positionSpan[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.Equals$Microsoft.CodeAnalysis.XmlLocation(this : Ref,other : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r5 : bool;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : bool;
	var $r7 : Ref;
	var $r8 : Ref;
	var local_0 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : bool;
	var $r6 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlLocation());
assume other == null || $Subtype($DynamicType(other), T$Microsoft.CodeAnalysis.XmlLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r5 := $defaultBoolValue;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultBoolValue;
$r7 := $defaultRef;
$r8 := $defaultRef;
local_0 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultBoolValue;
$r6 := $defaultBoolValue;
$r0 := this;
$r1 := other;
if ($r0 != $r1)
{
		goto L_0006;
}

$r5 := true;
$result := $r5;
return ;
	L_0006:
$r2 := other;
$r3 := null;
call $r4 := Microsoft.CodeAnalysis.Location.op_Inequality$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

if ($r4 == false)
{
		goto L_0024;
}

$r7 := other;
assume {:nonnull} $r7 != null;
$r8 := F$Microsoft.CodeAnalysis.XmlLocation._positionSpan[$r7];

assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
local_0 := $r8;
$r9 := local_0;
$r10 := this;
assume {:nonnull} $r10 != null;
$r11 := F$Microsoft.CodeAnalysis.XmlLocation._positionSpan[$r10];

assume $Subtype($DynamicType($r11), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
assume {:nonnull} $r9 != null;
call $r12 := Microsoft.CodeAnalysis.FileLinePositionSpan.Equals$Microsoft.CodeAnalysis.FileLinePositionSpan($r9,$r11);


		if ($Exception != null)
		{
			return;
		}

$result := $r12;
return ;
	L_0024:
$r6 := false;
$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.Equals$System.Object(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlLocation());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r0 := this;
$r1 := obj;
$r2 := $As($r1,T$Microsoft.CodeAnalysis.XmlLocation());
assume {:nonnull} $r0 != null;
call $r3 := Microsoft.CodeAnalysis.XmlLocation.Equals$Microsoft.CodeAnalysis.XmlLocation($r0,$r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.XmlLocation.GetHashCode(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.XmlLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.XmlLocation._positionSpan[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.FileLinePositionSpan());
local_0 := $r1;
$r2 := local_0;
assume {:nonnull} $r2 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r2);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.FileLinePositionSpan()))
{
call $r3 := Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode($r2);


}

else if ($r2 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.CommonModuleCompilationState.Freeze(this : Ref) 
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.CommonModuleCompilationState());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
call System.Threading.Interlocked.MemoryBarrier();


		if ($Exception != null)
		{
			return;
		}

$r0 := this;
$r1 := true;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.CommonModuleCompilationState._frozen[$r0] := $r1;

return ;

}

 

procedure  Microsoft.CodeAnalysis.CommonModuleCompilationState.get_Frozen(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.CommonModuleCompilationState());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.CommonModuleCompilationState._frozen[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.CommonModuleCompilationState.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.CommonModuleCompilationState());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.CommonModuleCompilationState._frozen[this] := $defaultBoolValue;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.UnresolvedMetadataReference.get_Reference(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.UnresolvedMetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.UnresolvedMetadataReference.$Reference$k__BackingField[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference());
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.UnresolvedMetadataReference.#ctor$System.String$Microsoft.CodeAnalysis.MetadataReferenceProperties(this : Ref,reference : Ref,properties : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.UnresolvedMetadataReference());
assume reference == null || $Subtype($DynamicType(reference), T$Microsoft.Cci.DummyTypeReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.UnresolvedMetadataReference.$Reference$k__BackingField[this] := $defaultRef;

$r0 := this;
$r1 := properties;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.MetadataReference.#ctor$Microsoft.CodeAnalysis.MetadataReferenceProperties($r0,$r1);


		if ($Exception != null)
		{
			return;
		}

$r2 := this;
$r3 := reference;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
assume {:nonnull} $r2 != null;
F$Microsoft.CodeAnalysis.UnresolvedMetadataReference.$Reference$k__BackingField[$r2] := $r3;

return ;

}

 

procedure  Microsoft.CodeAnalysis.UnresolvedMetadataReference.get_Display(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.UnresolvedMetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
call $r0 := Microsoft.CodeAnalysis.CodeAnalysisResources.get_Unresolved();


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
assume {:nonnull} $r1 != null;
call $r2 := Microsoft.CodeAnalysis.UnresolvedMetadataReference.get_Reference($r1);


		if ($Exception != null)
		{
			return;
		}

call $r3 := System.String.Concat$System.String$System.String($r0,$r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.UnresolvedMetadataReference.get_IsUnresolved(this : Ref) returns ($result : bool)
{
	var $r0 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.UnresolvedMetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultBoolValue;
$r0 := true;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.UnresolvedMetadataReference.WithPropertiesImplReturningMetadataReference$Microsoft.CodeAnalysis.MetadataReferenceProperties(this : Ref,properties : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.UnresolvedMetadataReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.UnresolvedMetadataReference.get_Reference($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := properties;
call $r3 := Alloc();
assume $DynamicType($r3) == T$Microsoft.CodeAnalysis.UnresolvedMetadataReference();
assume $TypeConstructor($DynamicType($r3)) == T$Microsoft.CodeAnalysis.UnresolvedMetadataReference;
assume {:nonnull} $r3 != null;
call Microsoft.CodeAnalysis.UnresolvedMetadataReference.#ctor$System.String$Microsoft.CodeAnalysis.MetadataReferenceProperties($r3,$r1,$r2);


		if ($Exception != null)
		{
			return;
		}

$r4 := $r3;
$result := $r4;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.Decode$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$System.AttributeTargets$Microsoft.CodeAnalysis.CommonMessageProvider(arguments : Ref,target : Ref,messageProvider : Ref) returns (arguments$out : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var local_0 : Ref;
	var $r4 : Ref;
	var $r5 : int;
	var $r6 : Ref;
	var $r20 : Ref;
	var $r21 : int;
	var $r25 : Ref;
	var $r26 : int;
	var $r27 : Ref;
	var $r28 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : bool;
	var $r16 : Ref;
	var $r17 : int;
	var $r32 : Ref;
	var $r33 : Ref;
	var $r34 : Ref;
	var $r35 : Ref;
	var $r36 : Ref;
	var $r37 : Ref;
	var $r38 : int;
	var $r39 : Ref;
	var $r40 : Ref;
	var $r41 : Ref;
	var $r42 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : bool;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r7 : Ref;
	var $r8 : int;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : Ref;
	var $r48 : Ref;
	var $r49 : Ref;
	var $r50 : Ref;
	var $r51 : int;
	var $r52 : Ref;
	var $r53 : Ref;
	var $r54 : Ref;
	var $r55 : Ref;
	var $r43 : Ref;
	var $r44 : Ref;
	var $r18 : Ref;
	var $r19 : int;
	var $r61 : Ref;
	var $r62 : Ref;
	var $r63 : Ref;
	var $r64 : Ref;
	var $r65 : Ref;
	var $r66 : Ref;
	var $r67 : int;
	var $r68 : Ref;
	var $r69 : Ref;
	var $r70 : Ref;
	var $r71 : Ref;
	var $r56 : Ref;
	var $r57 : Ref;
	var $r58 : Ref;
	var $r59 : Ref;
	var $r60 : Ref;
	var $r9 : Ref;
	var $r10 : int;
	var $r82 : Ref;
	var $r83 : int;
	var $r72 : Ref;
	var $r73 : Ref;
	var $r74 : Ref;
	var $r75 : Ref;
	var $r76 : Ref;
	var $r77 : Ref;
	var $r78 : int;
	var $r79 : Ref;
	var $r80 : Ref;
	var $r81 : Ref;
	var $r84 : Ref;
	var $r85 : Ref;
	var $r86 : Ref;
	var $r87 : Ref;
	var $r88 : Ref;
	var $immutableArgument_arguments : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var DynamicDispatch_Type_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;

assume target == null || $Subtype($DynamicType(target), T$Microsoft.Cci.DummyTypeReference());
assume messageProvider == null || $Subtype($DynamicType(messageProvider), T$Microsoft.CodeAnalysis.CommonMessageProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
local_0 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultIntValue;
$r6 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultIntValue;
$r25 := $defaultRef;
$r26 := $defaultIntValue;
$r27 := $defaultRef;
$r28 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultBoolValue;
$r16 := $defaultRef;
$r17 := $defaultIntValue;
$r32 := $defaultRef;
$r33 := $defaultRef;
$r34 := $defaultRef;
$r35 := $defaultRef;
$r36 := $defaultRef;
$r37 := $defaultRef;
$r38 := $defaultIntValue;
$r39 := $defaultRef;
assume $DynamicType($r39) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r39))) == T$System.String;
$r40 := $defaultRef;
$r41 := $defaultRef;
$r42 := $defaultRef;
$r29 := $defaultRef;
$r30 := $defaultRef;
$r31 := $defaultBoolValue;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultIntValue;
$r45 := $defaultRef;
$r46 := $defaultRef;
$r47 := $defaultRef;
$r48 := $defaultRef;
$r49 := $defaultRef;
$r50 := $defaultRef;
$r51 := $defaultIntValue;
$r52 := $defaultRef;
assume $DynamicType($r52) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r52))) == T$System.String;
$r53 := $defaultRef;
$r54 := $defaultRef;
$r55 := $defaultRef;
$r43 := $defaultRef;
$r44 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultIntValue;
$r61 := $defaultRef;
$r62 := $defaultRef;
$r63 := $defaultRef;
$r64 := $defaultRef;
$r65 := $defaultRef;
$r66 := $defaultRef;
$r67 := $defaultIntValue;
$r68 := $defaultRef;
assume $DynamicType($r68) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r68))) == T$System.String;
$r69 := $defaultRef;
$r70 := $defaultRef;
$r71 := $defaultRef;
$r56 := $defaultRef;
$r57 := $defaultRef;
$r58 := $defaultRef;
$r59 := $defaultRef;
$r60 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultIntValue;
$r82 := $defaultRef;
$r83 := $defaultIntValue;
$r72 := $defaultRef;
$r73 := $defaultRef;
$r74 := $defaultRef;
$r75 := $defaultRef;
$r76 := $defaultRef;
$r77 := $defaultRef;
$r78 := $defaultIntValue;
$r79 := $defaultRef;
$r80 := $defaultRef;
$r81 := $defaultRef;
$r84 := $defaultRef;
$r85 := $defaultRef;
$r86 := $defaultRef;
$r87 := $defaultRef;
$r88 := $defaultRef;
$immutableArgument_arguments := $defaultRef;
$immutableArgument_arguments := arguments;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r1 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r2 := $BoxFromUnion($r1);
call $r3 := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsType$Microsoft.CodeAnalysis.AttributeData($r2);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r3;
$r4 := local_0;
$r5 := 23;
$r6 := $r4 - $r5;
if ($r6 < 12)
{
if ($r6 == 0)
{
		goto L_00B3;
}

if ($r6 == 1)
{
		goto L_0134;
}

if ($r6 == 2)
{
		goto L_005F;
}

if ($r6 == 3)
{
		goto L_005F;
}

if ($r6 == 4)
{
		goto L_0134;
}

if ($r6 == 5)
{
		goto L_005F;
}

if ($r6 == 6)
{
		goto L_00AB;
}

if ($r6 == 7)
{
		goto L_0071;
}

if ($r6 == 8)
{
		goto L_0134;
}

if ($r6 == 9)
{
		goto L_0134;
}

if ($r6 == 10)
{
		goto L_0134;
}

if ($r6 == 11)
{
		goto L_00EC;
}


}

$r20 := local_0;
$r21 := 42;
if ($r20 == $r21)
{
		goto L_0068;
}

$r25 := local_0;
$r26 := 44;
if ($r25 != $r26)
{
		goto L_0134;
}

$immutableArgument_arguments := $immutableArgument_arguments;
$r28 := messageProvider;
call $immutableArgument_arguments := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsCustom$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider($immutableArgument_arguments,$r28);


		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_005F:
$immutableArgument_arguments := $immutableArgument_arguments;
$r12 := local_0;
$r13 := messageProvider;
call $immutableArgument_arguments := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsComInterface$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$System.Runtime.InteropServices.UnmanagedType$Microsoft.CodeAnalysis.CommonMessageProvider($immutableArgument_arguments,$r12,$r13);


		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_0068:
$immutableArgument_arguments := $immutableArgument_arguments;
$r23 := messageProvider;
$r24 := false;
call $immutableArgument_arguments := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsArray$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider$System.Boolean($immutableArgument_arguments,$r23,$r24);


		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_0071:
$r16 := target;
$r17 := 256;
if ($r16 == $r17)
{
		goto L_00A2;
}

$r32 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r34 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r36 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r37 := $BoxFromUnion($r36);
$r38 := 0;
$r39 := $string_literal_ByValArray;
assume $DynamicType($r39) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r39))) == T$System.String;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r41 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r42 := $BoxFromUnion($r41);
assume {:nonnull} $r32 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r32);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportMarshalUnmanagedTypeOnlyValidForFields$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$System.String$Microsoft.CodeAnalysis.AttributeData($r32,$r34,$r37,$r38,$r39,$r42);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportMarshalUnmanagedTypeOnlyValidForFields$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$System.String$Microsoft.CodeAnalysis.AttributeData($r32,$r34,$r37,$r38,$r39,$r42);


}

else if ($r32 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_00A2:
$immutableArgument_arguments := $immutableArgument_arguments;
$r30 := messageProvider;
$r31 := true;
call $immutableArgument_arguments := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsArray$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider$System.Boolean($immutableArgument_arguments,$r30,$r31);


		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_00AB:
$immutableArgument_arguments := $immutableArgument_arguments;
$r15 := messageProvider;
call $immutableArgument_arguments := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsSafeArray$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider($immutableArgument_arguments,$r15);


		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_00B3:
$r7 := target;
$r8 := 256;
if ($r7 == $r8)
{
		goto L_00E4;
}

$r45 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r47 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r49 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r50 := $BoxFromUnion($r49);
$r51 := 0;
$r52 := $string_literal_ByValTStr;
assume $DynamicType($r52) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r52))) == T$System.String;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r54 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r55 := $BoxFromUnion($r54);
assume {:nonnull} $r45 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r45);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportMarshalUnmanagedTypeOnlyValidForFields$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$System.String$Microsoft.CodeAnalysis.AttributeData($r45,$r47,$r50,$r51,$r52,$r55);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportMarshalUnmanagedTypeOnlyValidForFields$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$System.String$Microsoft.CodeAnalysis.AttributeData($r45,$r47,$r50,$r51,$r52,$r55);


}

else if ($r45 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_00E4:
$immutableArgument_arguments := $immutableArgument_arguments;
$r44 := messageProvider;
call $immutableArgument_arguments := Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsFixedString$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider($immutableArgument_arguments,$r44);


		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_00EC:
$r18 := target;
$r19 := 256;
if ($r18 != $r19)
{
		goto L_011D;
}

$r61 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r63 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r65 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r66 := $BoxFromUnion($r65);
$r67 := 0;
$r68 := $string_literal_VBByRefStr;
assume $DynamicType($r68) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r68))) == T$System.String;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r70 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r71 := $BoxFromUnion($r70);
assume {:nonnull} $r61 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r61);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportMarshalUnmanagedTypeNotValidForFields$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$System.String$Microsoft.CodeAnalysis.AttributeData($r61,$r63,$r66,$r67,$r68,$r71);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportMarshalUnmanagedTypeNotValidForFields$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$System.String$Microsoft.CodeAnalysis.AttributeData($r61,$r63,$r66,$r67,$r68,$r71);


}

else if ($r61 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_011D:
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r57 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r58 := $BoxFromUnion($r57);
assume {:nonnull} $r58 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r58);
if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r59 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r58);
assume $Subtype($DynamicType($r59), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r58 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r60 := local_0;
assume {:nonnull} $r59 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r59);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsSimpleType$System.Runtime.InteropServices.UnmanagedType($r59,$r60);


}

else if ($r59 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_0134:
$r9 := local_0;
$r10 := 0;
if ($r9 < $r10)
{
		goto L_0140;
}

$r82 := local_0;
$r83 := 536870911;
if ($r82 <= $r83)
{
		goto L_0164;
}

	L_0140:
$r72 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r74 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r76 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r77 := $BoxFromUnion($r76);
$r78 := 0;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r80 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r81 := $BoxFromUnion($r80);
assume {:nonnull} $r72 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r72);
if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidAttributeArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.AttributeData($r72,$r74,$r77,$r78,$r81);


}

else if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidAttributeArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.AttributeData($r72,$r74,$r77,$r78,$r81);


}

else if ($r72 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_0164:
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r85 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r86 := $BoxFromUnion($r85);
assume {:nonnull} $r86 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r86);
if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r87 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r86);
assume $Subtype($DynamicType($r87), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r86 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r88 := local_0;
assume {:nonnull} $r87 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r87);
if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsSimpleType$System.Runtime.InteropServices.UnmanagedType($r87,$r88);


}

else if ($r87 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsType$Microsoft.CodeAnalysis.AttributeData(attribute : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var local_1 : Ref;
	var $r3 : Ref;
	var $r4 : int;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : int;
	var $r17 : Ref;
	var $r18 : Ref;
	var local_2 : Ref;
	var $r19 : Ref;
	var $r20 : int;
	var $r21 : Ref;
	var local_3 : Ref;
	var $r22 : Ref;
	var $r23 : int;
	var $r24 : int;
	var local_0 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : int;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : int;
	var $r16 : Ref;
	var $r25 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var $temp_var_5 : Ref;
	var $temp_var_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;
	var $temp_var_8 : Ref;

assume attribute == null || $Subtype($DynamicType(attribute), T$Microsoft.CodeAnalysis.AttributeData());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
local_1 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultIntValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultIntValue;
$r17 := $defaultRef;
$r18 := $defaultRef;
local_2 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultIntValue;
$r21 := $defaultRef;
local_3 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultIntValue;
$r24 := $defaultIntValue;
local_0 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultIntValue;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultIntValue;
$r16 := $defaultRef;
$r25 := $defaultRef;
$r0 := attribute;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.AttributeData()))
{
call $r1 := Microsoft.CodeAnalysis.AttributeData.get_AttributeConstructor($r0);


}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.IMethodSymbol()))
{
call $r2 := Microsoft.CodeAnalysis.IMethodSymbol.get_Parameters($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.IParameterSymbol()));

}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.IMethodSymbol()))
{
call $r2 := Microsoft.CodeAnalysis.IMethodSymbol.get_Parameters($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.IParameterSymbol()));

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_1 := $r2;
$r3 := local_1;
$r4 := 0;
assume {:nonnull} $r3 != null;
call $r5 := System.Collections.Immutable.ImmutableArray`1.get_Item$System.Int32($r3,$r4);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r5 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r5);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.IParameterSymbol()))
{
call $r6 := Microsoft.CodeAnalysis.IParameterSymbol.get_Type($r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.ITypeSymbol());

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.IParameterSymbol()))
{
call $r6 := Microsoft.CodeAnalysis.IParameterSymbol.get_Type($r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.ITypeSymbol());

}

else if ($r5 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r6);
if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.ITypeSymbol()))
{
call $r7 := Microsoft.CodeAnalysis.ITypeSymbol.get_SpecialType($r6);
assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.SpecialType());

}

else if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.ITypeSymbol()))
{
call $r7 := Microsoft.CodeAnalysis.ITypeSymbol.get_SpecialType($r6);
assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.SpecialType());

}

else if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r8 := 11;
if ($r7 != $r8)
{
		goto L_003E;
}

$r17 := attribute;
assume {:nonnull} $r17 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r17);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.AttributeData()))
{
call $r18 := Microsoft.CodeAnalysis.AttributeData.get_CommonConstructorArguments($r17);
assume $Subtype($DynamicType($r18), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.TypedConstant()));

}

else if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.AttributeData()))
{
call $r18 := Microsoft.CodeAnalysis.AttributeData.get_CommonConstructorArguments($r17);
assume $Subtype($DynamicType($r18), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.TypedConstant()));

}

else if ($r17 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_2 := $r18;
$r19 := local_2;
$r20 := 0;
assume {:nonnull} $r19 != null;
call $r21 := System.Collections.Immutable.ImmutableArray`1.get_Item$System.Int32($r19,$r20);


		if ($Exception != null)
		{
			return;
		}

local_3 := $r21;
$r22 := local_3;
$r23 := 11;
assume {:nonnull} $r22 != null;
$temp_var_5 := Int2Union($r23);
call $temp_var_6 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r22,$temp_var_5);
$r24 := Union2Int($temp_var_6);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r24;
		goto L_0057;
	L_003E:
$r9 := attribute;
assume {:nonnull} $r9 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r9);
if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.AttributeData()))
{
call $r10 := Microsoft.CodeAnalysis.AttributeData.get_CommonConstructorArguments($r9);
assume $Subtype($DynamicType($r10), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.TypedConstant()));

}

else if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.AttributeData()))
{
call $r10 := Microsoft.CodeAnalysis.AttributeData.get_CommonConstructorArguments($r9);
assume $Subtype($DynamicType($r10), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.TypedConstant()));

}

else if ($r9 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_2 := $r10;
$r11 := local_2;
$r12 := 0;
assume {:nonnull} $r11 != null;
call $r13 := System.Collections.Immutable.ImmutableArray`1.get_Item$System.Int32($r11,$r12);


		if ($Exception != null)
		{
			return;
		}

local_3 := $r13;
$r14 := local_3;
$r15 := 2;
assume {:nonnull} $r14 != null;
$temp_var_8 := Int2Union($r15);
call $r16 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r14,$temp_var_8);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r16;
	L_0057:
$r25 := local_0;
$result := $r25;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsCustom$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider(arguments : Ref,messageProvider : Ref) returns (arguments$out : Ref)
{
	var $r0 : Ref;
	var local_0 : Ref;
	var $r1 : Ref;
	var local_1 : Ref;
	var $r2 : Ref;
	var local_2 : Ref;
	var $r3 : bool;
	var local_3 : bool;
	var $r4 : bool;
	var local_4 : bool;
	var $r5 : bool;
	var local_5 : bool;
	var $r6 : int;
	var local_6 : int;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var local_8 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var local_7 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var local_9 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var local_10 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : bool;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : bool;
	var $r38 : Ref;
	var $r39 : Ref;
	var $r40 : bool;
	var $r22 : Ref;
	var $r23 : Ref;
	var local_11 : Ref;
	var $r24 : Ref;
	var $r25 : int;
	var $r26 : Ref;
	var $r27 : Ref;
	var $r28 : bool;
	var $r52 : Ref;
	var $r53 : Ref;
	var $r54 : Ref;
	var $r55 : Ref;
	var $r56 : Ref;
	var $r57 : Ref;
	var $r58 : int;
	var $r59 : Ref;
	var $r60 : Ref;
	var $r61 : Ref;
	var $r62 : Ref;
	var $r63 : Ref;
	var $r64 : Ref;
	var $r65 : bool;
	var $r51 : bool;
	var $r32 : Ref;
	var $r33 : Ref;
	var $r34 : Ref;
	var $r35 : int;
	var $r36 : Ref;
	var $r37 : bool;
	var $r41 : Ref;
	var $r42 : Ref;
	var $r43 : Ref;
	var $r44 : int;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : bool;
	var $r66 : Ref;
	var $r67 : Ref;
	var $r68 : Ref;
	var $r69 : Ref;
	var $r70 : Ref;
	var $r71 : Ref;
	var $r72 : int;
	var $r73 : Ref;
	var $r74 : Ref;
	var $r75 : Ref;
	var $r76 : Ref;
	var $r77 : Ref;
	var $r78 : Ref;
	var $r79 : bool;
	var $r48 : int;
	var $r49 : int;
	var $r50 : int;
	var $r13 : Ref;
	var $r14 : bool;
	var $r80 : bool;
	var $r82 : bool;
	var $r83 : Ref;
	var $r84 : Ref;
	var $r85 : Ref;
	var $r86 : Ref;
	var $r87 : Ref;
	var $r88 : Ref;
	var $r89 : Ref;
	var $r90 : Ref;
	var $r91 : bool;
	var $r81 : bool;
	var $r92 : Ref;
	var $r93 : Ref;
	var $r94 : Ref;
	var $r95 : Ref;
	var $r96 : bool;
	var $r97 : Ref;
	var $r98 : Ref;
	var $immutableArgument_arguments : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $temp_var_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var $temp_var_4 : Ref;
	var $temp_var_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;
	var DynamicDispatch_Type_8 : Ref;
	var DynamicDispatch_Type_9 : Ref;
	var DynamicDispatch_Type_10 : Ref;

assume messageProvider == null || $Subtype($DynamicType(messageProvider), T$Microsoft.CodeAnalysis.CommonMessageProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
local_0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
local_1 := $defaultRef;
assume $DynamicType(local_1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_1))) == T$System.String;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
local_2 := $defaultRef;
assume $DynamicType(local_2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_2))) == T$System.String;
$r3 := $defaultBoolValue;
local_3 := $defaultBoolValue;
$r4 := $defaultBoolValue;
local_4 := $defaultBoolValue;
$r5 := $defaultBoolValue;
local_5 := $defaultBoolValue;
$r6 := $defaultIntValue;
local_6 := $defaultIntValue;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
local_8 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
local_7 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
local_9 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
local_10 := $defaultRef;
assume $DynamicType(local_10) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_10))) == T$System.String;
$r19 := $defaultRef;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $defaultRef;
assume $DynamicType($r20) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r20))) == T$System.String;
$r21 := $defaultBoolValue;
$r29 := $defaultRef;
assume $DynamicType($r29) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r29))) == T$System.String;
$r30 := $defaultRef;
assume $DynamicType($r30) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r30))) == T$System.String;
$r31 := $defaultBoolValue;
$r38 := $defaultRef;
assume $DynamicType($r38) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r38))) == T$System.String;
$r39 := $defaultRef;
assume $DynamicType($r39) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r39))) == T$System.String;
$r40 := $defaultBoolValue;
$r22 := $defaultRef;
$r23 := $defaultRef;
local_11 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultIntValue;
$r26 := $defaultRef;
assume $DynamicType($r26) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r26))) == T$System.String;
$r27 := $defaultRef;
assume $DynamicType($r27) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r27))) == T$System.String;
$r28 := $defaultBoolValue;
$r52 := $defaultRef;
$r53 := $defaultRef;
$r54 := $defaultRef;
$r55 := $defaultRef;
$r56 := $defaultRef;
$r57 := $defaultRef;
$r58 := $defaultIntValue;
$r59 := $defaultRef;
$r60 := $defaultRef;
$r61 := $defaultRef;
$r62 := $defaultRef;
$r63 := $defaultRef;
$r64 := $defaultRef;
assume $DynamicType($r64) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r64))) == T$System.String;
$r65 := $defaultBoolValue;
$r51 := $defaultBoolValue;
$r32 := $defaultRef;
$r33 := $defaultRef;
$r34 := $defaultRef;
$r35 := $defaultIntValue;
$r36 := $defaultRef;
$r37 := $defaultBoolValue;
$r41 := $defaultRef;
$r42 := $defaultRef;
$r43 := $defaultRef;
$r44 := $defaultIntValue;
$r45 := $defaultRef;
assume $DynamicType($r45) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r45))) == T$System.String;
$r46 := $defaultRef;
assume $DynamicType($r46) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r46))) == T$System.String;
$r47 := $defaultBoolValue;
$r66 := $defaultRef;
$r67 := $defaultRef;
$r68 := $defaultRef;
$r69 := $defaultRef;
$r70 := $defaultRef;
$r71 := $defaultRef;
$r72 := $defaultIntValue;
$r73 := $defaultRef;
$r74 := $defaultRef;
$r75 := $defaultRef;
$r76 := $defaultRef;
$r77 := $defaultRef;
$r78 := $defaultRef;
assume $DynamicType($r78) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r78))) == T$System.String;
$r79 := $defaultBoolValue;
$r48 := $defaultIntValue;
$r49 := $defaultIntValue;
$r50 := $defaultIntValue;
$r13 := $defaultRef;
$r14 := $defaultBoolValue;
$r80 := $defaultBoolValue;
$r82 := $defaultBoolValue;
$r83 := $defaultRef;
$r84 := $defaultRef;
$r85 := $defaultRef;
$r86 := $defaultRef;
$r87 := $defaultRef;
$r88 := $defaultRef;
$r89 := $defaultRef;
assume $DynamicType($r89) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r89))) == T$System.String;
$r90 := $defaultRef;
assume $DynamicType($r90) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r90))) == T$System.String;
$r91 := $defaultBoolValue;
$r81 := $defaultBoolValue;
$r92 := $defaultRef;
$r93 := $defaultRef;
$r94 := $defaultRef;
$r95 := $defaultRef;
$r96 := $defaultBoolValue;
$r97 := $defaultRef;
$r98 := $defaultRef;
assume $DynamicType($r98) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r98))) == T$System.String;
$immutableArgument_arguments := $defaultRef;
$immutableArgument_arguments := arguments;
$r0 := null;
local_0 := $r0;
$r1 := null;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
local_1 := $r1;
assume $DynamicType(local_1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_1))) == T$System.String;
$r2 := null;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
local_2 := $r2;
assume $DynamicType(local_2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_2))) == T$System.String;
$r3 := false;
local_3 := $r3;
$r4 := false;
local_4 := $r4;
$r5 := false;
local_5 := $r5;
$r6 := 1;
local_6 := $r6;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r8 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r9 := $BoxFromUnion($r8);
assume {:nonnull} $r9 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r9);
if ($r9 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_8 := $r10;
$r11 := local_8;
assume {:nonnull} $r11 != null;
call $r12 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r11);


		if ($Exception != null)
		{
			return;
		}

local_7 := $r12;
		goto L_012F;
	L_0031:
$r15 := local_7;
assume {:nonnull} $r15 != null;
call $r16 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r15);


		if ($Exception != null)
		{
			return;
		}

local_9 := $r16;
$r17 := local_9;
assume {:nonnull} $r17 != null;
call $r18 := System.Collections.Generic.KeyValuePair`2.get_Key($r17);


		if ($Exception != null)
		{
			return;
		}

local_10 := $r18;
assume $DynamicType(local_10) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_10))) == T$System.String;
$r19 := local_10;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $string_literal_MarshalType;
assume $DynamicType($r20) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r20))) == T$System.String;
call $r21 := System.String.op_Equality$System.String$System.String($r19,$r20);


		if ($Exception != null)
		{
			return;
		}

if ($r21 == true)
{
		goto L_0072;
}

$r29 := local_10;
assume $DynamicType($r29) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r29))) == T$System.String;
$r30 := $string_literal_MarshalTypeRef;
assume $DynamicType($r30) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r30))) == T$System.String;
call $r31 := System.String.op_Equality$System.String$System.String($r29,$r30);


		if ($Exception != null)
		{
			return;
		}

if ($r31 == true)
{
		goto L_00C4;
}

$r38 := local_10;
assume $DynamicType($r38) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r38))) == T$System.String;
$r39 := $string_literal_MarshalCookie;
assume $DynamicType($r39) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r39))) == T$System.String;
call $r40 := System.String.op_Equality$System.String$System.String($r38,$r39);


		if ($Exception != null)
		{
			return;
		}

if ($r40 == true)
{
		goto L_00DB;
}

		goto L_0129;
	L_0072:
$r22 := local_9;
assume {:nonnull} $r22 != null;
call $r23 := System.Collections.Generic.KeyValuePair`2.get_Value($r22);


		if ($Exception != null)
		{
			return;
		}

local_11 := $r23;
$r24 := local_11;
$r25 := 20;
assume {:nonnull} $r24 != null;
$temp_var_1 := Int2Union($r25);
call $r26 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r24,$temp_var_1);


		if ($Exception != null)
		{
			return;
		}

local_1 := $r26;
assume $DynamicType(local_1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_1))) == T$System.String;
$r27 := local_1;
assume $DynamicType($r27) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r27))) == T$System.String;
call $r28 := Microsoft.CodeAnalysis.MetadataHelpers.IsValidUnicodeString$System.String($r27);


		if ($Exception != null)
		{
			return;
		}

if ($r28 == true)
{
		goto L_00C0;
}

$r52 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r54 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r56 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r57 := $BoxFromUnion($r56);
$r58 := local_6;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r60 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r61 := $BoxFromUnion($r60);
assume {:nonnull} $r61 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r61);
if ($r61 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r63 := local_9;
assume {:nonnull} $r63 != null;
call $r64 := System.Collections.Generic.KeyValuePair`2.get_Key($r63);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r52 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r52);
if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r52,$r54,$r57,$r58,$r62,$r64);


}

else if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r52,$r54,$r57,$r58,$r62,$r64);


}

else if ($r52 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r65 := true;
local_5 := $r65;
	L_00C0:
$r51 := true;
local_3 := $r51;
		goto L_0129;
	L_00C4:
$r32 := local_9;
assume {:nonnull} $r32 != null;
call $r33 := System.Collections.Generic.KeyValuePair`2.get_Value($r32);


		if ($Exception != null)
		{
			return;
		}

local_11 := $r33;
$r34 := local_11;
$r35 := 0;
assume {:nonnull} $r34 != null;
$temp_var_4 := Int2Union($r35);
call $r36 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r34,$temp_var_4);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r36;
$r37 := true;
local_4 := $r37;
		goto L_0129;
	L_00DB:
$r41 := local_9;
assume {:nonnull} $r41 != null;
call $r42 := System.Collections.Generic.KeyValuePair`2.get_Value($r41);


		if ($Exception != null)
		{
			return;
		}

local_11 := $r42;
$r43 := local_11;
$r44 := 20;
assume {:nonnull} $r43 != null;
$temp_var_5 := Int2Union($r44);
call $r45 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r43,$temp_var_5);


		if ($Exception != null)
		{
			return;
		}

local_2 := $r45;
assume $DynamicType(local_2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_2))) == T$System.String;
$r46 := local_2;
assume $DynamicType($r46) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r46))) == T$System.String;
call $r47 := Microsoft.CodeAnalysis.MetadataHelpers.IsValidUnicodeString$System.String($r46);


		if ($Exception != null)
		{
			return;
		}

if ($r47 == true)
{
		goto L_0129;
}

$r66 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r68 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r70 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r71 := $BoxFromUnion($r70);
$r72 := local_6;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r74 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r75 := $BoxFromUnion($r74);
assume {:nonnull} $r75 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r75);
if ($r75 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r77 := local_9;
assume {:nonnull} $r77 != null;
call $r78 := System.Collections.Generic.KeyValuePair`2.get_Key($r77);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r66 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r66);
if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r66,$r68,$r71,$r72,$r76,$r78);


}

else if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r66,$r68,$r71,$r72,$r76,$r78);


}

else if ($r66 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r79 := true;
local_5 := $r79;
	L_0129:
$r48 := local_6;
$r49 := 1;
$r50 := $r48 + $r49;
local_6 := $r50;
	L_012F:
$r13 := local_7;
assume {:nonnull} $r13 != null;
call $r14 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r13);


		if ($Exception != null)
		{
			return;
		}

if ($r14 == true)
{
		goto L_0031;
}

$r80 := local_3;
if ($r80 == true)
{
		goto L_0166;
}

$r82 := local_4;
if ($r82 == true)
{
		goto L_0166;
}

$r83 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r85 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r87 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r88 := $BoxFromUnion($r87);
$r89 := $string_literal_MarshalType;
assume $DynamicType($r89) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r89))) == T$System.String;
$r90 := $string_literal_MarshalTypeRef;
assume $DynamicType($r90) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r90))) == T$System.String;
assume {:nonnull} $r83 != null;
call DynamicDispatch_Type_8 := System.Object.GetType($r83);
if ($Subtype(DynamicDispatch_Type_8, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportAttributeParameterRequired$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.String$System.String($r83,$r85,$r88,$r89,$r90);


}

else if ($Subtype(DynamicDispatch_Type_8, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportAttributeParameterRequired$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.String$System.String($r83,$r85,$r88,$r89,$r90);


}

else if ($r83 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r91 := true;
local_5 := $r91;
	L_0166:
$r81 := local_5;
if ($r81 == true)
{
		goto L_0187;
}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r93 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r94 := $BoxFromUnion($r93);
assume {:nonnull} $r94 != null;
call DynamicDispatch_Type_9 := System.Object.GetType($r94);
if ($Subtype(DynamicDispatch_Type_9, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r95 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r94);
assume $Subtype($DynamicType($r95), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r94 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r96 := local_3;
if ($r96 == true)
{
		goto L_0180;
}

$r97 := local_0;
		goto L_0181;
	L_0180:
$r97 := local_1;
	L_0181:
$r98 := local_2;
assume $DynamicType($r98) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r98))) == T$System.String;
assume {:nonnull} $r95 != null;
call DynamicDispatch_Type_10 := System.Object.GetType($r95);
if ($Subtype(DynamicDispatch_Type_10, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsCustom$System.Object$System.String($r95,$r97,$r98);


}

else if ($r95 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_0187:
arguments$out := $immutableArgument_arguments;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsComInterface$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$System.Runtime.InteropServices.UnmanagedType$Microsoft.CodeAnalysis.CommonMessageProvider(arguments : Ref,unmanagedType : Ref,messageProvider : Ref) returns (arguments$out : Ref)
{
	var $r0 : Ref;
	var local_0 : Ref;
	var $r1 : int;
	var local_1 : int;
	var $r2 : bool;
	var local_2 : bool;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var local_4 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var local_3 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var local_5 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var local_6 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : bool;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var local_7 : Ref;
	var $r24 : Ref;
	var $r25 : int;
	var $r26 : int;
	var $r27 : Ref;
	var local_8 : Ref;
	var $r28 : int;
	var local_9 : int;
	var $r29 : Ref;
	var $r30 : int;
	var $r31 : int;
	var $r33 : bool;
	var $r32 : Ref;
	var $r48 : Ref;
	var $r49 : int;
	var $r50 : Ref;
	var $r51 : int;
	var $r52 : int;
	var $r54 : bool;
	var $r53 : Ref;
	var $r34 : Ref;
	var $r35 : Ref;
	var $r36 : Ref;
	var $r37 : Ref;
	var $r38 : Ref;
	var $r39 : Ref;
	var $r40 : int;
	var $r41 : Ref;
	var $r42 : Ref;
	var $r43 : Ref;
	var $r44 : Ref;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : bool;
	var $r18 : int;
	var $r19 : int;
	var $r20 : int;
	var $r9 : Ref;
	var $r10 : bool;
	var $r55 : bool;
	var $r56 : Ref;
	var $r57 : Ref;
	var $r58 : Ref;
	var $r59 : Ref;
	var $r60 : Ref;
	var $r61 : Ref;
	var $immutableArgument_arguments : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize0 : int;
	var DynamicDispatch_Type_1 : Ref;
	var $temp_var_2 : Ref;
	var $temp_var_3 : Ref;
	var $temp_var_4 : Ref;
	var $temp_var_5 : Ref;
	var $temp_var_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;
	var DynamicDispatch_Type_8 : Ref;
	var DynamicDispatch_Type_9 : Ref;
	var DynamicDispatch_Type_10 : Ref;

assume unmanagedType == null || $Subtype($DynamicType(unmanagedType), T$Microsoft.Cci.DummyTypeReference());
assume messageProvider == null || $Subtype($DynamicType(messageProvider), T$Microsoft.CodeAnalysis.CommonMessageProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
local_0 := $defaultRef;
$r1 := $defaultIntValue;
local_1 := $defaultIntValue;
$r2 := $defaultBoolValue;
local_2 := $defaultBoolValue;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
local_4 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
local_3 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
local_5 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
assume $DynamicType($r14) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r14))) == T$System.String;
local_6 := $defaultRef;
assume $DynamicType(local_6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_6))) == T$System.String;
$r15 := $defaultRef;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $defaultRef;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
$r17 := $defaultBoolValue;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
local_7 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultIntValue;
$r26 := $defaultIntValue;
$r27 := $defaultRef;
local_8 := $defaultRef;
$r28 := $defaultIntValue;
local_9 := $defaultIntValue;
$r29 := $defaultRef;
$r30 := $defaultIntValue;
$r31 := $defaultIntValue;
$r33 := $defaultBoolValue;
$r32 := $defaultRef;
$r48 := $defaultRef;
$r49 := $defaultIntValue;
$r50 := $defaultRef;
$r51 := $defaultIntValue;
$r52 := $defaultIntValue;
$r54 := $defaultBoolValue;
$r53 := $defaultRef;
$r34 := $defaultRef;
$r35 := $defaultRef;
$r36 := $defaultRef;
$r37 := $defaultRef;
$r38 := $defaultRef;
$r39 := $defaultRef;
$r40 := $defaultIntValue;
$r41 := $defaultRef;
$r42 := $defaultRef;
$r43 := $defaultRef;
$r44 := $defaultRef;
$r45 := $defaultRef;
$r46 := $defaultRef;
assume $DynamicType($r46) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r46))) == T$System.String;
$r47 := $defaultBoolValue;
$r18 := $defaultIntValue;
$r19 := $defaultIntValue;
$r20 := $defaultIntValue;
$r9 := $defaultRef;
$r10 := $defaultBoolValue;
$r55 := $defaultBoolValue;
$r56 := $defaultRef;
$r57 := $defaultRef;
$r58 := $defaultRef;
$r59 := $defaultRef;
$r60 := $defaultRef;
$r61 := $defaultRef;
$immutableArgument_arguments := $defaultRef;
$immutableArgument_arguments := arguments;
$r0 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r1 := 1;
local_1 := $r1;
$r2 := false;
local_2 := $r2;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r4 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r5 := $BoxFromUnion($r4);
assume {:nonnull} $r5 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r5);
if ($r5 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_4 := $r6;
$r7 := local_4;
assume {:nonnull} $r7 != null;
call $r8 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r7);


		if ($Exception != null)
		{
			return;
		}

local_3 := $r8;
		goto L_00DA;
	L_002B:
$r11 := local_3;
assume {:nonnull} $r11 != null;
call $r12 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r11);


		if ($Exception != null)
		{
			return;
		}

local_5 := $r12;
$r13 := local_5;
assume {:nonnull} $r13 != null;
call $r14 := System.Collections.Generic.KeyValuePair`2.get_Key($r13);


		if ($Exception != null)
		{
			return;
		}

local_6 := $r14;
assume $DynamicType(local_6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_6))) == T$System.String;
$r15 := local_6;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $string_literal_IidParameterIndex;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
call $r17 := System.String.op_Equality$System.String$System.String($r15,$r16);


		if ($Exception != null)
		{
			return;
		}

if ($r17 == false)
{
		goto L_00D6;
}

$r21 := local_0;
$r22 := local_5;
assume {:nonnull} $r22 != null;
call $r23 := System.Collections.Generic.KeyValuePair`2.get_Value($r22);


		if ($Exception != null)
		{
			return;
		}

local_7 := $r23;
$r24 := local_7;
$r25 := 13;
assume {:nonnull} $r24 != null;
$temp_var_2 := Int2Union($r25);
call $temp_var_3 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r24,$temp_var_2);
$r26 := Union2Int($temp_var_3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r21 != null;
$temp_var_4 := Int2Union($r26);
call System.Nullable`1.#ctor$`0($r21,$temp_var_4);


		if ($Exception != null)
		{
			return;
		}

$r27 := local_0;
local_8 := $r27;
$r28 := 0;
local_9 := $r28;
$r29 := local_8;
assume {:nonnull} $r29 != null;
call $temp_var_5 := System.Nullable`1.GetValueOrDefault($r29);
$r30 := Union2Int($temp_var_5);


		if ($Exception != null)
		{
			return;
		}

$r31 := local_9;
if ($r30 < $r31)
{
		goto L_007B;
}

$r33 := false;
		goto L_0082;
	L_007B:
$r32 := local_8;
assume {:nonnull} $r32 != null;
call $r33 := System.Nullable`1.get_HasValue($r32);


		if ($Exception != null)
		{
			return;
		}

	L_0082:
if ($r33 == true)
{
		goto L_00A5;
}

$r48 := local_0;
local_8 := $r48;
$r49 := 536870911;
local_9 := $r49;
$r50 := local_8;
assume {:nonnull} $r50 != null;
call $temp_var_6 := System.Nullable`1.GetValueOrDefault($r50);
$r51 := Union2Int($temp_var_6);


		if ($Exception != null)
		{
			return;
		}

$r52 := local_9;
if ($r51 > $r52)
{
		goto L_009C;
}

$r54 := false;
		goto L_00A3;
	L_009C:
$r53 := local_8;
assume {:nonnull} $r53 != null;
call $r54 := System.Nullable`1.get_HasValue($r53);


		if ($Exception != null)
		{
			return;
		}

	L_00A3:
if ($r54 == false)
{
		goto L_00D6;
}

	L_00A5:
$r34 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r36 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r38 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r39 := $BoxFromUnion($r38);
$r40 := local_1;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r42 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r43 := $BoxFromUnion($r42);
assume {:nonnull} $r43 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r43);
if ($r43 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r45 := local_5;
assume {:nonnull} $r45 != null;
call $r46 := System.Collections.Generic.KeyValuePair`2.get_Key($r45);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r34 != null;
call DynamicDispatch_Type_8 := System.Object.GetType($r34);
if ($Subtype(DynamicDispatch_Type_8, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r34,$r36,$r39,$r40,$r44,$r46);


}

else if ($Subtype(DynamicDispatch_Type_8, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r34,$r36,$r39,$r40,$r44,$r46);


}

else if ($r34 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r47 := true;
local_2 := $r47;
	L_00D6:
$r18 := local_1;
$r19 := 1;
$r20 := $r18 + $r19;
local_1 := $r20;
	L_00DA:
$r9 := local_3;
assume {:nonnull} $r9 != null;
call $r10 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r9);


		if ($Exception != null)
		{
			return;
		}

if ($r10 == true)
{
		goto L_002B;
}

$r55 := local_2;
if ($r55 == true)
{
		goto L_0100;
}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r57 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r58 := $BoxFromUnion($r57);
assume {:nonnull} $r58 != null;
call DynamicDispatch_Type_9 := System.Object.GetType($r58);
if ($Subtype(DynamicDispatch_Type_9, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r59 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r58);
assume $Subtype($DynamicType($r59), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r58 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r60 := unmanagedType;
$r61 := local_0;
assume {:nonnull} $r59 != null;
call DynamicDispatch_Type_10 := System.Object.GetType($r59);
if ($Subtype(DynamicDispatch_Type_10, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsComInterface$System.Runtime.InteropServices.UnmanagedType$System.Nullable$System.Int32$($r59,$r60,$r61);


}

else if ($r59 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_0100:
arguments$out := $immutableArgument_arguments;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsArray$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider$System.Boolean(arguments : Ref,messageProvider : Ref,isFixed : bool) returns (arguments$out : Ref)
{
	var $r0 : Ref;
	var local_0 : Ref;
	var $r1 : bool;
	var $r5 : Ref;
	var local_5 : Ref;
	var $r4 : Ref;
	var $r2 : int;
	var $r3 : Ref;
	var local_1 : Ref;
	var $r6 : Ref;
	var local_2 : Ref;
	var $r7 : bool;
	var local_3 : bool;
	var $r8 : int;
	var local_4 : int;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var local_7 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var local_6 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var local_8 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var local_9 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : bool;
	var $r31 : Ref;
	var $r32 : Ref;
	var $r33 : bool;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : bool;
	var $r49 : Ref;
	var $r50 : Ref;
	var $r51 : bool;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r26 : Ref;
	var local_10 : Ref;
	var $r27 : Ref;
	var $r28 : int;
	var $r29 : Ref;
	var $r30 : bool;
	var $r66 : Ref;
	var local_11 : Ref;
	var $r67 : int;
	var local_12 : Ref;
	var $r68 : Ref;
	var $r69 : Ref;
	var $r70 : Ref;
	var $r72 : bool;
	var $r71 : Ref;
	var $r63 : Ref;
	var $r64 : Ref;
	var $r65 : int;
	var $r87 : Ref;
	var $r88 : Ref;
	var $r89 : int;
	var $r73 : Ref;
	var $r74 : Ref;
	var $r75 : Ref;
	var $r76 : Ref;
	var $r77 : Ref;
	var $r78 : Ref;
	var $r79 : int;
	var $r80 : Ref;
	var $r81 : Ref;
	var $r82 : Ref;
	var $r83 : Ref;
	var $r84 : Ref;
	var $r85 : Ref;
	var $r86 : bool;
	var $r34 : Ref;
	var $r35 : Ref;
	var $r36 : Ref;
	var $r37 : Ref;
	var $r38 : int;
	var $r39 : int;
	var $r40 : Ref;
	var $r41 : int;
	var local_13 : int;
	var $r42 : Ref;
	var $r43 : int;
	var $r44 : int;
	var $r91 : bool;
	var $r90 : Ref;
	var $r106 : Ref;
	var $r107 : int;
	var $r108 : Ref;
	var $r109 : int;
	var $r110 : int;
	var $r112 : bool;
	var $r111 : Ref;
	var $r92 : Ref;
	var $r93 : Ref;
	var $r94 : Ref;
	var $r95 : Ref;
	var $r96 : Ref;
	var $r97 : Ref;
	var $r98 : int;
	var $r99 : Ref;
	var $r100 : Ref;
	var $r101 : Ref;
	var $r102 : Ref;
	var $r103 : Ref;
	var $r104 : Ref;
	var $r105 : bool;
	var $r48 : bool;
	var $r113 : Ref;
	var $r114 : Ref;
	var $r115 : Ref;
	var $r116 : Ref;
	var $r117 : int;
	var $r118 : int;
	var $r119 : Ref;
	var local_14 : Ref;
	var $r120 : Ref;
	var $r121 : bool;
	var $r126 : Ref;
	var local_15 : Ref;
	var $r125 : Ref;
	var $r122 : Ref;
	var $r123 : int;
	var $r124 : Ref;
	var $r127 : int;
	var $r128 : Ref;
	var $r129 : int;
	var $r130 : int;
	var $r132 : bool;
	var $r131 : Ref;
	var $r133 : Ref;
	var $r134 : Ref;
	var $r135 : Ref;
	var $r136 : Ref;
	var $r137 : Ref;
	var $r138 : Ref;
	var $r139 : int;
	var $r140 : Ref;
	var $r141 : Ref;
	var $r142 : Ref;
	var $r143 : Ref;
	var $r144 : Ref;
	var $r145 : Ref;
	var $r146 : bool;
	var $r52 : Ref;
	var $r53 : Ref;
	var $r54 : Ref;
	var $r55 : Ref;
	var $r56 : Ref;
	var $r57 : Ref;
	var $r58 : int;
	var $r59 : bool;
	var $r60 : int;
	var $r61 : int;
	var $r62 : int;
	var $r15 : Ref;
	var $r16 : bool;
	var $r147 : bool;
	var $r148 : Ref;
	var $r149 : Ref;
	var $r150 : Ref;
	var $r151 : Ref;
	var local_16 : Ref;
	var $r152 : bool;
	var $r157 : Ref;
	var $r158 : Ref;
	var $r159 : Ref;
	var $r153 : Ref;
	var $r154 : Ref;
	var $r155 : Ref;
	var $r156 : Ref;
	var $immutableArgument_arguments : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize0 : int;
	var $initialize1 : int;
	var $temp_var_2 : Ref;
	var $initialize3 : int;
	var DynamicDispatch_Type_4 : Ref;
	var $temp_var_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;
	var $temp_var_8 : Ref;
	var $temp_var_9 : Ref;
	var $temp_var_10 : Ref;
	var $temp_var_11 : Ref;
	var $temp_var_12 : Ref;
	var DynamicDispatch_Type_13 : Ref;
	var DynamicDispatch_Type_14 : Ref;
	var $temp_var_15 : Ref;
	var $temp_var_16 : Ref;
	var $temp_var_17 : Ref;
	var $initialize18 : int;
	var $temp_var_19 : Ref;
	var $temp_var_20 : Ref;
	var $temp_var_21 : Ref;
	var DynamicDispatch_Type_22 : Ref;
	var DynamicDispatch_Type_23 : Ref;
	var DynamicDispatch_Type_24 : Ref;
	var DynamicDispatch_Type_25 : Ref;
	var DynamicDispatch_Type_26 : Ref;
	var DynamicDispatch_Type_27 : Ref;

assume messageProvider == null || $Subtype($DynamicType(messageProvider), T$Microsoft.CodeAnalysis.CommonMessageProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
local_0 := $defaultRef;
$r1 := $defaultBoolValue;
$r5 := $defaultRef;
local_5 := $defaultRef;
$r4 := $defaultRef;
$r2 := $defaultIntValue;
$r3 := $defaultRef;
local_1 := $defaultRef;
$r6 := $defaultRef;
local_2 := $defaultRef;
$r7 := $defaultBoolValue;
local_3 := $defaultBoolValue;
$r8 := $defaultIntValue;
local_4 := $defaultIntValue;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
local_7 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
local_6 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
local_8 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
assume $DynamicType($r20) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r20))) == T$System.String;
local_9 := $defaultRef;
assume $DynamicType(local_9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_9))) == T$System.String;
$r21 := $defaultRef;
assume $DynamicType($r21) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r21))) == T$System.String;
$r22 := $defaultRef;
assume $DynamicType($r22) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r22))) == T$System.String;
$r23 := $defaultBoolValue;
$r31 := $defaultRef;
assume $DynamicType($r31) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r31))) == T$System.String;
$r32 := $defaultRef;
assume $DynamicType($r32) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r32))) == T$System.String;
$r33 := $defaultBoolValue;
$r45 := $defaultRef;
assume $DynamicType($r45) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r45))) == T$System.String;
$r46 := $defaultRef;
assume $DynamicType($r46) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r46))) == T$System.String;
$r47 := $defaultBoolValue;
$r49 := $defaultRef;
assume $DynamicType($r49) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r49))) == T$System.String;
$r50 := $defaultRef;
assume $DynamicType($r50) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r50))) == T$System.String;
$r51 := $defaultBoolValue;
$r24 := $defaultRef;
$r25 := $defaultRef;
$r26 := $defaultRef;
local_10 := $defaultRef;
$r27 := $defaultRef;
$r28 := $defaultIntValue;
$r29 := $defaultRef;
$r30 := $defaultBoolValue;
$r66 := $defaultRef;
local_11 := $defaultRef;
$r67 := $defaultIntValue;
local_12 := $defaultRef;
$r68 := $defaultRef;
$r69 := $defaultRef;
$r70 := $defaultRef;
$r72 := $defaultBoolValue;
$r71 := $defaultRef;
$r63 := $defaultRef;
$r64 := $defaultRef;
$r65 := $defaultIntValue;
$r87 := $defaultRef;
$r88 := $defaultRef;
$r89 := $defaultIntValue;
$r73 := $defaultRef;
$r74 := $defaultRef;
$r75 := $defaultRef;
$r76 := $defaultRef;
$r77 := $defaultRef;
$r78 := $defaultRef;
$r79 := $defaultIntValue;
$r80 := $defaultRef;
$r81 := $defaultRef;
$r82 := $defaultRef;
$r83 := $defaultRef;
$r84 := $defaultRef;
$r85 := $defaultRef;
assume $DynamicType($r85) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r85))) == T$System.String;
$r86 := $defaultBoolValue;
$r34 := $defaultRef;
$r35 := $defaultRef;
$r36 := $defaultRef;
$r37 := $defaultRef;
$r38 := $defaultIntValue;
$r39 := $defaultIntValue;
$r40 := $defaultRef;
$r41 := $defaultIntValue;
local_13 := $defaultIntValue;
$r42 := $defaultRef;
$r43 := $defaultIntValue;
$r44 := $defaultIntValue;
$r91 := $defaultBoolValue;
$r90 := $defaultRef;
$r106 := $defaultRef;
$r107 := $defaultIntValue;
$r108 := $defaultRef;
$r109 := $defaultIntValue;
$r110 := $defaultIntValue;
$r112 := $defaultBoolValue;
$r111 := $defaultRef;
$r92 := $defaultRef;
$r93 := $defaultRef;
$r94 := $defaultRef;
$r95 := $defaultRef;
$r96 := $defaultRef;
$r97 := $defaultRef;
$r98 := $defaultIntValue;
$r99 := $defaultRef;
$r100 := $defaultRef;
$r101 := $defaultRef;
$r102 := $defaultRef;
$r103 := $defaultRef;
$r104 := $defaultRef;
assume $DynamicType($r104) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r104))) == T$System.String;
$r105 := $defaultBoolValue;
$r48 := $defaultBoolValue;
$r113 := $defaultRef;
$r114 := $defaultRef;
$r115 := $defaultRef;
$r116 := $defaultRef;
$r117 := $defaultIntValue;
$r118 := $defaultIntValue;
$r119 := $defaultRef;
local_14 := $defaultRef;
$r120 := $defaultRef;
$r121 := $defaultBoolValue;
$r126 := $defaultRef;
local_15 := $defaultRef;
$r125 := $defaultRef;
$r122 := $defaultRef;
$r123 := $defaultIntValue;
$r124 := $defaultRef;
$r127 := $defaultIntValue;
$r128 := $defaultRef;
$r129 := $defaultIntValue;
$r130 := $defaultIntValue;
$r132 := $defaultBoolValue;
$r131 := $defaultRef;
$r133 := $defaultRef;
$r134 := $defaultRef;
$r135 := $defaultRef;
$r136 := $defaultRef;
$r137 := $defaultRef;
$r138 := $defaultRef;
$r139 := $defaultIntValue;
$r140 := $defaultRef;
$r141 := $defaultRef;
$r142 := $defaultRef;
$r143 := $defaultRef;
$r144 := $defaultRef;
$r145 := $defaultRef;
assume $DynamicType($r145) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r145))) == T$System.String;
$r146 := $defaultBoolValue;
$r52 := $defaultRef;
$r53 := $defaultRef;
$r54 := $defaultRef;
$r55 := $defaultRef;
$r56 := $defaultRef;
$r57 := $defaultRef;
$r58 := $defaultIntValue;
$r59 := $defaultBoolValue;
$r60 := $defaultIntValue;
$r61 := $defaultIntValue;
$r62 := $defaultIntValue;
$r15 := $defaultRef;
$r16 := $defaultBoolValue;
$r147 := $defaultBoolValue;
$r148 := $defaultRef;
$r149 := $defaultRef;
$r150 := $defaultRef;
$r151 := $defaultRef;
local_16 := $defaultRef;
$r152 := $defaultBoolValue;
$r157 := $defaultRef;
$r158 := $defaultRef;
$r159 := $defaultRef;
$r153 := $defaultRef;
$r154 := $defaultRef;
$r155 := $defaultRef;
$r156 := $defaultRef;
$immutableArgument_arguments := $defaultRef;
$immutableArgument_arguments := arguments;
$r0 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r1 := isFixed;
if ($r1 == true)
{
		goto L_0017;
}

$r5 := local_5;
$initialize1 := 0;
local_5 := $initialize1;
$r4 := local_5;
		goto L_001D;
	L_0017:
$r2 := 1;
call $r3 := Alloc();
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference());
assume $TypeConstructor($DynamicType($r3)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r3 != null;
$temp_var_2 := Int2Union($r2);
call System.Nullable`1.#ctor$`0($r3,$temp_var_2);


		if ($Exception != null)
		{
			return;
		}

$r4 := $r3;
	L_001D:
local_1 := $r4;
$r6 := local_2;
$initialize3 := 0;
local_2 := $initialize3;
$r7 := false;
local_3 := $r7;
$r8 := 1;
local_4 := $r8;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r10 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r11 := $BoxFromUnion($r10);
assume {:nonnull} $r11 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r11);
if ($r11 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_7 := $r12;
$r13 := local_7;
assume {:nonnull} $r13 != null;
call $r14 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r13);


		if ($Exception != null)
		{
			return;
		}

local_6 := $r14;
		goto L_0273;
	L_004B:
$r17 := local_6;
assume {:nonnull} $r17 != null;
call $r18 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r17);


		if ($Exception != null)
		{
			return;
		}

local_8 := $r18;
$r19 := local_8;
assume {:nonnull} $r19 != null;
call $r20 := System.Collections.Generic.KeyValuePair`2.get_Key($r19);


		if ($Exception != null)
		{
			return;
		}

local_9 := $r20;
assume $DynamicType(local_9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_9))) == T$System.String;
$r21 := local_9;
assume $DynamicType($r21) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r21))) == T$System.String;
$r22 := $string_literal_ArraySubType;
assume $DynamicType($r22) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r22))) == T$System.String;
call $r23 := System.String.op_Equality$System.String$System.String($r21,$r22);


		if ($Exception != null)
		{
			return;
		}

if ($r23 == true)
{
		goto L_00A3;
}

$r31 := local_9;
assume $DynamicType($r31) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r31))) == T$System.String;
$r32 := $string_literal_SizeConst;
assume $DynamicType($r32) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r32))) == T$System.String;
call $r33 := System.String.op_Equality$System.String$System.String($r31,$r32);


		if ($Exception != null)
		{
			return;
		}

if ($r33 == true)
{
		goto L_012E;
}

$r45 := local_9;
assume $DynamicType($r45) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r45))) == T$System.String;
$r46 := $string_literal_SizeParamIndex;
assume $DynamicType($r46) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r46))) == T$System.String;
call $r47 := System.String.op_Equality$System.String$System.String($r45,$r46);


		if ($Exception != null)
		{
			return;
		}

if ($r47 == true)
{
		goto L_01BF;
}

$r49 := local_9;
assume $DynamicType($r49) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r49))) == T$System.String;
$r50 := $string_literal_SafeArraySubType;
assume $DynamicType($r50) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r50))) == T$System.String;
call $r51 := System.String.op_Equality$System.String$System.String($r49,$r50);


		if ($Exception != null)
		{
			return;
		}

if ($r51 == true)
{
		goto L_0252;
}

		goto L_026D;
	L_00A3:
$r24 := local_0;
$r25 := local_8;
assume {:nonnull} $r25 != null;
call $r26 := System.Collections.Generic.KeyValuePair`2.get_Value($r25);


		if ($Exception != null)
		{
			return;
		}

local_10 := $r26;
$r27 := local_10;
$r28 := 2;
assume {:nonnull} $r27 != null;
$temp_var_5 := Int2Union($r28);
call $r29 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r27,$temp_var_5);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r24 != null;
call System.Nullable`1.#ctor$`0($r24,$r29);


		if ($Exception != null)
		{
			return;
		}

$r30 := isFixed;
if ($r30 == true)
{
		goto L_00DC;
}

$r66 := local_0;
local_11 := $r66;
$r67 := 44;
local_12 := $r67;
$r68 := local_11;
assume {:nonnull} $r68 != null;
call $r69 := System.Nullable`1.GetValueOrDefault($r68);


		if ($Exception != null)
		{
			return;
		}

$r70 := local_12;
if ($r69 == $r70)
{
		goto L_00D3;
}

$r72 := false;
		goto L_00DA;
	L_00D3:
$r71 := local_11;
assume {:nonnull} $r71 != null;
call $r72 := System.Nullable`1.get_HasValue($r71);


		if ($Exception != null)
		{
			return;
		}

	L_00DA:
if ($r72 == true)
{
		goto L_00F7;
}

	L_00DC:
$r63 := local_0;
assume {:nonnull} $r63 != null;
call $r64 := System.Nullable`1.get_Value($r63);


		if ($Exception != null)
		{
			return;
		}

$r65 := 0;
if ($r64 < $r65)
{
		goto L_00F7;
}

$r87 := local_0;
assume {:nonnull} $r87 != null;
call $r88 := System.Nullable`1.get_Value($r87);


		if ($Exception != null)
		{
			return;
		}

$r89 := 536870911;
if ($r88 <= $r89)
{
		goto L_026D;
}

	L_00F7:
$r73 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r75 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r77 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r78 := $BoxFromUnion($r77);
$r79 := local_4;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r81 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r82 := $BoxFromUnion($r81);
assume {:nonnull} $r82 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r82);
if ($r82 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r84 := local_8;
assume {:nonnull} $r84 != null;
call $r85 := System.Collections.Generic.KeyValuePair`2.get_Key($r84);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r73 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r73);
if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r73,$r75,$r78,$r79,$r83,$r85);


}

else if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r73,$r75,$r78,$r79,$r83,$r85);


}

else if ($r73 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r86 := true;
local_3 := $r86;
		goto L_026D;
	L_012E:
$r34 := local_1;
$r35 := local_8;
assume {:nonnull} $r35 != null;
call $r36 := System.Collections.Generic.KeyValuePair`2.get_Value($r35);


		if ($Exception != null)
		{
			return;
		}

local_10 := $r36;
$r37 := local_10;
$r38 := 13;
assume {:nonnull} $r37 != null;
$temp_var_8 := Int2Union($r38);
call $temp_var_9 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r37,$temp_var_8);
$r39 := Union2Int($temp_var_9);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r34 != null;
$temp_var_10 := Int2Union($r39);
call System.Nullable`1.#ctor$`0($r34,$temp_var_10);


		if ($Exception != null)
		{
			return;
		}

$r40 := local_1;
local_5 := $r40;
$r41 := 0;
local_13 := $r41;
$r42 := local_5;
assume {:nonnull} $r42 != null;
call $temp_var_11 := System.Nullable`1.GetValueOrDefault($r42);
$r43 := Union2Int($temp_var_11);


		if ($Exception != null)
		{
			return;
		}

$r44 := local_13;
if ($r43 < $r44)
{
		goto L_015B;
}

$r91 := false;
		goto L_0162;
	L_015B:
$r90 := local_5;
assume {:nonnull} $r90 != null;
call $r91 := System.Nullable`1.get_HasValue($r90);


		if ($Exception != null)
		{
			return;
		}

	L_0162:
if ($r91 == true)
{
		goto L_0188;
}

$r106 := local_1;
local_5 := $r106;
$r107 := 536870911;
local_13 := $r107;
$r108 := local_5;
assume {:nonnull} $r108 != null;
call $temp_var_12 := System.Nullable`1.GetValueOrDefault($r108);
$r109 := Union2Int($temp_var_12);


		if ($Exception != null)
		{
			return;
		}

$r110 := local_13;
if ($r109 > $r110)
{
		goto L_017C;
}

$r112 := false;
		goto L_0183;
	L_017C:
$r111 := local_5;
assume {:nonnull} $r111 != null;
call $r112 := System.Nullable`1.get_HasValue($r111);


		if ($Exception != null)
		{
			return;
		}

	L_0183:
if ($r112 == false)
{
		goto L_026D;
}

	L_0188:
$r92 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r94 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r96 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r97 := $BoxFromUnion($r96);
$r98 := local_4;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r100 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r101 := $BoxFromUnion($r100);
assume {:nonnull} $r101 != null;
call DynamicDispatch_Type_13 := System.Object.GetType($r101);
if ($r101 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r103 := local_8;
assume {:nonnull} $r103 != null;
call $r104 := System.Collections.Generic.KeyValuePair`2.get_Key($r103);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r92 != null;
call DynamicDispatch_Type_14 := System.Object.GetType($r92);
if ($Subtype(DynamicDispatch_Type_14, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r92,$r94,$r97,$r98,$r102,$r104);


}

else if ($Subtype(DynamicDispatch_Type_14, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r92,$r94,$r97,$r98,$r102,$r104);


}

else if ($r92 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r105 := true;
local_3 := $r105;
		goto L_026D;
	L_01BF:
$r48 := isFixed;
if ($r48 == true)
{
		goto L_0252;
}

$r113 := local_2;
$r114 := local_8;
assume {:nonnull} $r114 != null;
call $r115 := System.Collections.Generic.KeyValuePair`2.get_Value($r114);


		if ($Exception != null)
		{
			return;
		}

local_10 := $r115;
$r116 := local_10;
$r117 := 11;
assume {:nonnull} $r116 != null;
$temp_var_15 := Int2Union($r117);
call $temp_var_16 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r116,$temp_var_15);
$r118 := Union2Int($temp_var_16);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r113 != null;
$temp_var_17 := Int2Union($r118);
call System.Nullable`1.#ctor$`0($r113,$temp_var_17);


		if ($Exception != null)
		{
			return;
		}

$r119 := local_2;
local_14 := $r119;
$r120 := local_14;
assume {:nonnull} $r120 != null;
call $r121 := System.Nullable`1.get_HasValue($r120);


		if ($Exception != null)
		{
			return;
		}

if ($r121 == true)
{
		goto L_01F6;
}

$r126 := local_15;
$initialize18 := 0;
local_15 := $initialize18;
$r125 := local_15;
		goto L_0202;
	L_01F6:
$r122 := local_14;
assume {:nonnull} $r122 != null;
call $temp_var_19 := System.Nullable`1.GetValueOrDefault($r122);
$r123 := Union2Int($temp_var_19);


		if ($Exception != null)
		{
			return;
		}

call $r124 := Alloc();
assume $DynamicType($r124) == T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference());
assume $TypeConstructor($DynamicType($r124)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r124 != null;
$temp_var_20 := Int2Union($r123);
call System.Nullable`1.#ctor$`0($r124,$temp_var_20);


		if ($Exception != null)
		{
			return;
		}

$r125 := $r124;
	L_0202:
local_5 := $r125;
$r127 := 0;
local_13 := $r127;
$r128 := local_5;
assume {:nonnull} $r128 != null;
call $temp_var_21 := System.Nullable`1.GetValueOrDefault($r128);
$r129 := Union2Int($temp_var_21);


		if ($Exception != null)
		{
			return;
		}

$r130 := local_13;
if ($r129 < $r130)
{
		goto L_0215;
}

$r132 := false;
		goto L_021C;
	L_0215:
$r131 := local_5;
assume {:nonnull} $r131 != null;
call $r132 := System.Nullable`1.get_HasValue($r131);


		if ($Exception != null)
		{
			return;
		}

	L_021C:
if ($r132 == false)
{
		goto L_026D;
}

$r133 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r135 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r137 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r138 := $BoxFromUnion($r137);
$r139 := local_4;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r141 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r142 := $BoxFromUnion($r141);
assume {:nonnull} $r142 != null;
call DynamicDispatch_Type_22 := System.Object.GetType($r142);
if ($r142 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r144 := local_8;
assume {:nonnull} $r144 != null;
call $r145 := System.Collections.Generic.KeyValuePair`2.get_Key($r144);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r133 != null;
call DynamicDispatch_Type_23 := System.Object.GetType($r133);
if ($Subtype(DynamicDispatch_Type_23, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r133,$r135,$r138,$r139,$r143,$r145);


}

else if ($Subtype(DynamicDispatch_Type_23, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r133,$r135,$r138,$r139,$r143,$r145);


}

else if ($r133 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r146 := true;
local_3 := $r146;
		goto L_026D;
	L_0252:
$r52 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r54 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r56 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r57 := $BoxFromUnion($r56);
$r58 := local_4;
assume {:nonnull} $r52 != null;
call DynamicDispatch_Type_24 := System.Object.GetType($r52);
if ($Subtype(DynamicDispatch_Type_24, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r52,$r54,$r57,$r58);


}

else if ($Subtype(DynamicDispatch_Type_24, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r52,$r54,$r57,$r58);


}

else if ($r52 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r59 := true;
local_3 := $r59;
	L_026D:
$r60 := local_4;
$r61 := 1;
$r62 := $r60 + $r61;
local_4 := $r62;
	L_0273:
$r15 := local_6;
assume {:nonnull} $r15 != null;
call $r16 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r15);


		if ($Exception != null)
		{
			return;
		}

if ($r16 == true)
{
		goto L_004B;
}

$r147 := local_3;
if ($r147 == true)
{
		goto L_02AB;
}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r149 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r150 := $BoxFromUnion($r149);
assume {:nonnull} $r150 != null;
call DynamicDispatch_Type_25 := System.Object.GetType($r150);
if ($Subtype(DynamicDispatch_Type_25, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r151 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r150);
assume $Subtype($DynamicType($r151), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r150 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_16 := $r151;
$r152 := isFixed;
if ($r152 == false)
{
		goto L_02A1;
}

$r157 := local_16;
$r158 := local_0;
$r159 := local_1;
assume {:nonnull} $r157 != null;
call DynamicDispatch_Type_26 := System.Object.GetType($r157);
if ($Subtype(DynamicDispatch_Type_26, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsFixedArray$System.Nullable$System.Runtime.InteropServices.UnmanagedType$$System.Nullable$System.Int32$($r157,$r158,$r159);


}

else if ($r157 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

arguments$out := $immutableArgument_arguments;
return ;
	L_02A1:
$r153 := local_16;
$r154 := local_0;
$r155 := local_1;
$r156 := local_2;
assume {:nonnull} $r153 != null;
call DynamicDispatch_Type_27 := System.Object.GetType($r153);
if ($Subtype(DynamicDispatch_Type_27, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsArray$System.Nullable$System.Runtime.InteropServices.UnmanagedType$$System.Nullable$System.Int32$$System.Nullable$System.Int16$($r153,$r154,$r155,$r156);


}

else if ($r153 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_02AB:
arguments$out := $immutableArgument_arguments;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsSafeArray$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider(arguments : Ref,messageProvider : Ref) returns (arguments$out : Ref)
{
	var $r0 : Ref;
	var local_0 : Ref;
	var $r1 : Ref;
	var local_1 : Ref;
	var $r2 : int;
	var local_2 : int;
	var $r3 : bool;
	var local_3 : bool;
	var $r4 : int;
	var local_4 : int;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var local_6 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var local_5 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var local_7 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var local_8 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : bool;
	var $r31 : Ref;
	var $r32 : Ref;
	var $r33 : bool;
	var $r40 : Ref;
	var $r41 : Ref;
	var $r42 : bool;
	var $r51 : Ref;
	var $r52 : Ref;
	var $r53 : bool;
	var $r54 : Ref;
	var $r55 : Ref;
	var $r56 : bool;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var local_9 : Ref;
	var $r23 : Ref;
	var $r24 : int;
	var $r25 : Ref;
	var $r26 : Ref;
	var local_10 : Ref;
	var $r27 : int;
	var local_11 : Ref;
	var $r28 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r61 : bool;
	var $r60 : Ref;
	var $r76 : Ref;
	var $r77 : Ref;
	var $r78 : int;
	var $r62 : Ref;
	var $r63 : Ref;
	var $r64 : Ref;
	var $r65 : Ref;
	var $r66 : Ref;
	var $r67 : Ref;
	var $r68 : int;
	var $r69 : Ref;
	var $r70 : Ref;
	var $r71 : Ref;
	var $r72 : Ref;
	var $r73 : Ref;
	var $r74 : Ref;
	var $r75 : bool;
	var $r34 : Ref;
	var $r35 : Ref;
	var $r36 : Ref;
	var $r37 : int;
	var $r38 : Ref;
	var $r39 : int;
	var $r43 : Ref;
	var $r44 : Ref;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : Ref;
	var $r48 : Ref;
	var $r49 : int;
	var $r50 : bool;
	var $r57 : int;
	var $r58 : int;
	var $r59 : int;
	var $r11 : Ref;
	var $r12 : bool;
	var $r79 : Ref;
	var $r80 : bool;
	var $r83 : Ref;
	var $r84 : Ref;
	var $r85 : Ref;
	var $r86 : int;
	var $r88 : Ref;
	var $r89 : int;
	var $r90 : Ref;
	var $r91 : int;
	var $r81 : Ref;
	var $r82 : bool;
	var $r93 : int;
	var $r94 : int;
	var $r95 : Ref;
	var $r96 : Ref;
	var $r97 : Ref;
	var $r98 : Ref;
	var $r99 : Ref;
	var $r100 : Ref;
	var $r101 : int;
	var $r102 : bool;
	var $r92 : Ref;
	var $r87 : bool;
	var $r103 : Ref;
	var $r104 : Ref;
	var $r105 : Ref;
	var $r106 : Ref;
	var $r107 : Ref;
	var $r108 : Ref;
	var $immutableArgument_arguments : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize0 : int;
	var DynamicDispatch_Type_1 : Ref;
	var $temp_var_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var $temp_var_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;
	var DynamicDispatch_Type_8 : Ref;
	var DynamicDispatch_Type_9 : Ref;

assume messageProvider == null || $Subtype($DynamicType(messageProvider), T$Microsoft.CodeAnalysis.CommonMessageProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
local_0 := $defaultRef;
$r1 := $defaultRef;
local_1 := $defaultRef;
$r2 := $defaultIntValue;
local_2 := $defaultIntValue;
$r3 := $defaultBoolValue;
local_3 := $defaultBoolValue;
$r4 := $defaultIntValue;
local_4 := $defaultIntValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
local_6 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
local_5 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
local_7 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
local_8 := $defaultRef;
assume $DynamicType(local_8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_8))) == T$System.String;
$r17 := $defaultRef;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$r18 := $defaultRef;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
$r19 := $defaultBoolValue;
$r31 := $defaultRef;
assume $DynamicType($r31) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r31))) == T$System.String;
$r32 := $defaultRef;
assume $DynamicType($r32) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r32))) == T$System.String;
$r33 := $defaultBoolValue;
$r40 := $defaultRef;
assume $DynamicType($r40) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r40))) == T$System.String;
$r41 := $defaultRef;
assume $DynamicType($r41) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r41))) == T$System.String;
$r42 := $defaultBoolValue;
$r51 := $defaultRef;
assume $DynamicType($r51) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r51))) == T$System.String;
$r52 := $defaultRef;
assume $DynamicType($r52) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r52))) == T$System.String;
$r53 := $defaultBoolValue;
$r54 := $defaultRef;
assume $DynamicType($r54) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r54))) == T$System.String;
$r55 := $defaultRef;
assume $DynamicType($r55) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r55))) == T$System.String;
$r56 := $defaultBoolValue;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
local_9 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultIntValue;
$r25 := $defaultRef;
$r26 := $defaultRef;
local_10 := $defaultRef;
$r27 := $defaultIntValue;
local_11 := $defaultRef;
$r28 := $defaultRef;
$r29 := $defaultRef;
$r30 := $defaultRef;
$r61 := $defaultBoolValue;
$r60 := $defaultRef;
$r76 := $defaultRef;
$r77 := $defaultRef;
$r78 := $defaultIntValue;
$r62 := $defaultRef;
$r63 := $defaultRef;
$r64 := $defaultRef;
$r65 := $defaultRef;
$r66 := $defaultRef;
$r67 := $defaultRef;
$r68 := $defaultIntValue;
$r69 := $defaultRef;
$r70 := $defaultRef;
$r71 := $defaultRef;
$r72 := $defaultRef;
$r73 := $defaultRef;
$r74 := $defaultRef;
assume $DynamicType($r74) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r74))) == T$System.String;
$r75 := $defaultBoolValue;
$r34 := $defaultRef;
$r35 := $defaultRef;
$r36 := $defaultRef;
$r37 := $defaultIntValue;
$r38 := $defaultRef;
$r39 := $defaultIntValue;
$r43 := $defaultRef;
$r44 := $defaultRef;
$r45 := $defaultRef;
$r46 := $defaultRef;
$r47 := $defaultRef;
$r48 := $defaultRef;
$r49 := $defaultIntValue;
$r50 := $defaultBoolValue;
$r57 := $defaultIntValue;
$r58 := $defaultIntValue;
$r59 := $defaultIntValue;
$r11 := $defaultRef;
$r12 := $defaultBoolValue;
$r79 := $defaultRef;
$r80 := $defaultBoolValue;
$r83 := $defaultRef;
$r84 := $defaultRef;
$r85 := $defaultRef;
$r86 := $defaultIntValue;
$r88 := $defaultRef;
$r89 := $defaultIntValue;
$r90 := $defaultRef;
$r91 := $defaultIntValue;
$r81 := $defaultRef;
$r82 := $defaultBoolValue;
$r93 := $defaultIntValue;
$r94 := $defaultIntValue;
$r95 := $defaultRef;
$r96 := $defaultRef;
$r97 := $defaultRef;
$r98 := $defaultRef;
$r99 := $defaultRef;
$r100 := $defaultRef;
$r101 := $defaultIntValue;
$r102 := $defaultBoolValue;
$r92 := $defaultRef;
$r87 := $defaultBoolValue;
$r103 := $defaultRef;
$r104 := $defaultRef;
$r105 := $defaultRef;
$r106 := $defaultRef;
$r107 := $defaultRef;
$r108 := $defaultRef;
$immutableArgument_arguments := $defaultRef;
$immutableArgument_arguments := arguments;
$r0 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r1 := null;
local_1 := $r1;
$r2 := -1;
local_2 := $r2;
$r3 := false;
local_3 := $r3;
$r4 := 1;
local_4 := $r4;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r6 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r7 := $BoxFromUnion($r6);
assume {:nonnull} $r7 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r7);
if ($r7 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_6 := $r8;
$r9 := local_6;
assume {:nonnull} $r9 != null;
call $r10 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r9);


		if ($Exception != null)
		{
			return;
		}

local_5 := $r10;
		goto L_0149;
	L_0031:
$r13 := local_5;
assume {:nonnull} $r13 != null;
call $r14 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r13);


		if ($Exception != null)
		{
			return;
		}

local_7 := $r14;
$r15 := local_7;
assume {:nonnull} $r15 != null;
call $r16 := System.Collections.Generic.KeyValuePair`2.get_Key($r15);


		if ($Exception != null)
		{
			return;
		}

local_8 := $r16;
assume $DynamicType(local_8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_8))) == T$System.String;
$r17 := local_8;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$r18 := $string_literal_SafeArraySubType;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
call $r19 := System.String.op_Equality$System.String$System.String($r17,$r18);


		if ($Exception != null)
		{
			return;
		}

if ($r19 == true)
{
		goto L_009A;
}

$r31 := local_8;
assume $DynamicType($r31) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r31))) == T$System.String;
$r32 := $string_literal_SafeArrayUserDefinedSubType;
assume $DynamicType($r32) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r32))) == T$System.String;
call $r33 := System.String.op_Equality$System.String$System.String($r31,$r32);


		if ($Exception != null)
		{
			return;
		}

if ($r33 == true)
{
		goto L_0111;
}

$r40 := local_8;
assume $DynamicType($r40) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r40))) == T$System.String;
$r41 := $string_literal_ArraySubType;
assume $DynamicType($r41) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r41))) == T$System.String;
call $r42 := System.String.op_Equality$System.String$System.String($r40,$r41);


		if ($Exception != null)
		{
			return;
		}

if ($r42 == true)
{
		goto L_0128;
}

$r51 := local_8;
assume $DynamicType($r51) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r51))) == T$System.String;
$r52 := $string_literal_SizeConst;
assume $DynamicType($r52) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r52))) == T$System.String;
call $r53 := System.String.op_Equality$System.String$System.String($r51,$r52);


		if ($Exception != null)
		{
			return;
		}

if ($r53 == true)
{
		goto L_0128;
}

$r54 := local_8;
assume $DynamicType($r54) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r54))) == T$System.String;
$r55 := $string_literal_SizeParamIndex;
assume $DynamicType($r55) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r55))) == T$System.String;
call $r56 := System.String.op_Equality$System.String$System.String($r54,$r55);


		if ($Exception != null)
		{
			return;
		}

if ($r56 == true)
{
		goto L_0128;
}

		goto L_0143;
	L_009A:
$r20 := local_0;
$r21 := local_7;
assume {:nonnull} $r21 != null;
call $r22 := System.Collections.Generic.KeyValuePair`2.get_Value($r21);


		if ($Exception != null)
		{
			return;
		}

local_9 := $r22;
$r23 := local_9;
$r24 := 2;
assume {:nonnull} $r23 != null;
$temp_var_2 := Int2Union($r24);
call $r25 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r23,$temp_var_2);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r20 != null;
call System.Nullable`1.#ctor$`0($r20,$r25);


		if ($Exception != null)
		{
			return;
		}

$r26 := local_0;
local_10 := $r26;
$r27 := 0;
local_11 := $r27;
$r28 := local_10;
assume {:nonnull} $r28 != null;
call $r29 := System.Nullable`1.GetValueOrDefault($r28);


		if ($Exception != null)
		{
			return;
		}

$r30 := local_11;
if ($r29 < $r30)
{
		goto L_00C6;
}

$r61 := false;
		goto L_00CD;
	L_00C6:
$r60 := local_10;
assume {:nonnull} $r60 != null;
call $r61 := System.Nullable`1.get_HasValue($r60);


		if ($Exception != null)
		{
			return;
		}

	L_00CD:
if ($r61 == true)
{
		goto L_00DD;
}

$r76 := local_0;
assume {:nonnull} $r76 != null;
call $r77 := System.Nullable`1.get_Value($r76);


		if ($Exception != null)
		{
			return;
		}

$r78 := 536870911;
if ($r77 <= $r78)
{
		goto L_0143;
}

	L_00DD:
$r62 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r64 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r66 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r67 := $BoxFromUnion($r66);
$r68 := local_4;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r70 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r71 := $BoxFromUnion($r70);
assume {:nonnull} $r71 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r71);
if ($r71 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r73 := local_7;
assume {:nonnull} $r73 != null;
call $r74 := System.Collections.Generic.KeyValuePair`2.get_Key($r73);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r62 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r62);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r62,$r64,$r67,$r68,$r72,$r74);


}

else if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r62,$r64,$r67,$r68,$r72,$r74);


}

else if ($r62 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r75 := true;
local_3 := $r75;
		goto L_0143;
	L_0111:
$r34 := local_7;
assume {:nonnull} $r34 != null;
call $r35 := System.Collections.Generic.KeyValuePair`2.get_Value($r34);


		if ($Exception != null)
		{
			return;
		}

local_9 := $r35;
$r36 := local_9;
$r37 := 0;
assume {:nonnull} $r36 != null;
$temp_var_5 := Int2Union($r37);
call $r38 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r36,$temp_var_5);


		if ($Exception != null)
		{
			return;
		}

local_1 := $r38;
$r39 := local_4;
local_2 := $r39;
		goto L_0143;
	L_0128:
$r43 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r45 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r47 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r48 := $BoxFromUnion($r47);
$r49 := local_4;
assume {:nonnull} $r43 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r43);
if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r43,$r45,$r48,$r49);


}

else if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r43,$r45,$r48,$r49);


}

else if ($r43 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r50 := true;
local_3 := $r50;
	L_0143:
$r57 := local_4;
$r58 := 1;
$r59 := $r57 + $r58;
local_4 := $r59;
	L_0149:
$r11 := local_5;
assume {:nonnull} $r11 != null;
call $r12 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r11);


		if ($Exception != null)
		{
			return;
		}

if ($r12 == true)
{
		goto L_0031;
}

$r79 := local_0;
assume {:nonnull} $r79 != null;
call $r80 := System.Nullable`1.get_HasValue($r79);


		if ($Exception != null)
		{
			return;
		}

if ($r80 == false)
{
		goto L_0179;
}

$r83 := local_0;
assume {:nonnull} $r83 != null;
call $r84 := System.Nullable`1.GetValueOrDefault($r83);


		if ($Exception != null)
		{
			return;
		}

local_11 := $r84;
$r85 := local_11;
$r86 := 9;
if ($r85 == $r86)
{
		goto L_01A4;
}

$r88 := local_11;
$r89 := 13;
if ($r88 == $r89)
{
		goto L_01A4;
}

$r90 := local_11;
$r91 := 36;
if ($r90 == $r91)
{
		goto L_01A4;
}

	L_0179:
$r81 := local_0;
assume {:nonnull} $r81 != null;
call $r82 := System.Nullable`1.get_HasValue($r81);


		if ($Exception != null)
		{
			return;
		}

if ($r82 == false)
{
		goto L_01A2;
}

$r93 := local_2;
$r94 := 0;
if ($r93 < $r94)
{
		goto L_01A2;
}

$r95 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r97 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r99 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r100 := $BoxFromUnion($r99);
$r101 := local_2;
assume {:nonnull} $r95 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r95);
if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r95,$r97,$r100,$r101);


}

else if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r95,$r97,$r100,$r101);


}

else if ($r95 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r102 := true;
local_3 := $r102;
		goto L_01A4;
	L_01A2:
$r92 := null;
local_1 := $r92;
	L_01A4:
$r87 := local_3;
if ($r87 == true)
{
		goto L_01BE;
}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r104 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r105 := $BoxFromUnion($r104);
assume {:nonnull} $r105 != null;
call DynamicDispatch_Type_8 := System.Object.GetType($r105);
if ($Subtype(DynamicDispatch_Type_8, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r106 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r105);
assume $Subtype($DynamicType($r106), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r105 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r107 := local_0;
$r108 := local_1;
assume {:nonnull} $r106 != null;
call DynamicDispatch_Type_9 := System.Object.GetType($r106);
if ($Subtype(DynamicDispatch_Type_9, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsSafeArray$System.Nullable$Microsoft.Cci.VarEnum$$Microsoft.CodeAnalysis.ITypeSymbol($r106,$r107,$r108);


}

else if ($r106 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_01BE:
arguments$out := $immutableArgument_arguments;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MarshalAsAttributeDecoder`4.DecodeMarshalAsFixedString$Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments$`1$`2$`3$$$Microsoft.CodeAnalysis.CommonMessageProvider(arguments : Ref,messageProvider : Ref) returns (arguments$out : Ref)
{
	var $r0 : int;
	var local_0 : int;
	var $r1 : int;
	var local_1 : int;
	var $r2 : bool;
	var local_2 : bool;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var local_4 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var local_3 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var local_5 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var local_6 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : bool;
	var $r25 : Ref;
	var $r26 : Ref;
	var $r27 : bool;
	var $r36 : Ref;
	var $r37 : Ref;
	var $r38 : bool;
	var $r18 : Ref;
	var $r19 : Ref;
	var local_7 : Ref;
	var $r20 : Ref;
	var $r21 : int;
	var $r22 : int;
	var $r23 : int;
	var $r24 : int;
	var $r56 : int;
	var $r57 : int;
	var $r42 : Ref;
	var $r43 : Ref;
	var $r44 : Ref;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : Ref;
	var $r48 : int;
	var $r49 : Ref;
	var $r50 : Ref;
	var $r51 : Ref;
	var $r52 : Ref;
	var $r53 : Ref;
	var $r54 : Ref;
	var $r55 : bool;
	var $r28 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : Ref;
	var $r32 : Ref;
	var $r33 : Ref;
	var $r34 : int;
	var $r35 : bool;
	var $r39 : int;
	var $r40 : int;
	var $r41 : int;
	var $r9 : Ref;
	var $r10 : bool;
	var $r58 : int;
	var $r59 : int;
	var $r61 : Ref;
	var $r62 : Ref;
	var $r63 : Ref;
	var $r64 : Ref;
	var $r65 : Ref;
	var $r66 : Ref;
	var $r67 : Ref;
	var $r68 : bool;
	var $r60 : bool;
	var $r69 : Ref;
	var $r70 : Ref;
	var $r71 : Ref;
	var $r72 : Ref;
	var $r73 : int;
	var $immutableArgument_arguments : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $temp_var_1 : Ref;
	var $temp_var_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var DynamicDispatch_Type_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;
	var DynamicDispatch_Type_8 : Ref;

assume messageProvider == null || $Subtype($DynamicType(messageProvider), T$Microsoft.CodeAnalysis.CommonMessageProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
local_0 := $defaultIntValue;
$r1 := $defaultIntValue;
local_1 := $defaultIntValue;
$r2 := $defaultBoolValue;
local_2 := $defaultBoolValue;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
local_4 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
local_3 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
local_5 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
assume $DynamicType($r14) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r14))) == T$System.String;
local_6 := $defaultRef;
assume $DynamicType(local_6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_6))) == T$System.String;
$r15 := $defaultRef;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $defaultRef;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
$r17 := $defaultBoolValue;
$r25 := $defaultRef;
assume $DynamicType($r25) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r25))) == T$System.String;
$r26 := $defaultRef;
assume $DynamicType($r26) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r26))) == T$System.String;
$r27 := $defaultBoolValue;
$r36 := $defaultRef;
assume $DynamicType($r36) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r36))) == T$System.String;
$r37 := $defaultRef;
assume $DynamicType($r37) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r37))) == T$System.String;
$r38 := $defaultBoolValue;
$r18 := $defaultRef;
$r19 := $defaultRef;
local_7 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultIntValue;
$r22 := $defaultIntValue;
$r23 := $defaultIntValue;
$r24 := $defaultIntValue;
$r56 := $defaultIntValue;
$r57 := $defaultIntValue;
$r42 := $defaultRef;
$r43 := $defaultRef;
$r44 := $defaultRef;
$r45 := $defaultRef;
$r46 := $defaultRef;
$r47 := $defaultRef;
$r48 := $defaultIntValue;
$r49 := $defaultRef;
$r50 := $defaultRef;
$r51 := $defaultRef;
$r52 := $defaultRef;
$r53 := $defaultRef;
$r54 := $defaultRef;
assume $DynamicType($r54) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r54))) == T$System.String;
$r55 := $defaultBoolValue;
$r28 := $defaultRef;
$r29 := $defaultRef;
$r30 := $defaultRef;
$r31 := $defaultRef;
$r32 := $defaultRef;
$r33 := $defaultRef;
$r34 := $defaultIntValue;
$r35 := $defaultBoolValue;
$r39 := $defaultIntValue;
$r40 := $defaultIntValue;
$r41 := $defaultIntValue;
$r9 := $defaultRef;
$r10 := $defaultBoolValue;
$r58 := $defaultIntValue;
$r59 := $defaultIntValue;
$r61 := $defaultRef;
$r62 := $defaultRef;
$r63 := $defaultRef;
$r64 := $defaultRef;
$r65 := $defaultRef;
$r66 := $defaultRef;
$r67 := $defaultRef;
assume $DynamicType($r67) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r67))) == T$System.String;
$r68 := $defaultBoolValue;
$r60 := $defaultBoolValue;
$r69 := $defaultRef;
$r70 := $defaultRef;
$r71 := $defaultRef;
$r72 := $defaultRef;
$r73 := $defaultIntValue;
$immutableArgument_arguments := $defaultRef;
$immutableArgument_arguments := arguments;
$r0 := -1;
local_0 := $r0;
$r1 := 1;
local_1 := $r1;
$r2 := false;
local_2 := $r2;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r4 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r5 := $BoxFromUnion($r4);
assume {:nonnull} $r5 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r5);
if ($r5 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_4 := $r6;
$r7 := local_4;
assume {:nonnull} $r7 != null;
call $r8 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r7);


		if ($Exception != null)
		{
			return;
		}

local_3 := $r8;
		goto L_00D3;
	L_0025:
$r11 := local_3;
assume {:nonnull} $r11 != null;
call $r12 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r11);


		if ($Exception != null)
		{
			return;
		}

local_5 := $r12;
$r13 := local_5;
assume {:nonnull} $r13 != null;
call $r14 := System.Collections.Generic.KeyValuePair`2.get_Key($r13);


		if ($Exception != null)
		{
			return;
		}

local_6 := $r14;
assume $DynamicType(local_6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_6))) == T$System.String;
$r15 := local_6;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $string_literal_SizeConst;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
call $r17 := System.String.op_Equality$System.String$System.String($r15,$r16);


		if ($Exception != null)
		{
			return;
		}

if ($r17 == true)
{
		goto L_0063;
}

$r25 := local_6;
assume $DynamicType($r25) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r25))) == T$System.String;
$r26 := $string_literal_ArraySubType;
assume $DynamicType($r26) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r26))) == T$System.String;
call $r27 := System.String.op_Equality$System.String$System.String($r25,$r26);


		if ($Exception != null)
		{
			return;
		}

if ($r27 == true)
{
		goto L_00B5;
}

$r36 := local_6;
assume $DynamicType($r36) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r36))) == T$System.String;
$r37 := $string_literal_SizeParamIndex;
assume $DynamicType($r37) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r37))) == T$System.String;
call $r38 := System.String.op_Equality$System.String$System.String($r36,$r37);


		if ($Exception != null)
		{
			return;
		}

if ($r38 == true)
{
		goto L_00B5;
}

		goto L_00CF;
	L_0063:
$r18 := local_5;
assume {:nonnull} $r18 != null;
call $r19 := System.Collections.Generic.KeyValuePair`2.get_Value($r18);


		if ($Exception != null)
		{
			return;
		}

local_7 := $r19;
$r20 := local_7;
$r21 := 13;
assume {:nonnull} $r20 != null;
$temp_var_1 := Int2Union($r21);
call $temp_var_2 := Microsoft.CodeAnalysis.TypedConstant.DecodeValue``1$Microsoft.CodeAnalysis.SpecialType($r20,$temp_var_1);
$r22 := Union2Int($temp_var_2);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r22;
$r23 := local_0;
$r24 := 0;
if ($r23 < $r24)
{
		goto L_0082;
}

$r56 := local_0;
$r57 := 536870911;
if ($r56 <= $r57)
{
		goto L_00CF;
}

	L_0082:
$r42 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r44 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r46 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r47 := $BoxFromUnion($r46);
$r48 := local_1;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r50 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Attribute($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r51 := $BoxFromUnion($r50);
assume {:nonnull} $r51 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r51);
if ($r51 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r53 := local_5;
assume {:nonnull} $r53 != null;
call $r54 := System.Collections.Generic.KeyValuePair`2.get_Key($r53);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r42 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r42);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r42,$r44,$r47,$r48,$r52,$r54);


}

else if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportInvalidNamedArgument$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32$Microsoft.CodeAnalysis.ITypeSymbol$System.String($r42,$r44,$r47,$r48,$r52,$r54);


}

else if ($r42 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r55 := true;
local_2 := $r55;
		goto L_00CF;
	L_00B5:
$r28 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r30 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r32 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r33 := $BoxFromUnion($r32);
$r34 := local_1;
assume {:nonnull} $r28 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r28);
if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r28,$r30,$r33,$r34);


}

else if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportParameterNotValidForType$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.Int32($r28,$r30,$r33,$r34);


}

else if ($r28 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r35 := true;
local_2 := $r35;
	L_00CF:
$r39 := local_1;
$r40 := 1;
$r41 := $r39 + $r40;
local_1 := $r41;
	L_00D3:
$r9 := local_3;
assume {:nonnull} $r9 != null;
call $r10 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r9);


		if ($Exception != null)
		{
			return;
		}

if ($r10 == true)
{
		goto L_0025;
}

$r58 := local_0;
$r59 := 0;
if ($r58 >= $r59)
{
		goto L_0101;
}

$r61 := messageProvider;
$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r63 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_Diagnostics($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r65 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.get_AttributeSyntaxOpt($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r66 := $BoxFromUnion($r65);
$r67 := $string_literal_SizeConst;
assume $DynamicType($r67) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r67))) == T$System.String;
assume {:nonnull} $r61 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r61);
if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportAttributeParameterRequired$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.String($r61,$r63,$r66,$r67);


}

else if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.CommonMessageProvider()))
{
call Microsoft.CodeAnalysis.CommonMessageProvider.ReportAttributeParameterRequired$Microsoft.CodeAnalysis.DiagnosticBag$Microsoft.CodeAnalysis.SyntaxNode$System.String($r61,$r63,$r66,$r67);


}

else if ($r61 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r68 := true;
local_2 := $r68;
	L_0101:
$r60 := local_2;
if ($r60 == true)
{
		goto L_011A;
}

$immutableArgument_arguments := $immutableArgument_arguments;
assume {:nonnull} $immutableArgument_arguments != null;
call $r70 := Microsoft.CodeAnalysis.DecodeWellKnownAttributeArguments`3.GetOrCreateData``1($immutableArgument_arguments);


		if ($Exception != null)
		{
			return;
		}

call $r71 := $BoxFromUnion($r70);
assume {:nonnull} $r71 != null;
call DynamicDispatch_Type_7 := System.Object.GetType($r71);
if ($Subtype(DynamicDispatch_Type_7, T$Microsoft.CodeAnalysis.IMarshalAsAttributeTarget()))
{
call $r72 := Microsoft.CodeAnalysis.IMarshalAsAttributeTarget.GetOrCreateData($r71);
assume $Subtype($DynamicType($r72), T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData());

}

else if ($r71 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r73 := local_0;
assume {:nonnull} $r72 != null;
call DynamicDispatch_Type_8 := System.Object.GetType($r72);
if ($Subtype(DynamicDispatch_Type_8, T$Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData()))
{
call Microsoft.CodeAnalysis.MarshalPseudoCustomAttributeData.SetMarshalAsFixedString$System.Int32($r72,$r73);


}

else if ($r72 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_011A:
arguments$out := $immutableArgument_arguments;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.#ctor$Microsoft.CodeAnalysis.DiagnosticInfo$Microsoft.CodeAnalysis.Location$System.Boolean(this : Ref,info : Ref,location : Ref,isSuppressed : bool) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
assume info == null || $Subtype($DynamicType(info), T$Microsoft.CodeAnalysis.DiagnosticInfo());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.CodeAnalysis.Location());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultBoolValue;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.DiagnosticWithInfo._isSuppressed[this] := $defaultBoolValue;

$r0 := this;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostic.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := info;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r1] := $r2;

$r3 := this;
$r4 := location;
assume {:nonnull} $r3 != null;
F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[$r3] := $r4;

$r5 := this;
$r6 := isSuppressed;
assume {:nonnull} $r5 != null;
F$Microsoft.CodeAnalysis.DiagnosticWithInfo._isSuppressed[$r5] := $r6;

return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Location());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_AdditionalLocations(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_AdditionalLocations($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_CustomTags(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_CustomTags($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r3 := $BoxFromUnion($r2);
$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Descriptor(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Descriptor($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Id(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_MessageIdentifier($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Category(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Category($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Code(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Code($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Severity(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Severity($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_DefaultSeverity(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_DefaultSeverity($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_IsEnabledByDefault(this : Ref) returns ($result : bool)
{
	var $r0 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultBoolValue;
$r0 := true;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_IsSuppressed(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._isSuppressed[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_WarningLevel(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_WarningLevel($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.GetMessage$System.IFormatProvider(this : Ref,formatProvider : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
assume formatProvider == null || $Subtype($DynamicType(formatProvider), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := formatProvider;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticInfo.GetMessage$System.IFormatProvider($r1,$r2);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Arguments(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Arguments($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.DiagnosticInfo());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Severity($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r3 := -1;
if ($r2 != $r3)
{
		goto L_001A;
}

$r6 := this;
assume {:nonnull} $r6 != null;
$r7 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r6];

assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.DiagnosticInfo());
assume {:nonnull} $r7 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r7);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r8 := Microsoft.CodeAnalysis.DiagnosticInfo.GetResolvedInfo($r7);


}

else if ($r7 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r8;
return ;
	L_001A:
$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.DiagnosticInfo());
$result := $r5;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.get_HasLazyInfo(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : int;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : int;
	var $r9 : bool;
	var $r4 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultIntValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultIntValue;
$r9 := $defaultBoolValue;
$r4 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.DiagnosticInfo());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Severity($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r3 := -1;
if ($r2 == $r3)
{
		goto L_001E;
}

$r5 := this;
assume {:nonnull} $r5 != null;
$r6 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r5];

assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.DiagnosticInfo());
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r6);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r7 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Severity($r6);


}

else if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r8 := -2;
$r9 := $r7 == $r8;
$result := $r9;
return ;
	L_001E:
$r4 := true;
$result := $r4;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.GetHashCode(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : int;
	var $r6 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultIntValue;
$r6 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location($r0);
assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r1 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r0);
assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Location());

}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.ExternalFileLocation()))
{
call $r2 := Microsoft.CodeAnalysis.ExternalFileLocation.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.MetadataLocation()))
{
call $r2 := Microsoft.CodeAnalysis.MetadataLocation.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.NoLocation()))
{
call $r2 := Microsoft.CodeAnalysis.NoLocation.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.SourceLocation()))
{
call $r2 := Microsoft.CodeAnalysis.SourceLocation.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.XmlLocation()))
{
call $r2 := Microsoft.CodeAnalysis.XmlLocation.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Location()))
{
call $r2 := Microsoft.CodeAnalysis.Location.GetHashCode($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r3 := this;
assume {:nonnull} $r3 != null;
call $r4 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r4);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r5 := Microsoft.CodeAnalysis.DiagnosticInfo.GetHashCode($r4);


}

else if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r6 := Roslyn.Utilities.Hash.Combine$System.Int32$System.Int32($r2,$r5);


		if ($Exception != null)
		{
			return;
		}

$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.Equals$System.Object(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r0 := this;
$r1 := obj;
$r2 := $As($r1,T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.Equals$Microsoft.CodeAnalysis.Diagnostic($r0,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.Equals$Microsoft.CodeAnalysis.Diagnostic($r0,$r2);


}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.Equals$Microsoft.CodeAnalysis.Diagnostic(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r5 : bool;
	var $r2 : Ref;
	var $r3 : Ref;
	var local_0 : Ref;
	var $r4 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r6 : bool;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : bool;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : bool;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r26 : bool;
	var $r16 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var DynamicDispatch_Type_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.CodeAnalysis.Diagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r5 := $defaultBoolValue;
$r2 := $defaultRef;
$r3 := $defaultRef;
local_0 := $defaultRef;
$r4 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r6 := $defaultBoolValue;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultBoolValue;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultBoolValue;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultRef;
$r26 := $defaultBoolValue;
$r16 := $defaultBoolValue;
$r0 := this;
$r1 := obj;
if ($r0 != $r1)
{
		goto L_0006;
}

$r5 := true;
$result := $r5;
return ;
	L_0006:
$r2 := obj;
$r3 := $As($r2,T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
local_0 := $r3;
$r4 := local_0;
if ($r4 == null)
{
		goto L_001E;
}

$r7 := this;
assume {:nonnull} $r7 != null;
call $r8 := System.Object.GetType($r7);


		if ($Exception != null)
		{
			return;
		}

$r9 := local_0;
assume {:nonnull} $r9 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r9);
if ($r9 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r8 == $r10)
{
		goto L_0020;
}

	L_001E:
$r6 := false;
$result := $r6;
return ;
	L_0020:
$r11 := this;
assume {:nonnull} $r11 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r11);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r12 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location($r11);
assume $Subtype($DynamicType($r12), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r12 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r11);
assume $Subtype($DynamicType($r12), T$Microsoft.CodeAnalysis.Location());

}

else if ($r11 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r13 := local_0;
assume {:nonnull} $r13 != null;
$r14 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[$r13];

assume $Subtype($DynamicType($r14), T$Microsoft.CodeAnalysis.Location());
assume {:nonnull} $r12 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r12);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.ExternalFileLocation()))
{
call $r15 := Microsoft.CodeAnalysis.ExternalFileLocation.Equals$System.Object($r12,$r14);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.MetadataLocation()))
{
call $r15 := Microsoft.CodeAnalysis.MetadataLocation.Equals$System.Object($r12,$r14);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.NoLocation()))
{
call $r15 := Microsoft.CodeAnalysis.NoLocation.Equals$System.Object($r12,$r14);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.SourceLocation()))
{
call $r15 := Microsoft.CodeAnalysis.SourceLocation.Equals$System.Object($r12,$r14);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.XmlLocation()))
{
call $r15 := Microsoft.CodeAnalysis.XmlLocation.Equals$System.Object($r12,$r14);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Location()))
{
call $r15 := Microsoft.CodeAnalysis.Location.Equals$System.Object($r12,$r14);


}

else if ($r12 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r15 == false)
{
		goto L_0058;
}

$r17 := this;
assume {:nonnull} $r17 != null;
call $r18 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r17);


		if ($Exception != null)
		{
			return;
		}

$r19 := local_0;
assume {:nonnull} $r19 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r19);
if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r20 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r19);


}

else if ($r19 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r18 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r18);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r21 := Microsoft.CodeAnalysis.DiagnosticInfo.Equals$System.Object($r18,$r20);


}

else if ($r18 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r21 == false)
{
		goto L_0058;
}

$r22 := this;
assume {:nonnull} $r22 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r22);
if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r23 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_AdditionalLocations($r22);
assume $Subtype($DynamicType($r23), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r23 := Microsoft.CodeAnalysis.Diagnostic.get_AdditionalLocations($r22);
assume $Subtype($DynamicType($r23), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($r22 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r24 := local_0;
assume {:nonnull} $r24 != null;
call DynamicDispatch_Type_6 := System.Object.GetType($r24);
if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r25 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_AdditionalLocations($r24);
assume $Subtype($DynamicType($r25), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($Subtype(DynamicDispatch_Type_6, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r25 := Microsoft.CodeAnalysis.Diagnostic.get_AdditionalLocations($r24);
assume $Subtype($DynamicType($r25), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($r24 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r26 := System.Linq.Enumerable.SequenceEqual``1$System.Collections.Generic.IEnumerable$``0$$System.Collections.Generic.IEnumerable$``0$($r23,$r25);


		if ($Exception != null)
		{
			return;
		}

$result := $r26;
return ;
	L_0058:
$r16 := false;
$result := $r16;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.GetDebuggerDisplay(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var local_0 : Ref;
	var $r3 : Ref;
	var $r4 : int;
	var $r9 : Ref;
	var $r10 : int;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
local_0 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultIntValue;
$r9 := $defaultRef;
$r10 := $defaultIntValue;
$r13 := $defaultRef;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
$r5 := $defaultRef;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r11 := $defaultRef;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.DiagnosticInfo());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.get_Severity($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_0 := $r2;
$r3 := local_0;
$r4 := -2;
if ($r3 == $r4)
{
		goto L_0026;
}

$r9 := local_0;
$r10 := -1;
if ($r9 != $r10)
{
		goto L_0037;
}

$r13 := $string_literal_Unresolved###9###diagnostic###9###at###9###;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
$r14 := this;
assume {:nonnull} $r14 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r14);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r15 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location($r14);
assume $Subtype($DynamicType($r15), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r15 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r14);
assume $Subtype($DynamicType($r15), T$Microsoft.CodeAnalysis.Location());

}

else if ($r14 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r16 := System.String.Concat$System.Object$System.Object($r13,$r15);


		if ($Exception != null)
		{
			return;
		}

$result := $r16;
return ;
	L_0026:
$r5 := $string_literal_Void###9###diagnostic###9###at###9###;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := this;
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r6);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r7 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location($r6);
assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r7 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r6);
assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.Location());

}

else if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r8 := System.String.Concat$System.Object$System.Object($r5,$r7);


		if ($Exception != null)
		{
			return;
		}

$result := $r8;
return ;
	L_0037:
$r11 := this;
assume {:nonnull} $r11 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r11);
if ($Subtype(DynamicDispatch_Type_3, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r12 := Microsoft.CodeAnalysis.Diagnostic.ToString($r11);


}

else if ($r11 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r12;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.WithLocation$Microsoft.CodeAnalysis.Location(this : Ref,location : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : bool;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : bool;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r10 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.CodeAnalysis.Location());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r7 := $defaultRef;
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r7))) == T$System.String;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultBoolValue;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultBoolValue;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r10 := $defaultRef;
$r0 := location;
$r1 := null;
call $r2 := Microsoft.CodeAnalysis.Location.op_Equality$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r0,$r1);


		if ($Exception != null)
		{
			return;
		}

if ($r2 == false)
{
		goto L_0014;
}

$r7 := $string_literal_location;
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r7))) == T$System.String;
call $r8 := Alloc();
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r8)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r8 != null;
call System.ArgumentNullException.#ctor$System.String($r8,$r7);


		if ($Exception != null)
		{
			return;
		}

$r9 := $r8;
call $ExceptionType := System.Object.GetType($r9);
$Exception := $r9;
return;
	L_0014:
$r3 := location;
$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.Location());
call $r6 := Microsoft.CodeAnalysis.Location.op_Inequality$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r3,$r5);


		if ($Exception != null)
		{
			return;
		}

if ($r6 == false)
{
		goto L_0035;
}

$r11 := this;
assume {:nonnull} $r11 != null;
$r12 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._info[$r11];

assume $Subtype($DynamicType($r12), T$Microsoft.CodeAnalysis.DiagnosticInfo());
$r13 := location;
$r14 := this;
assume {:nonnull} $r14 != null;
$r15 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._isSuppressed[$r14];

call $r16 := Alloc();
assume $DynamicType($r16) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo();
assume $TypeConstructor($DynamicType($r16)) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo;
assume {:nonnull} $r16 != null;
call Microsoft.CodeAnalysis.DiagnosticWithInfo.#ctor$Microsoft.CodeAnalysis.DiagnosticInfo$Microsoft.CodeAnalysis.Location$System.Boolean($r16,$r12,$r13,$r15);


		if ($Exception != null)
		{
			return;
		}

$r17 := $r16;
$result := $r17;
return ;
	L_0035:
$r10 := this;
$result := $r10;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity(this : Ref,severity : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : bool;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
assume severity == null || $Subtype($DynamicType(severity), T$Microsoft.CodeAnalysis.DiagnosticSeverity());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultBoolValue;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Severity($r0);
assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r1 := Microsoft.CodeAnalysis.Diagnostic.get_Severity($r0);
assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r2 := severity;
if ($r1 == $r2)
{
		goto L_0027;
}

$r4 := this;
assume {:nonnull} $r4 != null;
call $r5 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := severity;
assume {:nonnull} $r5 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r5);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r7 := Microsoft.CodeAnalysis.DiagnosticInfo.GetInstanceWithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity($r5,$r6);


}

else if ($r5 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r8 := this;
assume {:nonnull} $r8 != null;
$r9 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[$r8];

assume $Subtype($DynamicType($r9), T$Microsoft.CodeAnalysis.Location());
$r10 := this;
assume {:nonnull} $r10 != null;
$r11 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._isSuppressed[$r10];

call $r12 := Alloc();
assume $DynamicType($r12) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo();
assume $TypeConstructor($DynamicType($r12)) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo;
assume {:nonnull} $r12 != null;
call Microsoft.CodeAnalysis.DiagnosticWithInfo.#ctor$Microsoft.CodeAnalysis.DiagnosticInfo$Microsoft.CodeAnalysis.Location$System.Boolean($r12,$r7,$r9,$r11);


		if ($Exception != null)
		{
			return;
		}

$r13 := $r12;
$result := $r13;
return ;
	L_0027:
$r3 := this;
$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.WithIsSuppressed$System.Boolean(this : Ref,isSuppressed : bool) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $r2 : bool;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : bool;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r2 := $defaultBoolValue;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultBoolValue;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_IsSuppressed($r0);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r1 := Microsoft.CodeAnalysis.Diagnostic.get_IsSuppressed($r0);


}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r2 := isSuppressed;
if ($r1 == $r2)
{
		goto L_001C;
}

$r4 := this;
assume {:nonnull} $r4 != null;
call $r5 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := this;
assume {:nonnull} $r6 != null;
$r7 := F$Microsoft.CodeAnalysis.DiagnosticWithInfo._location[$r6];

assume $Subtype($DynamicType($r7), T$Microsoft.CodeAnalysis.Location());
$r8 := isSuppressed;
call $r9 := Alloc();
assume $DynamicType($r9) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo();
assume $TypeConstructor($DynamicType($r9)) == T$Microsoft.CodeAnalysis.DiagnosticWithInfo;
assume {:nonnull} $r9 != null;
call Microsoft.CodeAnalysis.DiagnosticWithInfo.#ctor$Microsoft.CodeAnalysis.DiagnosticInfo$Microsoft.CodeAnalysis.Location$System.Boolean($r9,$r5,$r7,$r8);


		if ($Exception != null)
		{
			return;
		}

$r10 := $r9;
$result := $r10;
return ;
	L_001C:
$r3 := this;
$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.DiagnosticWithInfo.IsNotConfigurable(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.DiagnosticWithInfo());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Info($r0);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticInfo.IsNotConfigurable($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.get_Properties(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.MetadataReference.$Properties$k__BackingField[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.#ctor$Microsoft.CodeAnalysis.MetadataReferenceProperties(this : Ref,properties : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.MetadataReference.$Properties$k__BackingField[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := properties;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.MetadataReference.$Properties$k__BackingField[$r1] := $r2;

return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.get_Display(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r0 := null;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.get_IsUnresolved(this : Ref) returns ($result : bool)
{
	var $r0 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultBoolValue;
$r0 := false;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.WithAliases$System.Collections.Generic.IEnumerable$System.String$(this : Ref,aliases : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
assume aliases == null || $Subtype($DynamicType(aliases), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
$r1 := aliases;
call $r2 := System.Collections.Immutable.ImmutableArray.CreateRange``1$System.Collections.Generic.IEnumerable$``0$($r1);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
call $r3 := Microsoft.CodeAnalysis.MetadataReference.WithAliases$System.Collections.Immutable.ImmutableArray$System.String$($r0,$r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.WithEmbedInteropTypes$System.Boolean(this : Ref,value : bool) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var local_0 : Ref;
	var $r3 : Ref;
	var $r4 : bool;
	var $r5 : Ref;
	var $r6 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
local_0 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultBoolValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r0 := this;
$r1 := this;
assume {:nonnull} $r1 != null;
call $r2 := Microsoft.CodeAnalysis.MetadataReference.get_Properties($r1);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r2;
$r3 := local_0;
$r4 := value;
assume {:nonnull} $r3 != null;
call $r5 := Microsoft.CodeAnalysis.MetadataReferenceProperties.WithEmbedInteropTypes$System.Boolean($r3,$r4);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
call $r6 := Microsoft.CodeAnalysis.MetadataReference.WithProperties$Microsoft.CodeAnalysis.MetadataReferenceProperties($r0,$r5);


		if ($Exception != null)
		{
			return;
		}

$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.WithAliases$System.Collections.Immutable.ImmutableArray$System.String$(this : Ref,aliases : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var local_0 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
assume aliases == null || $Subtype($DynamicType(aliases), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
local_0 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r0 := this;
$r1 := this;
assume {:nonnull} $r1 != null;
call $r2 := Microsoft.CodeAnalysis.MetadataReference.get_Properties($r1);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r2;
$r3 := local_0;
$r4 := aliases;
assume {:nonnull} $r3 != null;
call $r5 := Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases$System.Collections.Immutable.ImmutableArray$System.String$($r3,$r4);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
call $r6 := Microsoft.CodeAnalysis.MetadataReference.WithProperties$Microsoft.CodeAnalysis.MetadataReferenceProperties($r0,$r5);


		if ($Exception != null)
		{
			return;
		}

$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.WithProperties$Microsoft.CodeAnalysis.MetadataReferenceProperties(this : Ref,properties : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $r7 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.MetadataReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r7 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r0 := properties;
$r1 := this;
assume {:nonnull} $r1 != null;
call $r2 := Microsoft.CodeAnalysis.MetadataReference.get_Properties($r1);


		if ($Exception != null)
		{
			return;
		}

call $r3 := Microsoft.CodeAnalysis.MetadataReferenceProperties.op_Equality$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.MetadataReferenceProperties($r0,$r2);


		if ($Exception != null)
		{
			return;
		}

if ($r3 == false)
{
		goto L_0010;
}

$r7 := this;
$result := $r7;
return ;
	L_0010:
$r4 := this;
$r5 := properties;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r4);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.CompilationReference()))
{
call $r6 := Microsoft.CodeAnalysis.CompilationReference.WithPropertiesImplReturningMetadataReference$Microsoft.CodeAnalysis.MetadataReferenceProperties($r4,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.MetadataReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.PortableExecutableReference()))
{
call $r6 := Microsoft.CodeAnalysis.PortableExecutableReference.WithPropertiesImplReturningMetadataReference$Microsoft.CodeAnalysis.MetadataReferenceProperties($r4,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.MetadataReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.UnresolvedMetadataReference()))
{
call $r6 := Microsoft.CodeAnalysis.UnresolvedMetadataReference.WithPropertiesImplReturningMetadataReference$Microsoft.CodeAnalysis.MetadataReferenceProperties($r4,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.MetadataReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.MetadataReference()))
{
call $r6 := Microsoft.CodeAnalysis.MetadataReference.WithPropertiesImplReturningMetadataReference$Microsoft.CodeAnalysis.MetadataReferenceProperties($r4,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.MetadataReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.MetadataReference()))
{
call $r6 := Microsoft.CodeAnalysis.MetadataReference.WithPropertiesImplReturningMetadataReference$Microsoft.CodeAnalysis.MetadataReferenceProperties($r4,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.CodeAnalysis.MetadataReference());

}

else if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r6;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromImage$System.Collections.Immutable.ImmutableArray$System.Byte$$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String(peImage : Ref,properties : Ref,documentation : Ref,filePath : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume peImage == null || $Subtype($DynamicType(peImage), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
assume documentation == null || $Subtype($DynamicType(documentation), T$Microsoft.CodeAnalysis.DocumentationProvider());
assume filePath == null || $Subtype($DynamicType(filePath), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r0 := peImage;
call $r1 := Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage$System.Collections.Immutable.ImmutableArray$System.Byte$($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := properties;
$r3 := documentation;
$r4 := filePath;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := null;
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.MetadataImageReference();
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.MetadataImageReference;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.MetadataImageReference.#ctor$Microsoft.CodeAnalysis.Metadata$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String$System.String($r6,$r1,$r2,$r3,$r4,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
$result := $r7;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromImage$System.Collections.Generic.IEnumerable$System.Byte$$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String(peImage : Ref,properties : Ref,documentation : Ref,filePath : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume peImage == null || $Subtype($DynamicType(peImage), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
assume documentation == null || $Subtype($DynamicType(documentation), T$Microsoft.CodeAnalysis.DocumentationProvider());
assume filePath == null || $Subtype($DynamicType(filePath), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r0 := peImage;
call $r1 := Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage$System.Collections.Generic.IEnumerable$System.Byte$($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := properties;
$r3 := documentation;
$r4 := filePath;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := null;
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.MetadataImageReference();
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.MetadataImageReference;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.MetadataImageReference.#ctor$Microsoft.CodeAnalysis.Metadata$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String$System.String($r6,$r1,$r2,$r3,$r4,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
$result := $r7;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromStream$System.IO.Stream$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String(peStream : Ref,properties : Ref,documentation : Ref,filePath : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : int;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $temp_var_0 : Ref;

assume peStream == null || $Subtype($DynamicType(peStream), T$Microsoft.Cci.DummyTypeReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
assume documentation == null || $Subtype($DynamicType(documentation), T$Microsoft.CodeAnalysis.DocumentationProvider());
assume filePath == null || $Subtype($DynamicType(filePath), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultIntValue;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r0 := peStream;
$r1 := 4;
$temp_var_0 := Int2Union($r1);
call $r2 := Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream$System.IO.Stream$System.Reflection.PortableExecutable.PEStreamOptions($r0,$temp_var_0);


		if ($Exception != null)
		{
			return;
		}

$r3 := properties;
$r4 := documentation;
$r5 := filePath;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := null;
call $r7 := Alloc();
assume $DynamicType($r7) == T$Microsoft.CodeAnalysis.MetadataImageReference();
assume $TypeConstructor($DynamicType($r7)) == T$Microsoft.CodeAnalysis.MetadataImageReference;
assume {:nonnull} $r7 != null;
call Microsoft.CodeAnalysis.MetadataImageReference.#ctor$Microsoft.CodeAnalysis.Metadata$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String$System.String($r7,$r2,$r3,$r4,$r5,$r6);


		if ($Exception != null)
		{
			return;
		}

$r8 := $r7;
$result := $r8;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromFile$System.String$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider(path : Ref,properties : Ref,documentation : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $r3 : Ref;
	var local_0 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : int;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $temp_var_0 : Ref;

assume path == null || $Subtype($DynamicType(path), T$Microsoft.Cci.DummyTypeReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
assume documentation == null || $Subtype($DynamicType(documentation), T$Microsoft.CodeAnalysis.DocumentationProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r3 := $defaultRef;
local_0 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultIntValue;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r0 := path;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
call $r1 := Roslyn.Utilities.FileUtilities.OpenFileStream$System.String($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := 4;
$temp_var_0 := Int2Union($r2);
call $r3 := Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream$System.IO.Stream$System.Reflection.PortableExecutable.PEStreamOptions($r1,$temp_var_0);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r3;
$r4 := properties;
assume {:nonnull} $r4 != null;
call $r5 := Microsoft.CodeAnalysis.MetadataReferenceProperties.get_Kind($r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := 1;
if ($r5 != $r6)
{
		goto L_0022;
}

$r16 := local_0;
$r17 := properties;
$r18 := documentation;
$r19 := path;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := null;
call $r21 := Alloc();
assume $DynamicType($r21) == T$Microsoft.CodeAnalysis.MetadataImageReference();
assume $TypeConstructor($DynamicType($r21)) == T$Microsoft.CodeAnalysis.MetadataImageReference;
assume {:nonnull} $r21 != null;
call Microsoft.CodeAnalysis.MetadataImageReference.#ctor$Microsoft.CodeAnalysis.Metadata$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String$System.String($r21,$r16,$r17,$r18,$r19,$r20);


		if ($Exception != null)
		{
			return;
		}

$r22 := $r21;
$result := $r22;
return ;
	L_0022:
$r7 := local_0;
$r8 := path;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
call $r9 := Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile$Microsoft.CodeAnalysis.ModuleMetadata$System.String($r7,$r8);


		if ($Exception != null)
		{
			return;
		}

$r10 := properties;
$r11 := documentation;
$r12 := path;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r13 := null;
call $r14 := Alloc();
assume $DynamicType($r14) == T$Microsoft.CodeAnalysis.MetadataImageReference();
assume $TypeConstructor($DynamicType($r14)) == T$Microsoft.CodeAnalysis.MetadataImageReference;
assume {:nonnull} $r14 != null;
call Microsoft.CodeAnalysis.MetadataImageReference.#ctor$Microsoft.CodeAnalysis.Metadata$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String$System.String($r14,$r9,$r10,$r11,$r12,$r13);


		if ($Exception != null)
		{
			return;
		}

$r15 := $r14;
$result := $r15;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly$System.Reflection.Assembly(assembly : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume assembly == null || $Subtype($DynamicType(assembly), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := assembly;
call $r1 := Microsoft.CodeAnalysis.MetadataReference.CreateFromAssemblyInternal$System.Reflection.Assembly($r0);


		if ($Exception != null)
		{
			return;
		}

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromAssemblyInternal$System.Reflection.Assembly(assembly : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize0 : int;

assume assembly == null || $Subtype($DynamicType(assembly), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := assembly;
$r1 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r2 := local_0;
$r3 := null;
call $r4 := Microsoft.CodeAnalysis.MetadataReference.CreateFromAssemblyInternal$System.Reflection.Assembly$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider($r0,$r2,$r3);


		if ($Exception != null)
		{
			return;
		}

$result := $r4;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly$System.Reflection.Assembly$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider(assembly : Ref,properties : Ref,documentation : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume assembly == null || $Subtype($DynamicType(assembly), T$Microsoft.Cci.DummyTypeReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
assume documentation == null || $Subtype($DynamicType(documentation), T$Microsoft.CodeAnalysis.DocumentationProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r0 := assembly;
$r1 := properties;
$r2 := documentation;
call $r3 := Microsoft.CodeAnalysis.MetadataReference.CreateFromAssemblyInternal$System.Reflection.Assembly$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider($r0,$r1,$r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.CreateFromAssemblyInternal$System.Reflection.Assembly$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider(assembly : Ref,properties : Ref,documentation : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var local_0 : Ref;
	var $r13 : Ref;
	var $r14 : bool;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : bool;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r26 : Ref;
	var $r27 : Ref;
	var $r28 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume assembly == null || $Subtype($DynamicType(assembly), T$Microsoft.Cci.DummyTypeReference());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.CodeAnalysis.MetadataReferenceProperties());
assume documentation == null || $Subtype($DynamicType(documentation), T$Microsoft.CodeAnalysis.DocumentationProvider());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r15 := $defaultRef;
assume $DynamicType($r15) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r15))) == T$System.String;
$r16 := $defaultRef;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
local_0 := $defaultRef;
assume $DynamicType(local_0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_0))) == T$System.String;
$r13 := $defaultRef;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
$r14 := $defaultBoolValue;
$r29 := $defaultRef;
assume $DynamicType($r29) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r29))) == T$System.String;
$r30 := $defaultRef;
$r31 := $defaultRef;
$r19 := $defaultRef;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
$r20 := $defaultRef;
$r21 := $defaultBoolValue;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultRef;
assume $DynamicType($r25) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r25))) == T$System.String;
$r26 := $defaultRef;
$r27 := $defaultRef;
$r28 := $defaultRef;
$r0 := assembly;
if ($r0 != null)
{
		goto L_000E;
}

$r3 := $string_literal_assembly;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
call $r4 := Alloc();
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r4)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r4 != null;
call System.ArgumentNullException.#ctor$System.String($r4,$r3);


		if ($Exception != null)
		{
			return;
		}

$r5 := $r4;
call $ExceptionType := System.Object.GetType($r5);
$Exception := $r5;
return;
	L_000E:
$r1 := assembly;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r2 == false)
{
		goto L_0021;
}

call $r8 := Microsoft.CodeAnalysis.CodeAnalysisResources.get_CantCreateReferenceToDynamicAssembly();


		if ($Exception != null)
		{
			return;
		}

call $r9 := Alloc();
assume $DynamicType($r9) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r9)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r9 != null;
call System.NotSupportedException.#ctor$System.String($r9,$r8);


		if ($Exception != null)
		{
			return;
		}

$r10 := $r9;
call $ExceptionType := System.Object.GetType($r10);
$Exception := $r10;
return;
	L_0021:
$r6 := properties;
assume {:nonnull} $r6 != null;
call $r7 := Microsoft.CodeAnalysis.MetadataReferenceProperties.get_Kind($r6);


		if ($Exception != null)
		{
			return;
		}

if ($r7 == 0)
{
		goto L_003A;
}

call $r15 := Microsoft.CodeAnalysis.CodeAnalysisResources.get_CantCreateModuleReferenceToAssembly();


		if ($Exception != null)
		{
			return;
		}

$r16 := $string_literal_properties;
assume $DynamicType($r16) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r16))) == T$System.String;
call $r17 := Alloc();
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r17)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r17 != null;
call System.ArgumentException.#ctor$System.String$System.String($r17,$r15,$r16);


		if ($Exception != null)
		{
			return;
		}

$r18 := $r17;
call $ExceptionType := System.Object.GetType($r18);
$Exception := $r18;
return;
	L_003A:
$r11 := assembly;
call $r12 := Roslyn.Utilities.CorLightup.Desktop.GetAssemblyLocation$System.Reflection.Assembly($r11);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r12;
assume $DynamicType(local_0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_0))) == T$System.String;
$r13 := local_0;
assume $DynamicType($r13) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r13))) == T$System.String;
call $r14 := System.String.IsNullOrEmpty$System.String($r13);


		if ($Exception != null)
		{
			return;
		}

if ($r14 == false)
{
		goto L_0054;
}

call $r29 := Microsoft.CodeAnalysis.CodeAnalysisResources.get_CantCreateReferenceToAssemblyWithoutLocation();


		if ($Exception != null)
		{
			return;
		}

call $r30 := Alloc();
assume $DynamicType($r30) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r30)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r30 != null;
call System.NotSupportedException.#ctor$System.String($r30,$r29);


		if ($Exception != null)
		{
			return;
		}

$r31 := $r30;
call $ExceptionType := System.Object.GetType($r31);
$Exception := $r31;
return;
	L_0054:
$r19 := local_0;
assume $DynamicType($r19) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r19))) == T$System.String;
call $r20 := Roslyn.Utilities.FileUtilities.OpenFileStream$System.String($r19);


		if ($Exception != null)
		{
			return;
		}

$r21 := false;
call $r22 := Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream$System.IO.Stream$System.Boolean($r20,$r21);


		if ($Exception != null)
		{
			return;
		}

$r23 := properties;
$r24 := documentation;
$r25 := local_0;
assume $DynamicType($r25) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r25))) == T$System.String;
$r26 := null;
call $r27 := Alloc();
assume $DynamicType($r27) == T$Microsoft.CodeAnalysis.MetadataImageReference();
assume $TypeConstructor($DynamicType($r27)) == T$Microsoft.CodeAnalysis.MetadataImageReference;
assume {:nonnull} $r27 != null;
call Microsoft.CodeAnalysis.MetadataImageReference.#ctor$Microsoft.CodeAnalysis.Metadata$Microsoft.CodeAnalysis.MetadataReferenceProperties$Microsoft.CodeAnalysis.DocumentationProvider$System.String$System.String($r27,$r22,$r23,$r24,$r25,$r26);


		if ($Exception != null)
		{
			return;
		}

$r28 := $r27;
$result := $r28;
return ;

}

 

procedure  Microsoft.CodeAnalysis.MetadataReference.HasMetadata$System.Reflection.Assembly(assembly : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : bool;
	var $r6 : bool;
	var $r7 : bool;
	var $r2 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume assembly == null || $Subtype($DynamicType(assembly), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
$r5 := $defaultBoolValue;
$r6 := $defaultBoolValue;
$r7 := $defaultBoolValue;
$r2 := $defaultBoolValue;
$r0 := assembly;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r1 == true)
{
		goto L_0017;
}

$r3 := assembly;
call $r4 := Roslyn.Utilities.CorLightup.Desktop.GetAssemblyLocation$System.Reflection.Assembly($r3);


		if ($Exception != null)
		{
			return;
		}

call $r5 := System.String.IsNullOrEmpty$System.String($r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := false;
$r7 := $r5 == $r6;
$result := $r7;
return ;
	L_0017:
$r2 := false;
$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.NoLocation.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.NoLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Location.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.NoLocation.get_Kind(this : Ref) returns ($result : Ref)
{
	var $r0 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.NoLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
$r0 := 0;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.NoLocation.Equals$System.Object(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.NoLocation());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r0 := this;
$r1 := obj;
$r2 := $r0 == $r1;
$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.NoLocation.GetHashCode(this : Ref) returns ($result : int)
{
	var $r0 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.NoLocation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultIntValue;
$r0 := 373847894;
$result := $r0;
return ;

}

 

procedure  Microsoft.CodeAnalysis.NoLocation.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
F$Microsoft.CodeAnalysis.NoLocation.Singleton := $defaultRef;
call $r0 := Alloc();
assume $DynamicType($r0) == T$Microsoft.CodeAnalysis.NoLocation();
assume $TypeConstructor($DynamicType($r0)) == T$Microsoft.CodeAnalysis.NoLocation;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.NoLocation.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := $r0;
F$Microsoft.CodeAnalysis.NoLocation.Singleton := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.CreateDiagnosticDescription$System.Exception(exception : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var local_1 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r13 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r3 : Ref;
	var $r18 : Ref;
	var $r19 : int;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : int;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r26 : int;
	var $r27 : Ref;
	var $r28 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r17 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;

assume exception == null || $Subtype($DynamicType(exception), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
local_1 := $defaultRef;
$r6 := $defaultRef;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r13 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
assume $DynamicType($r12) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r12))) == T$System.String;
$r3 := $defaultRef;
$r18 := $defaultRef;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
$r19 := $defaultIntValue;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultIntValue;
$r23 := $defaultRef;
$r24 := $defaultRef;
assume $DynamicType($r24) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r24))) == T$System.String;
$r25 := $defaultRef;
$r26 := $defaultIntValue;
$r27 := $defaultRef;
$r28 := $defaultRef;
$r29 := $defaultRef;
assume $DynamicType($r29) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r29))) == T$System.String;
$r30 := $defaultRef;
assume $DynamicType($r30) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r30))) == T$System.String;
$r17 := $defaultRef;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$r0 := exception;
$r1 := $As($r0,T$Microsoft.Cci.DummyTypeReference());
local_0 := $r1;
$r2 := local_0;
if ($r2 == null)
{
		goto L_0046;
}

$r4 := local_0;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r4);
if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_1 := $r5;
$r6 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.s_separator;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
$r7 := local_1;
assume {:nonnull} $r7 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r7);
if ($r7 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r9 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.__9__1_0;
$r10 := $r9;
if ($r10 != null)
{
		goto L_003B;
}

$r13 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.__9;
call DynamicDispatch_Type_2 := System.Object.GetType($r13);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c()))
{
call $r15 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.$CreateDiagnosticDescription$b__1_0$System.Exception,$r13,Type0());
		if ($Exception != null)
		{
			return;
		}


}

else if ($r13 != null)
{
assert false;
}

$r9 := $r15;
$r16 := $r9;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.__9__1_0 := $r16;
	L_003B:
call $r11 := System.Linq.Enumerable.Select``2$System.Collections.Generic.IEnumerable$``0$$System.Func$``0$``1$($r8,$r9);


		if ($Exception != null)
		{
			return;
		}

call $r12 := System.String.Join$System.String$System.Collections.Generic.IEnumerable$System.String$($r6,$r11);


		if ($Exception != null)
		{
			return;
		}

$result := $r12;
return ;
	L_0046:
$r3 := exception;
if ($r3 == null)
{
		goto L_0071;
}

$r18 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.s_separator;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
$r19 := 2;
call $r20 := Alloc();
assume $ArrayLength($r20) == $r19;
assume (forall $tmp1: int :: $ArrayContents[$r20][$tmp1] == null);
$r21 := $r20;
$r22 := 0;
$r23 := exception;
call $r24 := Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.GetExceptionMessage$System.Exception($r23);


		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r21,$r22,$r24);
$r25 := $r20;
$r26 := 1;
$r27 := exception;
assume {:nonnull} $r27 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r27);
if ($r27 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r29 := Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.CreateDiagnosticDescription$System.Exception($r28);


		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r25,$r26,$r29);
call $r30 := System.String.Join$System.String$System.Stringarray($r18,$r20);


		if ($Exception != null)
		{
			return;
		}

$result := $r30;
return ;
	L_0071:
$r17 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$result := $r17;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.GetExceptionMessage$System.Exception(exception : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var local_1 : Ref;
	var $r5 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r8 : Ref;
	var $r9 : int;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : int;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : int;
	var $r17 : Ref;
	var $r18 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var tempVarStringBinOp_1 : bool;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;

assume exception == null || $Subtype($DynamicType(exception), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r7))) == T$System.String;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume $DynamicType($r4) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r4))) == T$System.String;
local_1 := $defaultRef;
assume $DynamicType(local_1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_1))) == T$System.String;
$r5 := $defaultRef;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r19 := $defaultRef;
$r20 := $defaultRef;
assume $DynamicType($r20) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r20))) == T$System.String;
$r8 := $defaultRef;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := $defaultIntValue;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultIntValue;
$r13 := $defaultRef;
$r14 := $defaultRef;
assume $DynamicType($r14) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r14))) == T$System.String;
$r15 := $defaultRef;
$r16 := $defaultIntValue;
$r17 := $defaultRef;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
$r18 := $defaultRef;
assume $DynamicType($r18) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r18))) == T$System.String;
$r0 := exception;
$r1 := $As($r0,T$Microsoft.Cci.DummyTypeReference());
local_0 := $r1;
$r2 := local_0;
if ($r2 != null)
{
		goto L_0011;
}

$r6 := exception;
assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r6);
if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r7;
return ;
	L_0011:
$r3 := local_0;
call $r4 := Roslyn.Utilities.DesktopShim.FileNotFoundException.TryGetFusionLog$System.Object($r3);


		if ($Exception != null)
		{
			return;
		}

local_1 := $r4;
assume $DynamicType(local_1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType(local_1))) == T$System.String;
$r5 := local_1;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
call tempVarStringBinOp_1 := System.String.op_Inequality$System.String$System.String($r5,$string_literal_NullValue);
if (tempVarStringBinOp_1)
{
		goto L_0022;
}

$r19 := exception;
assume {:nonnull} $r19 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r19);
if ($r19 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r20;
return ;
	L_0022:
$r8 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.s_separator;
assume $DynamicType($r8) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r8))) == T$System.String;
$r9 := 2;
call $r10 := Alloc();
assume $ArrayLength($r10) == $r9;
assume (forall $tmp1: int :: $ArrayContents[$r10][$tmp1] == null);
$r11 := $r10;
$r12 := 0;
$r13 := local_0;
assume {:nonnull} $r13 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r13);
if ($r13 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $WriteArrayElement($r11,$r12,$r14);
$r15 := $r10;
$r16 := 1;
$r17 := local_1;
assume $DynamicType($r17) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r17))) == T$System.String;
call $WriteArrayElement($r15,$r16,$r17);
call $r18 := System.String.Join$System.String$System.Stringarray($r8,$r10);


		if ($Exception != null)
		{
			return;
		}

$result := $r18;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
assume $DynamicType($r0) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r0))) == T$System.String;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.s_separator := $defaultRef;
call $r0 := System.Environment.get_NewLine();


		if ($Exception != null)
		{
			return;
		}

$r1 := $string_literal_#8##8##8##8##8#;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
call $r2 := System.Environment.get_NewLine();


		if ($Exception != null)
		{
			return;
		}

call $r3 := System.String.Concat$System.String$System.String$System.String($r0,$r1,$r2);


		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.s_separator := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.__9 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.__9__1_0 := $defaultRef;
call $r0 := Alloc();
assume $DynamicType($r0) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c();
assume $TypeConstructor($DynamicType($r0)) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := $r0;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.__9 := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c.$CreateDiagnosticDescription$b__1_0$System.Exception(this : Ref,e : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.$$c());
assume e == null || $Subtype($DynamicType(e), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r0 := e;
call $r1 := Microsoft.CodeAnalysis.Diagnostics.AnalyzerExceptionDescriptionBuilder.GetExceptionMessage$System.Exception($r0);


		if ($Exception != null)
		{
			return;
		}

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction.#ctor$System.Action$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext$$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(this : Ref,action : Ref,analyzer : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext()));
assume analyzer == null || $Subtype($DynamicType(analyzer), T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction._action[this] := $defaultRef;

$r0 := this;
$r1 := analyzer;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction.#ctor$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer($r0,$r1);


		if ($Exception != null)
		{
			return;
		}

$r2 := this;
$r3 := action;
assume {:nonnull} $r2 != null;
F$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction._action[$r2] := $r3;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction.get_Action(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction._action[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1.get_CodeBlockEndActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._codeBlockEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1.get_SyntaxNodeActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._syntaxNodeActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum())));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._codeBlockEndActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._syntaxNodeActions[this] := $defaultRef;

$r0 := this;
$r1 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._codeBlockEndActions[$r0] := $r1;

$r2 := this;
$r3 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r2 != null;
F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._syntaxNodeActions[$r2] := $r3;

$r4 := this;
assume {:nonnull} $r4 != null;
call System.Object.#ctor($r4);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1.RegisterCodeBlockEndAction$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$System.Action$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext$(this : Ref,analyzer : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum()));
assume analyzer == null || $Subtype($DynamicType(analyzer), T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._codeBlockEndActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$r3 := action;
$r4 := analyzer;
call $r5 := Alloc();
assume $DynamicType($r5) == T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction();
assume $TypeConstructor($DynamicType($r5)) == T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction;
assume {:nonnull} $r5 != null;
call Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction.#ctor$System.Action$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalysisContext$$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer($r5,$r3,$r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := $r5;
assume {:nonnull} $r2 != null;
call $r7 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r6);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._codeBlockEndActions[$r0] := $r7;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1.RegisterSyntaxNodeAction$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$System.Action$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext$$System.Collections.Immutable.ImmutableArray$`0$(this : Ref,analyzer : Ref,action : Ref,syntaxKinds : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1(T$TLanguageKindEnum()));
assume analyzer == null || $Subtype($DynamicType(analyzer), T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext()));
assume syntaxKinds == null || $Subtype($DynamicType(syntaxKinds), T$Microsoft.Cci.DummyTypeReference(T$TLanguageKindEnum()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._syntaxNodeActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum())));
$r3 := action;
$r4 := syntaxKinds;
$r5 := analyzer;
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum());
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1.#ctor$System.Action$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext$$System.Collections.Immutable.ImmutableArray$`0$$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer($r6,$r3,$r4,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
assume {:nonnull} $r2 != null;
call $r8 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r7);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.HostCodeBlockStartAnalysisScope`1._syntaxNodeActions[$r0] := $r8;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r26 : Ref;
	var $r27 : Ref;
	var $r28 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultRef;
$r26 := $defaultRef;
$r27 := $defaultRef;
$r28 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[this] := $defaultRef;

$r0 := this;
$r1 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r0] := $r1;

$r2 := this;
$r3 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r2 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r2] := $r3;

$r4 := this;
$r5 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r4 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r4] := $r5;

$r6 := this;
$r7 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r6 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r6] := $r7;

$r8 := this;
$r9 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r8 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r8] := $r9;

$r10 := this;
$r11 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r10 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r10] := $r11;

$r12 := this;
$r13 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r12 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r12] := $r13;

$r14 := this;
$r15 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r14 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r14] := $r15;

$r16 := this;
$r17 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r16 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r16] := $r17;

$r18 := this;
$r19 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r18 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r18] := $r19;

$r20 := this;
$r21 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r20 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r20] := $r21;

$r22 := this;
$r23 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r22 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r22] := $r23;

$r24 := this;
$r25 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r24 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r24] := $r25;

$r26 := this;
$r27 := F$Microsoft.Cci.DummyTypeReference.Empty;
assume {:nonnull} $r26 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r26] := $r27;

$r28 := this;
assume {:nonnull} $r28 != null;
call System.Object.#ctor($r28);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CompilationStartActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CompilationEndActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CompilationActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SyntaxTreeActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SemanticModelActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SymbolActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SyntaxNodeActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationBlockStartActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationBlockEndActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationBlockActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CodeBlockStartActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CodeBlockEndActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CodeBlockActionsCount(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.get_Length($r1);


		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CompilationStartActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CompilationEndActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CompilationActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SyntaxTreeActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SemanticModelActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_SymbolActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CodeBlockEndActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_CodeBlockActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.GetCodeBlockStartActions``1(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.OfType``1($r1);


		if ($Exception != null)
		{
			return;
		}

call $r3 := System.Collections.Immutable.ImmutableArray.ToImmutableArray``1$System.Collections.Generic.IEnumerable$``0$($r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.GetSyntaxNodeActions``1(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r0 := this;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
assume {:nonnull} $r1 != null;
call $r2 := System.Collections.Immutable.ImmutableArray`1.OfType``1($r1);


		if ($Exception != null)
		{
			return;
		}

call $r3 := System.Collections.Immutable.ImmutableArray.ToImmutableArray``1$System.Collections.Generic.IEnumerable$``0$($r2);


		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationBlockActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationBlockEndActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationBlockStartActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.get_OperationActions(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddCompilationStartAction$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddCompilationEndAction$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddCompilationAction$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddSyntaxTreeAction$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddSemanticModelAction$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddSymbolAction$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddCodeBlockStartAction``1$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction$``0$(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalyzerAction`1(T$TLanguageKindEnum()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddCodeBlockEndAction$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddCodeBlockAction$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddSyntaxNodeAction``1$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction$``0$(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1(T$TLanguageKindEnum()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddOperationBlockStartAction$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddOperationBlockAction$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddOperationBlockEndAction$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.AddOperationAction$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction(this : Ref,action : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume action == null || $Subtype($DynamicType(action), T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r0 := this;
$r1 := this;
$r2 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r1];

assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction()));
$r3 := action;
assume {:nonnull} $r2 != null;
call $r4 := System.Collections.Immutable.ImmutableArray`1.Add$`0($r2,$r3);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r0] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.Append$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions(this : Ref,otherActions : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r87 : Ref;
	var $r88 : Ref;
	var $r89 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var $r26 : Ref;
	var $r27 : Ref;
	var $r28 : Ref;
	var $r29 : Ref;
	var $r30 : Ref;
	var $r31 : Ref;
	var $r32 : Ref;
	var $r33 : Ref;
	var $r34 : Ref;
	var $r35 : Ref;
	var $r36 : Ref;
	var $r37 : Ref;
	var $r38 : Ref;
	var $r39 : Ref;
	var $r40 : Ref;
	var $r41 : Ref;
	var $r42 : Ref;
	var $r43 : Ref;
	var $r44 : Ref;
	var $r45 : Ref;
	var $r46 : Ref;
	var $r47 : Ref;
	var $r48 : Ref;
	var $r49 : Ref;
	var $r50 : Ref;
	var $r51 : Ref;
	var $r52 : Ref;
	var $r53 : Ref;
	var $r54 : Ref;
	var $r55 : Ref;
	var $r56 : Ref;
	var $r57 : Ref;
	var $r58 : Ref;
	var $r59 : Ref;
	var $r60 : Ref;
	var $r61 : Ref;
	var $r62 : Ref;
	var $r63 : Ref;
	var $r64 : Ref;
	var $r65 : Ref;
	var $r66 : Ref;
	var $r67 : Ref;
	var $r68 : Ref;
	var $r69 : Ref;
	var $r70 : Ref;
	var $r71 : Ref;
	var $r72 : Ref;
	var $r73 : Ref;
	var $r74 : Ref;
	var $r75 : Ref;
	var $r76 : Ref;
	var $r77 : Ref;
	var $r78 : Ref;
	var $r79 : Ref;
	var $r80 : Ref;
	var $r81 : Ref;
	var $r82 : Ref;
	var $r83 : Ref;
	var $r84 : Ref;
	var $r85 : Ref;
	var $r86 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
assume otherActions == null || $Subtype($DynamicType(otherActions), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r87 := $defaultRef;
assume $DynamicType($r87) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r87))) == T$System.String;
$r88 := $defaultRef;
$r89 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultRef;
$r26 := $defaultRef;
$r27 := $defaultRef;
$r28 := $defaultRef;
$r29 := $defaultRef;
$r30 := $defaultRef;
$r31 := $defaultRef;
$r32 := $defaultRef;
$r33 := $defaultRef;
$r34 := $defaultRef;
$r35 := $defaultRef;
$r36 := $defaultRef;
$r37 := $defaultRef;
$r38 := $defaultRef;
$r39 := $defaultRef;
$r40 := $defaultRef;
$r41 := $defaultRef;
$r42 := $defaultRef;
$r43 := $defaultRef;
$r44 := $defaultRef;
$r45 := $defaultRef;
$r46 := $defaultRef;
$r47 := $defaultRef;
$r48 := $defaultRef;
$r49 := $defaultRef;
$r50 := $defaultRef;
$r51 := $defaultRef;
$r52 := $defaultRef;
$r53 := $defaultRef;
$r54 := $defaultRef;
$r55 := $defaultRef;
$r56 := $defaultRef;
$r57 := $defaultRef;
$r58 := $defaultRef;
$r59 := $defaultRef;
$r60 := $defaultRef;
$r61 := $defaultRef;
$r62 := $defaultRef;
$r63 := $defaultRef;
$r64 := $defaultRef;
$r65 := $defaultRef;
$r66 := $defaultRef;
$r67 := $defaultRef;
$r68 := $defaultRef;
$r69 := $defaultRef;
$r70 := $defaultRef;
$r71 := $defaultRef;
$r72 := $defaultRef;
$r73 := $defaultRef;
$r74 := $defaultRef;
$r75 := $defaultRef;
$r76 := $defaultRef;
$r77 := $defaultRef;
$r78 := $defaultRef;
$r79 := $defaultRef;
$r80 := $defaultRef;
$r81 := $defaultRef;
$r82 := $defaultRef;
$r83 := $defaultRef;
$r84 := $defaultRef;
$r85 := $defaultRef;
$r86 := $defaultRef;
$r0 := otherActions;
if ($r0 != null)
{
		goto L_000E;
}

$r87 := $string_literal_otherActions;
assume $DynamicType($r87) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r87))) == T$System.String;
call $r88 := Alloc();
assume $DynamicType($r88) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($r88)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r88 != null;
call System.ArgumentNullException.#ctor$System.String($r88,$r87);


		if ($Exception != null)
		{
			return;
		}

$r89 := $r88;
call $ExceptionType := System.Object.GetType($r89);
$Exception := $r89;
return;
	L_000E:
call $r1 := Alloc();
assume $DynamicType($r1) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions();
assume $TypeConstructor($DynamicType($r1)) == T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions;
assume {:nonnull} $r1 != null;
call Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions.#ctor($r1);


		if ($Exception != null)
		{
			return;
		}

$r2 := $r1;
$r3 := $r2;
$r4 := this;
$r5 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction()));
$r6 := otherActions;
assume {:nonnull} $r6 != null;
$r7 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r6];

assume $Subtype($DynamicType($r7), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalyzerAction()));
assume {:nonnull} $r5 != null;
call $r8 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r5,$r7);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r3 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationStartActions[$r3] := $r8;

$r9 := $r2;
$r10 := this;
$r11 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r10];

assume $Subtype($DynamicType($r11), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
$r12 := otherActions;
assume {:nonnull} $r12 != null;
$r13 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r12];

assume $Subtype($DynamicType($r13), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
assume {:nonnull} $r11 != null;
call $r14 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r11,$r13);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r9 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationEndActions[$r9] := $r14;

$r15 := $r2;
$r16 := this;
$r17 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r16];

assume $Subtype($DynamicType($r17), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
$r18 := otherActions;
assume {:nonnull} $r18 != null;
$r19 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r18];

assume $Subtype($DynamicType($r19), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalyzerAction()));
assume {:nonnull} $r17 != null;
call $r20 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r17,$r19);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r15 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._compilationActions[$r15] := $r20;

$r21 := $r2;
$r22 := this;
$r23 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r22];

assume $Subtype($DynamicType($r23), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction()));
$r24 := otherActions;
assume {:nonnull} $r24 != null;
$r25 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r24];

assume $Subtype($DynamicType($r25), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalyzerAction()));
assume {:nonnull} $r23 != null;
call $r26 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r23,$r25);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r21 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxTreeActions[$r21] := $r26;

$r27 := $r2;
$r28 := this;
$r29 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r28];

assume $Subtype($DynamicType($r29), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction()));
$r30 := otherActions;
assume {:nonnull} $r30 != null;
$r31 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r30];

assume $Subtype($DynamicType($r31), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalyzerAction()));
assume {:nonnull} $r29 != null;
call $r32 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r29,$r31);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r27 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._semanticModelActions[$r27] := $r32;

$r33 := $r2;
$r34 := this;
$r35 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r34];

assume $Subtype($DynamicType($r35), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction()));
$r36 := otherActions;
assume {:nonnull} $r36 != null;
$r37 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r36];

assume $Subtype($DynamicType($r37), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.SymbolAnalyzerAction()));
assume {:nonnull} $r35 != null;
call $r38 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r35,$r37);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r33 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._symbolActions[$r33] := $r38;

$r39 := $r2;
$r40 := this;
$r41 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r40];

assume $Subtype($DynamicType($r41), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
$r42 := otherActions;
assume {:nonnull} $r42 != null;
$r43 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r42];

assume $Subtype($DynamicType($r43), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
assume {:nonnull} $r41 != null;
call $r44 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r41,$r43);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r39 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockStartActions[$r39] := $r44;

$r45 := $r2;
$r46 := this;
$r47 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r46];

assume $Subtype($DynamicType($r47), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$r48 := otherActions;
assume {:nonnull} $r48 != null;
$r49 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r48];

assume $Subtype($DynamicType($r49), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
assume {:nonnull} $r47 != null;
call $r50 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r47,$r49);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r45 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockEndActions[$r45] := $r50;

$r51 := $r2;
$r52 := this;
$r53 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r52];

assume $Subtype($DynamicType($r53), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
$r54 := otherActions;
assume {:nonnull} $r54 != null;
$r55 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r54];

assume $Subtype($DynamicType($r55), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.CodeBlockAnalyzerAction()));
assume {:nonnull} $r53 != null;
call $r56 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r53,$r55);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r51 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._codeBlockActions[$r51] := $r56;

$r57 := $r2;
$r58 := this;
$r59 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r58];

assume $Subtype($DynamicType($r59), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
$r60 := otherActions;
assume {:nonnull} $r60 != null;
$r61 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r60];

assume $Subtype($DynamicType($r61), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAction()));
assume {:nonnull} $r59 != null;
call $r62 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r59,$r61);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r57 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._syntaxNodeActions[$r57] := $r62;

$r63 := $r2;
$r64 := this;
$r65 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r64];

assume $Subtype($DynamicType($r65), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction()));
$r66 := otherActions;
assume {:nonnull} $r66 != null;
$r67 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r66];

assume $Subtype($DynamicType($r67), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction()));
assume {:nonnull} $r65 != null;
call $r68 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r65,$r67);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r63 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationActions[$r63] := $r68;

$r69 := $r2;
$r70 := this;
$r71 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r70];

assume $Subtype($DynamicType($r71), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction()));
$r72 := otherActions;
assume {:nonnull} $r72 != null;
$r73 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r72];

assume $Subtype($DynamicType($r73), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockStartAnalyzerAction()));
assume {:nonnull} $r71 != null;
call $r74 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r71,$r73);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r69 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockStartActions[$r69] := $r74;

$r75 := $r2;
$r76 := this;
$r77 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r76];

assume $Subtype($DynamicType($r77), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
$r78 := otherActions;
assume {:nonnull} $r78 != null;
$r79 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r78];

assume $Subtype($DynamicType($r79), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
assume {:nonnull} $r77 != null;
call $r80 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r77,$r79);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r75 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockEndActions[$r75] := $r80;

$r81 := $r2;
$r82 := this;
$r83 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r82];

assume $Subtype($DynamicType($r83), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
$r84 := otherActions;
assume {:nonnull} $r84 != null;
$r85 := F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r84];

assume $Subtype($DynamicType($r85), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalyzerAction()));
assume {:nonnull} $r83 != null;
call $r86 := System.Collections.Immutable.ImmutableArray`1.AddRange$System.Collections.Immutable.ImmutableArray$`0$($r83,$r85);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r81 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions._operationBlockActions[$r81] := $r86;

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.get_SupportedDiagnostics(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var local_1 : Ref;
	var $r4 : Ref;
	var $r5 : int;
	var $r6 : Ref;
	var local_2 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var local_3 : Ref;
	var $r11 : Ref;
	var $r12 : int;
	var $r13 : Ref;
	var $r14 : Ref;
	var local_4 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r9 : Ref;
	var $r10 : bool;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var $temp_var_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;
	var DynamicDispatch_Type_5 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
local_1 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultIntValue;
$r6 := $defaultRef;
local_2 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
local_3 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultIntValue;
$r13 := $defaultRef;
$r14 := $defaultRef;
local_4 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultBoolValue;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer()))
{
call $r1 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.get_MessageProvider($r0);
assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.CommonMessageProvider());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer()))
{
call $r1 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.get_MessageProvider($r0);
assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.CommonMessageProvider());

}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_0 := $r1;
$r2 := this;
assume {:nonnull} $r2 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r2);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.GetSupportedErrorCodes($r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));

}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.GetSupportedErrorCodes($r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference()));

}

else if ($r2 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

local_1 := $r3;
$r4 := local_1;
assume {:nonnull} $r4 != null;
call $r5 := System.Collections.Immutable.ImmutableArray`1.get_Length($r4);


		if ($Exception != null)
		{
			return;
		}

call $r6 := System.Collections.Immutable.ImmutableArray.CreateBuilder``1$System.Int32($r5);


		if ($Exception != null)
		{
			return;
		}

local_2 := $r6;
$r7 := local_1;
assume {:nonnull} $r7 != null;
call $r8 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r7);


		if ($Exception != null)
		{
			return;
		}

local_3 := $r8;
		goto L_003C;
	L_0025:
$r11 := local_3;
assume {:nonnull} $r11 != null;
call $temp_var_2 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r11);
$r12 := Union2Int($temp_var_2);


		if ($Exception != null)
		{
			return;
		}

$r13 := local_0;
call $r14 := Microsoft.CodeAnalysis.DiagnosticInfo.GetDescriptor$System.Int32$Microsoft.CodeAnalysis.CommonMessageProvider($r12,$r13);


		if ($Exception != null)
		{
			return;
		}

local_4 := $r14;
$r15 := local_2;
$r16 := local_4;
assume {:nonnull} $r15 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r15);
if ($r15 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_003C:
$r9 := local_3;
assume {:nonnull} $r9 != null;
call $r10 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r9);


		if ($Exception != null)
		{
			return;
		}

if ($r10 == true)
{
		goto L_0025;
}

$r17 := local_2;
$r18 := null;
$r19 := null;
$r20 := null;
$r21 := null;
call $r22 := Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.GetAnalyzerExceptionDiagnosticDescriptor$System.String$System.String$System.String$System.String($r18,$r19,$r20,$r21);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r17 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r17);
if ($r17 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r23 := local_2;
assume {:nonnull} $r23 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r23);
if ($r23 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r24;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.Initialize$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext(this : Ref,context : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_1 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer());
assume context == null || $Subtype($DynamicType(context), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r0 := context;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.__9__11_0;
$r2 := $r1;
if ($r2 != null)
{
		goto L_0020;
}

$r3 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.__9;
call DynamicDispatch_Type_0 := System.Object.GetType($r3);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c()))
{
call $r5 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.$Initialize$b__11_0$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext,$r3,Type0());
		if ($Exception != null)
		{
			return;
		}


}

else if ($r3 != null)
{
assert false;
}

$r1 := $r5;
$r6 := $r1;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.__9__11_0 := $r6;
	L_0020:
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.AnalyzerAnalysisContext.RegisterCompilationStartAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext$($r0,$r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext$($r0,$r1);


}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostics.AnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext$($r0,$r1);


}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := $defaultRef;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
$r7 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.Origin := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.Syntactic := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.Declaration := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_syntactic := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_declaration := $defaultRef;
$r0 := F$Microsoft.Cci.DummyTypeReference.Empty;
$r1 := $string_literal_Origin;
assume $DynamicType($r1) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r1))) == T$System.String;
$r2 := $string_literal_Syntactic;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_syntactic := $r3;
$r4 := F$Microsoft.Cci.DummyTypeReference.Empty;
$r5 := $string_literal_Origin;
assume $DynamicType($r5) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r5))) == T$System.String;
$r6 := $string_literal_Declaration;
assume $DynamicType($r6) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r6))) == T$System.String;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r4);
if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_declaration := $r7;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.#ctor$Microsoft.CodeAnalysis.Compilation(this : Ref,compilation : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer());
assume compilation == null || $Subtype($DynamicType(compilation), T$Microsoft.CodeAnalysis.Compilation());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer._compilation[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := compilation;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer._compilation[$r1] := $r2;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.AnalyzeSyntaxTree$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext(this : Ref,context : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : bool;
	var $r5 : Ref;
	var $r6 : Ref;
	var local_0 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $initialize1 : int;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer());
assume context == null || $Subtype($DynamicType(context), T$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultBoolValue;
$r5 := $defaultRef;
$r6 := $defaultRef;
local_0 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer._compilation[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Compilation());
$r2 := context;
assume {:nonnull} $r2 != null;
call $r3 := Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.get_Tree($r2);


		if ($Exception != null)
		{
			return;
		}

$r4 := false;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Compilation()))
{
call $r5 := Microsoft.CodeAnalysis.Compilation.GetSemanticModel$Microsoft.CodeAnalysis.SyntaxTree$System.Boolean($r1,$r3,$r4);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r6 := local_0;
$initialize1 := 0;
local_0 := $initialize1;
$r7 := local_0;
$r8 := context;
assume {:nonnull} $r8 != null;
call $r9 := Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.get_CancellationToken($r8);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r5 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r5);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.SemanticModel()))
{
call $r10 := Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics$System.Nullable$Microsoft.CodeAnalysis.Text.TextSpan$$System.Threading.CancellationToken($r5,$r7,$r9);
assume $Subtype($DynamicType($r10), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.SemanticModel()))
{
call $r10 := Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics$System.Nullable$Microsoft.CodeAnalysis.Text.TextSpan$$System.Threading.CancellationToken($r5,$r7,$r9);
assume $Subtype($DynamicType($r10), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($r5 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r11 := context;
call $r12 := $BoxFromUnion($r11);
call DynamicDispatch_Type_3 := System.Object.GetType($r12);
if ($r12 != null)
{
assert false;
}

$r15 := $r14;
$r16 := null;
call DynamicDispatch_Type_4 := System.Object.GetType($r16);
call $r18 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.IsSourceLocation$Microsoft.CodeAnalysis.Location,$r16,Type0());
		if ($Exception != null)
		{
			return;
		}


$r19 := $r18;
$r20 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_syntactic;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.ReportDiagnostics$System.Collections.Immutable.ImmutableArray$Microsoft.CodeAnalysis.Diagnostic$$System.Action$Microsoft.CodeAnalysis.Diagnostic$$System.Func$Microsoft.CodeAnalysis.Location$System.Boolean$$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r10,$r15,$r19,$r20);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.AnalyzeSemanticModel$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext(context : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var local_0 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r19 : Ref;
	var $r20 : Ref;
	var $r21 : Ref;
	var $r22 : Ref;
	var $r23 : Ref;
	var $r24 : Ref;
	var $r25 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var $r27 : Ref;
	var $r28 : Ref;
	var $r29 : Ref;
	var $initialize0 : int;
	var $r31 : Ref;
	var $r32 : Ref;
	var $r33 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var $initialize4 : int;
	var DynamicDispatch_Type_5 : Ref;
	var DynamicDispatch_Type_6 : Ref;
	var DynamicDispatch_Type_7 : Ref;

assume context == null || $Subtype($DynamicType(context), T$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
local_0 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r19 := $defaultRef;
$r20 := $defaultRef;
$r21 := $defaultRef;
$r22 := $defaultRef;
$r23 := $defaultRef;
$r24 := $defaultRef;
$r25 := $defaultRef;
$r27 := $defaultRef;
$r28 := $defaultRef;
$r29 := $defaultRef;
$r31 := $defaultRef;
$r32 := $defaultRef;
$r33 := $defaultRef;
$r0 := context;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.get_SemanticModel($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := local_0;
$initialize0 := 0;
local_0 := $initialize0;
$r3 := local_0;
$r4 := context;
assume {:nonnull} $r4 != null;
call $r5 := Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.get_CancellationToken($r4);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.SemanticModel()))
{
call $r6 := Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics$System.Nullable$Microsoft.CodeAnalysis.Text.TextSpan$$System.Threading.CancellationToken($r1,$r3,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.SemanticModel()))
{
call $r6 := Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics$System.Nullable$Microsoft.CodeAnalysis.Text.TextSpan$$System.Threading.CancellationToken($r1,$r3,$r5);
assume $Subtype($DynamicType($r6), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r7 := context;
call $r8 := $BoxFromUnion($r7);
call DynamicDispatch_Type_2 := System.Object.GetType($r8);
if ($r8 != null)
{
assert false;
}

$r11 := $r10;
$r12 := null;
call DynamicDispatch_Type_3 := System.Object.GetType($r12);
call $r14 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.IsSourceLocation$Microsoft.CodeAnalysis.Location,$r12,Type0());
		if ($Exception != null)
		{
			return;
		}


$r15 := $r14;
$r16 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_declaration;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.ReportDiagnostics$System.Collections.Immutable.ImmutableArray$Microsoft.CodeAnalysis.Diagnostic$$System.Action$Microsoft.CodeAnalysis.Diagnostic$$System.Func$Microsoft.CodeAnalysis.Location$System.Boolean$$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r6,$r11,$r15,$r16);


		if ($Exception != null)
		{
			return;
		}

$r17 := context;
assume {:nonnull} $r17 != null;
call $r18 := Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.get_SemanticModel($r17);


		if ($Exception != null)
		{
			return;
		}

$r19 := local_0;
$initialize4 := 0;
local_0 := $initialize4;
$r20 := local_0;
$r21 := context;
assume {:nonnull} $r21 != null;
call $r22 := Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.get_CancellationToken($r21);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r18 != null;
call DynamicDispatch_Type_5 := System.Object.GetType($r18);
if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.SemanticModel()))
{
call $r23 := Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics$System.Nullable$Microsoft.CodeAnalysis.Text.TextSpan$$System.Threading.CancellationToken($r18,$r20,$r22);
assume $Subtype($DynamicType($r23), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($Subtype(DynamicDispatch_Type_5, T$Microsoft.CodeAnalysis.SemanticModel()))
{
call $r23 := Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics$System.Nullable$Microsoft.CodeAnalysis.Text.TextSpan$$System.Threading.CancellationToken($r18,$r20,$r22);
assume $Subtype($DynamicType($r23), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($r18 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r24 := context;
call $r25 := $BoxFromUnion($r24);
call DynamicDispatch_Type_6 := System.Object.GetType($r25);
if ($r25 != null)
{
assert false;
}

$r28 := $r27;
$r29 := null;
call DynamicDispatch_Type_7 := System.Object.GetType($r29);
call $r31 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.IsSourceLocation$Microsoft.CodeAnalysis.Location,$r29,Type0());
		if ($Exception != null)
		{
			return;
		}


$r32 := $r31;
$r33 := null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.ReportDiagnostics$System.Collections.Immutable.ImmutableArray$Microsoft.CodeAnalysis.Diagnostic$$System.Action$Microsoft.CodeAnalysis.Diagnostic$$System.Func$Microsoft.CodeAnalysis.Location$System.Boolean$$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r23,$r28,$r32,$r33);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.AnalyzeCompilation$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext(context : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r13 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r12 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_2 : Ref;

assume context == null || $Subtype($DynamicType(context), T$Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r13 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r12 := $defaultRef;
$r0 := context;
assume {:nonnull} $r0 != null;
call $r1 := Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.get_Compilation($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := context;
assume {:nonnull} $r2 != null;
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.get_CancellationToken($r2);


		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Compilation()))
{
call $r4 := Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics$System.Threading.CancellationToken($r1,$r3);
assume $Subtype($DynamicType($r4), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Compilation()))
{
call $r4 := Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics$System.Threading.CancellationToken($r1,$r3);
assume $Subtype($DynamicType($r4), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r5 := context;
call $r6 := $BoxFromUnion($r5);
call DynamicDispatch_Type_1 := System.Object.GetType($r6);
if ($r6 != null)
{
assert false;
}

$r9 := $r8;
$r10 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.__9__4_0;
$r11 := $r10;
if ($r11 != null)
{
		goto L_0043;
}

$r13 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.__9;
call DynamicDispatch_Type_2 := System.Object.GetType($r13);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c()))
{
call $r15 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.$AnalyzeCompilation$b__4_0$Microsoft.CodeAnalysis.Location,$r13,Type0());
		if ($Exception != null)
		{
			return;
		}


}

else if ($r13 != null)
{
assert false;
}

$r10 := $r15;
$r16 := $r10;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.__9__4_0 := $r16;
	L_0043:
$r12 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.s_declaration;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.ReportDiagnostics$System.Collections.Immutable.ImmutableArray$Microsoft.CodeAnalysis.Diagnostic$$System.Action$Microsoft.CodeAnalysis.Diagnostic$$System.Func$Microsoft.CodeAnalysis.Location$System.Boolean$$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r4,$r9,$r10,$r12);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.IsSourceLocation$Microsoft.CodeAnalysis.Location(location : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : int;
	var $r7 : bool;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume location == null || $Subtype($DynamicType(location), T$Microsoft.CodeAnalysis.Location());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultIntValue;
$r7 := $defaultBoolValue;
$r3 := $defaultBoolValue;
$r0 := location;
$r1 := null;
call $r2 := Microsoft.CodeAnalysis.Location.op_Inequality$Microsoft.CodeAnalysis.Location$Microsoft.CodeAnalysis.Location($r0,$r1);


		if ($Exception != null)
		{
			return;
		}

if ($r2 == false)
{
		goto L_0013;
}

$r4 := location;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r4);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.ExternalFileLocation()))
{
call $r5 := Microsoft.CodeAnalysis.ExternalFileLocation.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.MetadataLocation()))
{
call $r5 := Microsoft.CodeAnalysis.MetadataLocation.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.NoLocation()))
{
call $r5 := Microsoft.CodeAnalysis.NoLocation.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.SourceLocation()))
{
call $r5 := Microsoft.CodeAnalysis.SourceLocation.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.XmlLocation()))
{
call $r5 := Microsoft.CodeAnalysis.XmlLocation.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Location()))
{
call $r5 := Microsoft.CodeAnalysis.Location.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Location()))
{
call $r5 := Microsoft.CodeAnalysis.Location.get_Kind($r4);
assume $Subtype($DynamicType($r5), T$Microsoft.CodeAnalysis.LocationKind());

}

else if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r6 := 1;
$r7 := $r5 == $r6;
$result := $r7;
return ;
	L_0013:
$r3 := false;
$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.ReportDiagnostics$System.Collections.Immutable.ImmutableArray$Microsoft.CodeAnalysis.Diagnostic$$System.Action$Microsoft.CodeAnalysis.Diagnostic$$System.Func$Microsoft.CodeAnalysis.Location$System.Boolean$$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$(diagnostics : Ref,reportDiagnostic : Ref,locationFilter : Ref,properties : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var local_0 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var local_1 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : bool;
	var $r10 : Ref;
	var $r11 : Ref;
	var $r12 : Ref;
	var $r14 : Ref;
	var $r15 : Ref;
	var $r16 : Ref;
	var $r13 : Ref;
	var local_2 : Ref;
	var $r17 : Ref;
	var $r18 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;

assume diagnostics == null || $Subtype($DynamicType(diagnostics), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));
assume reportDiagnostic == null || $Subtype($DynamicType(reportDiagnostic), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Diagnostic()));
assume locationFilter == null || $Subtype($DynamicType(locationFilter), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location(),T$Microsoft.Cci.DummyTypeReference()));
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
local_0 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
local_1 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultBoolValue;
$r10 := $defaultRef;
$r11 := $defaultRef;
$r12 := $defaultRef;
$r14 := $defaultRef;
$r15 := $defaultRef;
$r16 := $defaultRef;
$r13 := $defaultRef;
local_2 := $defaultRef;
$r17 := $defaultRef;
$r18 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r0 := diagnostics;
assume {:nonnull} $r0 != null;
call $r1 := System.Collections.Immutable.ImmutableArray`1.GetEnumerator($r0);


		if ($Exception != null)
		{
			return;
		}

local_0 := $r1;
		goto L_003D;
	L_000A:
$r4 := local_0;
assume {:nonnull} $r4 != null;
call $r5 := System.Collections.Immutable.ImmutableArray`1.Enumerator.get_Current($r4);


		if ($Exception != null)
		{
			return;
		}

local_1 := $r5;
$r6 := locationFilter;
$r7 := local_1;
assume {:nonnull} $r7 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r7);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r8 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location($r7);
assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r8 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Location($r7);
assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r8 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Location($r7);
assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r8 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r7);
assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r8 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r7);
assume $Subtype($DynamicType($r8), T$Microsoft.CodeAnalysis.Location());

}

else if ($r7 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

assume {:nonnull} $r6 != null;
call DynamicDispatch_Type_1 := System.Object.GetType($r6);
if ($r6 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r9 == false)
{
		goto L_003D;
}

$r10 := local_1;
assume {:nonnull} $r10 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r10);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r11 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Severity($r10);
assume $Subtype($DynamicType($r11), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r11 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Severity($r10);
assume $Subtype($DynamicType($r11), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r11 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Severity($r10);
assume $Subtype($DynamicType($r11), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r11 := Microsoft.CodeAnalysis.Diagnostic.get_Severity($r10);
assume $Subtype($DynamicType($r11), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r11 := Microsoft.CodeAnalysis.Diagnostic.get_Severity($r10);
assume $Subtype($DynamicType($r11), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($r10 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

if ($r11 == 0)
{
		goto L_003D;
}

$r12 := properties;
if ($r12 == null)
{
		goto L_0034;
}

$r14 := local_1;
$r15 := properties;
call $r16 := Alloc();
assume $DynamicType($r16) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic();
assume $TypeConstructor($DynamicType($r16)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic;
assume {:nonnull} $r16 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.#ctor$Microsoft.CodeAnalysis.Diagnostic$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r16,$r14,$r15);


		if ($Exception != null)
		{
			return;
		}

$r13 := $r16;
		goto L_0035;
	L_0034:
$r13 := local_1;
	L_0035:
local_2 := $r13;
$r17 := reportDiagnostic;
$r18 := local_2;
assume {:nonnull} $r17 != null;
call DynamicDispatch_Type_3 := System.Object.GetType($r17);
if ($r17 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

	L_003D:
$r2 := local_0;
assume {:nonnull} $r2 != null;
call $r3 := System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext($r2);


		if ($Exception != null)
		{
			return;
		}

if ($r3 == true)
{
		goto L_000A;
}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.#ctor$Microsoft.CodeAnalysis.Diagnostic$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$(this : Ref,original : Ref,properties : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
assume original == null || $Subtype($DynamicType(original), T$Microsoft.CodeAnalysis.Diagnostic());
assume properties == null || $Subtype($DynamicType(properties), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._properties[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostic.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := original;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r1] := $r2;

$r3 := this;
$r4 := properties;
assume {:nonnull} $r3 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._properties[$r3] := $r4;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Descriptor(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Descriptor($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticDescriptor());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Descriptor($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticDescriptor());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Descriptor($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticDescriptor());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Descriptor($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticDescriptor());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Descriptor($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticDescriptor());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Code(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Code($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Code($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Code($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Arguments(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Arguments($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Arguments($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Arguments($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Arguments($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Id(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
assume $DynamicType($r2) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r2))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Id($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Id($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Id($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Id($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Id($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Severity(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Severity($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Severity($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Severity($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Severity($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Severity($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.DiagnosticSeverity());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_WarningLevel(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_WarningLevel($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_WarningLevel($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_WarningLevel($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_WarningLevel($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_WarningLevel($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Location(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_Location($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_Location($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Location($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.Location());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_Location($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.CodeAnalysis.Location());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_AdditionalLocations(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_AdditionalLocations($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_AdditionalLocations($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_AdditionalLocations($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_AdditionalLocations($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_AdditionalLocations($r1);
assume $Subtype($DynamicType($r2), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.CodeAnalysis.Location()));

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_IsSuppressed(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.get_IsSuppressed($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.get_IsSuppressed($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_IsSuppressed($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_IsSuppressed($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.get_IsSuppressed($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.get_Properties(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._properties[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.GetMessage$System.IFormatProvider(this : Ref,formatProvider : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
assume formatProvider == null || $Subtype($DynamicType(formatProvider), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
assume $DynamicType($r3) == T$Microsoft.Cci.DummyTypeReference();
assume $TypeConstructor($DynamicType($DynamicType($r3))) == T$System.String;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
$r2 := formatProvider;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.GetMessage$System.IFormatProvider($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.GetMessage$System.IFormatProvider($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.GetMessage$System.IFormatProvider($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.GetMessage$System.IFormatProvider($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.GetMessage$System.IFormatProvider($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.Cci.DummyTypeReference());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.Equals$System.Object(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.Cci.DummyTypeReference());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
$r2 := obj;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.Equals$System.Object($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.Equals$System.Object($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.Equals$System.Object($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.Equals$System.Object($r1,$r2);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.GetHashCode(this : Ref) returns ($result : int)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : int;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultIntValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r2 := Microsoft.CodeAnalysis.DiagnosticWithInfo.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.GetHashCode($r1);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r2 := Microsoft.CodeAnalysis.Diagnostic.GetHashCode($r1);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r2;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.Equals$Microsoft.CodeAnalysis.Diagnostic(this : Ref,obj : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
assume obj == null || $Subtype($DynamicType(obj), T$Microsoft.CodeAnalysis.Diagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
$r2 := obj;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.Equals$Microsoft.CodeAnalysis.Diagnostic($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.Equals$Microsoft.CodeAnalysis.Diagnostic($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.Equals$Microsoft.CodeAnalysis.Diagnostic($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.Equals$Microsoft.CodeAnalysis.Diagnostic($r1,$r2);


}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.Equals$Microsoft.CodeAnalysis.Diagnostic($r1,$r2);


}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.WithLocation$Microsoft.CodeAnalysis.Location(this : Ref,location : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.CodeAnalysis.Location());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
$r2 := location;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.WithLocation$Microsoft.CodeAnalysis.Location($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.WithLocation$Microsoft.CodeAnalysis.Location($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.WithLocation$Microsoft.CodeAnalysis.Location($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.WithLocation$Microsoft.CodeAnalysis.Location($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.WithLocation$Microsoft.CodeAnalysis.Location($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._properties[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic();
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.#ctor$Microsoft.CodeAnalysis.Diagnostic$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r6,$r3,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
$result := $r7;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity(this : Ref,severity : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
assume severity == null || $Subtype($DynamicType(severity), T$Microsoft.CodeAnalysis.DiagnosticSeverity());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
$r2 := severity;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.WithSeverity$Microsoft.CodeAnalysis.DiagnosticSeverity($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._properties[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic();
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.#ctor$Microsoft.CodeAnalysis.Diagnostic$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r6,$r3,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
$result := $r7;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.WithIsSuppressed$System.Boolean(this : Ref,isSuppressed : bool) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : bool;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_0 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultBoolValue;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._original[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostic());
$r2 := isSuppressed;
assume {:nonnull} $r1 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r1);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.DiagnosticWithInfo()))
{
call $r3 := Microsoft.CodeAnalysis.DiagnosticWithInfo.WithIsSuppressed$System.Boolean($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.SimpleDiagnostic.WithIsSuppressed$System.Boolean($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.WithIsSuppressed$System.Boolean($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.WithIsSuppressed$System.Boolean($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostic()))
{
call $r3 := Microsoft.CodeAnalysis.Diagnostic.WithIsSuppressed$System.Boolean($r1,$r2);
assume $Subtype($DynamicType($r3), T$Microsoft.CodeAnalysis.Diagnostic());

}

else if ($r1 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r4 := this;
assume {:nonnull} $r4 != null;
$r5 := F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic._properties[$r4];

assume $Subtype($DynamicType($r5), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
call $r6 := Alloc();
assume $DynamicType($r6) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic();
assume $TypeConstructor($DynamicType($r6)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic;
assume {:nonnull} $r6 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.CompilerDiagnostic.#ctor$Microsoft.CodeAnalysis.Diagnostic$System.Collections.Immutable.ImmutableDictionary$System.String$System.String$($r6,$r3,$r5);


		if ($Exception != null)
		{
			return;
		}

$r7 := $r6;
$result := $r7;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.__9 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.__9__4_0 := $defaultRef;
call $r0 := Alloc();
assume $DynamicType($r0) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c();
assume $TypeConstructor($DynamicType($r0)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := $r0;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.__9 := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c.$AnalyzeCompilation$b__4_0$Microsoft.CodeAnalysis.Location(this : Ref,location : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $r2 : bool;
	var $r3 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.$$c());
assume location == null || $Subtype($DynamicType(location), T$Microsoft.CodeAnalysis.Location());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r2 := $defaultBoolValue;
$r3 := $defaultBoolValue;
$r0 := location;
call $r1 := Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.IsSourceLocation$Microsoft.CodeAnalysis.Location($r0);


		if ($Exception != null)
		{
			return;
		}

$r2 := false;
$r3 := $r1 == $r2;
$result := $r3;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.#cctor() 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.__9 := $defaultRef;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.__9__11_0 := $defaultRef;
call $r0 := Alloc();
assume $DynamicType($r0) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c();
assume $TypeConstructor($DynamicType($r0)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := $r0;
F$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.__9 := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.#ctor(this : Ref) 
{
	var $r0 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c.$Initialize$b__11_0$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext(this : Ref,c : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var local_0 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var DynamicDispatch_Type_1 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;
	var DynamicDispatch_Type_2 : Ref;
	var DynamicDispatch_Type_3 : Ref;
	var DynamicDispatch_Type_4 : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.$$c());
assume c == null || $Subtype($DynamicType(c), T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
local_0 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
$r0 := c;
assume {:nonnull} $r0 != null;
call DynamicDispatch_Type_0 := System.Object.GetType($r0);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext()))
{
call $r1 := Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.get_Compilation($r0);


}

else if ($r0 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

call $r2 := Alloc();
assume $DynamicType($r2) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer();
assume $TypeConstructor($DynamicType($r2)) == T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer;
assume {:nonnull} $r2 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.#ctor$Microsoft.CodeAnalysis.Compilation($r2,$r1);


		if ($Exception != null)
		{
			return;
		}

$r3 := $r2;
local_0 := $r3;
$r4 := c;
$r5 := local_0;
call DynamicDispatch_Type_1 := System.Object.GetType($r5);
if ($Subtype(DynamicDispatch_Type_1, T$Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer()))
{
call $r7 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.AnalyzeSyntaxTree$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,$r5,Type0());
		if ($Exception != null)
		{
			return;
		}


}

else if ($r5 != null)
{
assert false;
}

$r8 := $r7;
assume {:nonnull} $r4 != null;
call DynamicDispatch_Type_2 := System.Object.GetType($r4);
if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext.RegisterSyntaxTreeAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext$($r4,$r8);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext$($r4,$r8);


}

else if ($Subtype(DynamicDispatch_Type_2, T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext$($r4,$r8);


}

else if ($r4 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

$r9 := c;
$r10 := null;
call DynamicDispatch_Type_3 := System.Object.GetType($r10);
call $r12 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.CompilerDiagnosticAnalyzer.CompilationAnalyzer.AnalyzeSemanticModel$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext,$r10,Type0());
		if ($Exception != null)
		{
			return;
		}


$r13 := $r12;
assume {:nonnull} $r9 != null;
call DynamicDispatch_Type_4 := System.Object.GetType($r9);
if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.AnalyzerCompilationStartAnalysisContext.RegisterSemanticModelAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext$($r9,$r13);


}

else if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext$($r9,$r13);


}

else if ($Subtype(DynamicDispatch_Type_4, T$Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext()))
{
call Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction$System.Action$Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext$($r9,$r13);


}

else if ($r9 != null)
{
assert false;
}

		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.get_Options(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._options[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions());
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.get_OnAnalyzerException(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._onAnalyzerException[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(),T$Microsoft.CodeAnalysis.Diagnostic()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.get_AnalyzerExceptionFilter(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._analyzerExceptionFilter[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.get_ConcurrentAnalysis(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._concurrentAnalysis[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.get_LogAnalyzerExecutionTime(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._logAnalyzerExecutionTime[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.get_ReportSuppressedDiagnostics(this : Ref) returns ($result : bool)
{
	var $r0 : Ref;
	var $r1 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultBoolValue;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._reportSuppressedDiagnostics[$r0];

$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions$System.Action$System.Exception$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$Microsoft.CodeAnalysis.Diagnostic$$System.Boolean$System.Boolean(this : Ref,options : Ref,onAnalyzerException : Ref,concurrentAnalysis : bool,logAnalyzerExecutionTime : bool) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $r4 : bool;
	var $r5 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
assume options == null || $Subtype($DynamicType(options), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions());
assume onAnalyzerException == null || $Subtype($DynamicType(onAnalyzerException), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(),T$Microsoft.CodeAnalysis.Diagnostic()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r4 := $defaultBoolValue;
$r5 := $defaultBoolValue;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._options[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._onAnalyzerException[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._analyzerExceptionFilter[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._concurrentAnalysis[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._logAnalyzerExecutionTime[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._reportSuppressedDiagnostics[this] := $defaultBoolValue;

$r0 := this;
$r1 := options;
$r2 := onAnalyzerException;
$r3 := concurrentAnalysis;
$r4 := logAnalyzerExecutionTime;
$r5 := false;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions$System.Action$System.Exception$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$Microsoft.CodeAnalysis.Diagnostic$$System.Boolean$System.Boolean$System.Boolean($r0,$r1,$r2,$r3,$r4,$r5);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions$System.Action$System.Exception$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$Microsoft.CodeAnalysis.Diagnostic$$System.Boolean$System.Boolean$System.Boolean(this : Ref,options : Ref,onAnalyzerException : Ref,concurrentAnalysis : bool,logAnalyzerExecutionTime : bool,reportSuppressedDiagnostics : bool) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : bool;
	var $r4 : bool;
	var $r5 : bool;
	var $r6 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
assume options == null || $Subtype($DynamicType(options), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions());
assume onAnalyzerException == null || $Subtype($DynamicType(onAnalyzerException), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(),T$Microsoft.CodeAnalysis.Diagnostic()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultBoolValue;
$r4 := $defaultBoolValue;
$r5 := $defaultBoolValue;
$r6 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._options[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._onAnalyzerException[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._analyzerExceptionFilter[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._concurrentAnalysis[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._logAnalyzerExecutionTime[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._reportSuppressedDiagnostics[this] := $defaultBoolValue;

$r0 := this;
$r1 := options;
$r2 := onAnalyzerException;
$r3 := concurrentAnalysis;
$r4 := logAnalyzerExecutionTime;
$r5 := reportSuppressedDiagnostics;
$r6 := null;
assume {:nonnull} $r0 != null;
call Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions$System.Action$System.Exception$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$Microsoft.CodeAnalysis.Diagnostic$$System.Boolean$System.Boolean$System.Boolean$System.Func$System.Exception$System.Boolean$($r0,$r1,$r2,$r3,$r4,$r5,$r6);


		if ($Exception != null)
		{
			return;
		}

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions$System.Action$System.Exception$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer$Microsoft.CodeAnalysis.Diagnostic$$System.Boolean$System.Boolean$System.Boolean$System.Func$System.Exception$System.Boolean$(this : Ref,options : Ref,onAnalyzerException : Ref,concurrentAnalysis : bool,logAnalyzerExecutionTime : bool,reportSuppressedDiagnostics : bool,analyzerExceptionFilter : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : bool;
	var $r9 : Ref;
	var $r10 : bool;
	var $r11 : Ref;
	var $r12 : bool;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions());
assume options == null || $Subtype($DynamicType(options), T$Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions());
assume onAnalyzerException == null || $Subtype($DynamicType(onAnalyzerException), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer(),T$Microsoft.CodeAnalysis.Diagnostic()));
assume analyzerExceptionFilter == null || $Subtype($DynamicType(analyzerExceptionFilter), T$Microsoft.Cci.DummyTypeReference(T$Microsoft.Cci.DummyTypeReference(),T$Microsoft.Cci.DummyTypeReference()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultBoolValue;
$r9 := $defaultRef;
$r10 := $defaultBoolValue;
$r11 := $defaultRef;
$r12 := $defaultBoolValue;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._options[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._onAnalyzerException[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._analyzerExceptionFilter[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._concurrentAnalysis[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._logAnalyzerExecutionTime[this] := $defaultBoolValue;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._reportSuppressedDiagnostics[this] := $defaultBoolValue;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := options;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._options[$r1] := $r2;

$r3 := this;
$r4 := onAnalyzerException;
assume {:nonnull} $r3 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._onAnalyzerException[$r3] := $r4;

$r5 := this;
$r6 := analyzerExceptionFilter;
assume {:nonnull} $r5 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._analyzerExceptionFilter[$r5] := $r6;

$r7 := this;
$r8 := concurrentAnalysis;
assume {:nonnull} $r7 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._concurrentAnalysis[$r7] := $r8;

$r9 := this;
$r10 := logAnalyzerExecutionTime;
assume {:nonnull} $r9 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._logAnalyzerExecutionTime[$r9] := $r10;

$r11 := this;
$r12 := reportSuppressedDiagnostics;
assume {:nonnull} $r11 != null;
F$Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions._reportSuppressedDiagnostics[$r11] := $r12;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.get_KeyComparer(this : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
assume {:nonnull} $r0 != null;
$r1 := F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.$KeyComparer$k__BackingField[$r0];

assume $Subtype($DynamicType($r1), T$Microsoft.Cci.DummyTypeReference(T$TKey()));
$result := $r1;
return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.set_KeyComparer$System.Collections.Generic.IEqualityComparer$`0$(this : Ref,value : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue()));
assume value == null || $Subtype($DynamicType(value), T$Microsoft.Cci.DummyTypeReference(T$TKey()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r0 := this;
$r1 := value;
assume {:nonnull} $r0 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.$KeyComparer$k__BackingField[$r0] := $r1;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.#ctor$System.Func$`0$`1$$System.Collections.Generic.IEqualityComparer$`0$(this : Ref,computeValue : Ref,keyComparer : Ref) 
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $r8 : Ref;
	var $r9 : Ref;
	var $r10 : Ref;
	var DynamicDispatch_Type_0 : Ref;
	var $r12 : Ref;
	var $r13 : Ref;
	var $defaultIntValue : int;
	var $defaultRealValue : real;
	var $defaultBoolValue : bool;
	var $defaultRef : Ref;

assume this != null;
assume $Subtype($DynamicType(this), T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue()));
assume computeValue == null || $Subtype($DynamicType(computeValue), T$Microsoft.Cci.DummyTypeReference(T$TKey(),T$TValue()));
assume keyComparer == null || $Subtype($DynamicType(keyComparer), T$Microsoft.Cci.DummyTypeReference(T$TKey()));
$defaultIntValue := 0;
$defaultRealValue := 0.00;
$defaultBoolValue := false;
$defaultRef := null;
$r0 := $defaultRef;
$r1 := $defaultRef;
$r2 := $defaultRef;
$r3 := $defaultRef;
$r4 := $defaultRef;
$r5 := $defaultRef;
$r6 := $defaultRef;
$r7 := $defaultRef;
$r8 := $defaultRef;
$r9 := $defaultRef;
$r10 := $defaultRef;
$r12 := $defaultRef;
$r13 := $defaultRef;
assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2._computeValue[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2._valueCache[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2._valueCacheCallback[this] := $defaultRef;

assume {:nonnull} this != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.$KeyComparer$k__BackingField[this] := $defaultRef;

$r0 := this;
assume {:nonnull} $r0 != null;
call System.Object.#ctor($r0);


		if ($Exception != null)
		{
			return;
		}

$r1 := this;
$r2 := computeValue;
assume {:nonnull} $r1 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2._computeValue[$r1] := $r2;

$r3 := this;
$r4 := keyComparer;
$r5 := $r4;
if ($r5 != null)
{
		goto L_0018;
}

call $r4 := System.Collections.Generic.EqualityComparer`1.get_Default();


		if ($Exception != null)
		{
			return;
		}

	L_0018:
assume {:nonnull} $r3 != null;
call Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.set_KeyComparer$System.Collections.Generic.IEqualityComparer$`0$($r3,$r4);


		if ($Exception != null)
		{
			return;
		}

$r6 := this;
call $r7 := Alloc();
assume $DynamicType($r7) == T$Microsoft.Cci.DummyTypeReference(T$TKey(),T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.WrappedValue());
assume $TypeConstructor($DynamicType($r7)) == T$Microsoft.Cci.DummyTypeReference;
assume {:nonnull} $r7 != null;
call System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor($r7);


		if ($Exception != null)
		{
			return;
		}

$r8 := $r7;
assume {:nonnull} $r6 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2._valueCache[$r6] := $r8;

$r9 := this;
$r10 := this;
call DynamicDispatch_Type_0 := System.Object.GetType($r10);
if ($Subtype(DynamicDispatch_Type_0, T$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2(T$TKey(),T$TValue())))
{
call $r12 := CreateDelegate_Microsoft.Cci.DummyTypeReference(Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.ComputeValue$`0,$r10,Type0());
		if ($Exception != null)
		{
			return;
		}


}

else if ($r10 != null)
{
assert false;
}

$r13 := $r12;
assume {:nonnull} $r9 != null;
F$Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2._valueCacheCallback[$r9] := $r13;

return ;

}

 

procedure  Microsoft.CodeAnalysis.Diagnostics.AnalysisValueProvider`2.ComputeValue$`0(this : Ref,key : Ref) returns ($result : Ref)
{
	var $r0 : Ref;
	var $r1 : Ref;
	var $r2 : Ref;
	var $r3 : Ref;
	var local_0 : Ref;
	var $r4 : Ref;
	var $r5 : Ref;
	var $r6 : Ref;
	var $r7 : Ref;
	var $de